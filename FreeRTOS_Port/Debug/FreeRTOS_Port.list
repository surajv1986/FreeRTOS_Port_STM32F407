
FreeRTOS_Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c40  08004c40  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c48  08004c48  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012db0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e28  20012e28  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2ac  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225d  00000000  00000000  0002d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  00030320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b81  00000000  00000000  00030f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f66a  00000000  00000000  00033af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d17c7  00000000  00000000  0004315b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114922  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ec8  00000000  00000000  00114974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004af0 	.word	0x08004af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004af0 	.word	0x08004af0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <myTask2>:
 * @brief : A FreeRTOS Task Handler example with a single argument handled.
 * @param : A void argument pointer.
 * @return: None.
 */
void myTask2(void *p)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	int count = (int *)p;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60fb      	str	r3, [r7, #12]
	TickType_t myLastUnblock;

	while(1){
		printf("count is %d\r\n", count++);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60fa      	str	r2, [r7, #12]
 8000586:	4619      	mov	r1, r3
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <myTask2+0x44>)
 800058a:	f003 faad 	bl	8003ae8 <iprintf>
		//vTaskDelay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		myLastUnblock = xTaskGetTickCount();
 800058e:	f002 fba7 	bl	8002ce0 <xTaskGetTickCount>
 8000592:	4603      	mov	r3, r0
 8000594:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&myLastUnblock, pdMS_TO_TICKS(1000));
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f826 	bl	80025f0 <xTaskDelayUntil>
		if (count >= 30){
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b1d      	cmp	r3, #29
 80005a8:	ddea      	ble.n	8000580 <myTask2+0xc>
			vTaskDelete(myTask2Handle);
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <myTask2+0x48>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 ff8a 	bl	80024c8 <vTaskDelete>
		printf("count is %d\r\n", count++);
 80005b4:	e7e4      	b.n	8000580 <myTask2+0xc>
 80005b6:	bf00      	nop
 80005b8:	08004b08 	.word	0x08004b08
 80005bc:	20000094 	.word	0x20000094

080005c0 <myIntTask>:
	}

}

void myIntTask(void *p)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	while(1) {
		vTaskSuspend(NULL); //Suspend Itself.
 80005c8:	2000      	movs	r0, #0
 80005ca:	f002 f8c3 	bl	8002754 <vTaskSuspend>
		vTaskDelay(1000 * configTICK_RATE_HZ / 1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f002 f88b 	bl	80026ec <vTaskDelay>
		printf("The user button is pressed!!!\r\n");
 80005d6:	4802      	ldr	r0, [pc, #8]	; (80005e0 <myIntTask+0x20>)
 80005d8:	f003 fb0c 	bl	8003bf4 <puts>
		vTaskSuspend(NULL); //Suspend Itself.
 80005dc:	e7f4      	b.n	80005c8 <myIntTask+0x8>
 80005de:	bf00      	nop
 80005e0:	08004b18 	.word	0x08004b18

080005e4 <button_init>:
 * @brief : Configure on discovery board Button for interrupt.
 * @param : None.
 * @return: None.
 * */
void button_init()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <button_init+0x54>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <button_init+0x54>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <button_init+0x54>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8000606:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800060a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pin = GPIO_PIN_0;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <button_init+0x58>)
 800061a:	f000 fc39 	bl	8000e90 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	210a      	movs	r1, #10
 8000622:	2006      	movs	r0, #6
 8000624:	f000 fc0a 	bl	8000e3c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000628:	2006      	movs	r0, #6
 800062a:	f000 fc23 	bl	8000e74 <HAL_NVIC_EnableIRQ>
}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000

08000640 <_EXTI0_IRQHandler>:
/*
 * @brief : Interrupt Service Routine for User Button on Discovery Board.
 * @param : None.
 * */
void _EXTI0_IRQHandler()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	BaseType_t checkIfYieldIsRequired;

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fdd8 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
	checkIfYieldIsRequired = xTaskResumeFromISR(myIntTaskHandle);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <_EXTI0_IRQHandler+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f951 	bl	80028f8 <xTaskResumeFromISR>
 8000656:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(checkIfYieldIsRequired);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d007      	beq.n	800066e <_EXTI0_IRQHandler+0x2e>
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_EXTI0_IRQHandler+0x3c>)
 8000660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	f3bf 8f6f 	isb	sy

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000098 	.word	0x20000098
 800067c:	e000ed04 	.word	0xe000ed04

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fadf 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f849 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f8a5 	bl	80007dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int pass = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
  printf("Hello RTOS\r\n");
 8000696:	4818      	ldr	r0, [pc, #96]	; (80006f8 <main+0x78>)
 8000698:	f003 faac 	bl	8003bf4 <puts>
  button_init();
 800069c:	f7ff ffa2 	bl	80005e4 <button_init>
   xReturn = xTaskCreate(myTask3, "Task3", 200, (void *) 0, tskIDLE_PRIORITY, &myTask3Handle);
   if (xReturn != pdPASS) {
      	  printf("Error creating task2!!!");
   }
#endif
   xReturn = xTaskCreate(myTask2, "Task2", 200, (void *) pass, tskIDLE_PRIORITY, &myTask2Handle);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <main+0x7c>)
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	22c8      	movs	r2, #200	; 0xc8
 80006ac:	4914      	ldr	r1, [pc, #80]	; (8000700 <main+0x80>)
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <main+0x84>)
 80006b0:	f001 fda0 	bl	80021f4 <xTaskCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <main+0x88>)
 80006b8:	6013      	str	r3, [r2, #0]
       if (xReturn != pdPASS) {
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <main+0x88>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d002      	beq.n	80006c8 <main+0x48>
     	  printf("Error creating task2!!!");
 80006c2:	4812      	ldr	r0, [pc, #72]	; (800070c <main+0x8c>)
 80006c4:	f003 fa10 	bl	8003ae8 <iprintf>
       }
   xReturn = xTaskCreate(myIntTask, "IntTask", 200, (void *) 0, tskIDLE_PRIORITY, &myIntTaskHandle);
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <main+0x90>)
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2300      	movs	r3, #0
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	22c8      	movs	r2, #200	; 0xc8
 80006d4:	490f      	ldr	r1, [pc, #60]	; (8000714 <main+0x94>)
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <main+0x98>)
 80006d8:	f001 fd8c 	bl	80021f4 <xTaskCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <main+0x88>)
 80006e0:	6013      	str	r3, [r2, #0]
   if (xReturn != pdPASS) {
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <main+0x88>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d002      	beq.n	80006f0 <main+0x70>
      printf("Error creating IntTask!!!");
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0x9c>)
 80006ec:	f003 f9fc 	bl	8003ae8 <iprintf>
   }
  vTaskStartScheduler();
 80006f0:	f002 f9a0 	bl	8002a34 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x74>
 80006f6:	bf00      	nop
 80006f8:	08004b38 	.word	0x08004b38
 80006fc:	20000094 	.word	0x20000094
 8000700:	08004b44 	.word	0x08004b44
 8000704:	08000575 	.word	0x08000575
 8000708:	2000009c 	.word	0x2000009c
 800070c:	08004b4c 	.word	0x08004b4c
 8000710:	20000098 	.word	0x20000098
 8000714:	08004b64 	.word	0x08004b64
 8000718:	080005c1 	.word	0x080005c1
 800071c:	08004b6c 	.word	0x08004b6c

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 f9d2 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xb4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xb4>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xb4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <SystemClock_Config+0xb8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <SystemClock_Config+0xb8>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <SystemClock_Config+0xb8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fd57 	bl	8001244 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800079c:	f000 f878 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ffba 	bl	8001734 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007c6:	f000 f863 	bl	8000890 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_GPIO_Init+0x88>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <MX_GPIO_Init+0x88>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_GPIO_Init+0x88>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_GPIO_Init+0x8c>)
 8000814:	f000 fcd8 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000818:	2301      	movs	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0x8c>)
 800082c:	f000 fb30 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_GPIO_Init+0x8c>)
 8000848:	f000 fb22 	bl	8000e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2006      	movs	r0, #6
 8000852:	f000 faf3 	bl	8000e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000856:	2006      	movs	r0, #6
 8000858:	f000 fb0c 	bl	8000e74 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 fa05 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40000800 	.word	0x40000800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <HAL_InitTick+0xe4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <HAL_InitTick+0xe4>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <HAL_InitTick+0xe4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000918:	f107 0210 	add.w	r2, r7, #16
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f8d2 	bl	8001acc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800092c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092e:	2b00      	cmp	r3, #0
 8000930:	d103      	bne.n	800093a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000932:	f001 f8b7 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8000936:	6378      	str	r0, [r7, #52]	; 0x34
 8000938:	e004      	b.n	8000944 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800093a:	f001 f8b3 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 800093e:	4603      	mov	r3, r0
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <HAL_InitTick+0xe8>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	0c9b      	lsrs	r3, r3, #18
 800094e:	3b01      	subs	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_InitTick+0xec>)
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <HAL_InitTick+0xf0>)
 8000956:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_InitTick+0xec>)
 800095a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_InitTick+0xec>)
 8000962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000964:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_InitTick+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_InitTick+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_InitTick+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000978:	4817      	ldr	r0, [pc, #92]	; (80009d8 <HAL_InitTick+0xec>)
 800097a:	f001 f8d9 	bl	8001b30 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000988:	2b00      	cmp	r3, #0
 800098a:	d11b      	bne.n	80009c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <HAL_InitTick+0xec>)
 800098e:	f001 f929 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800099c:	2b00      	cmp	r3, #0
 800099e:	d111      	bne.n	80009c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009a0:	201e      	movs	r0, #30
 80009a2:	f000 fa67 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d808      	bhi.n	80009be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	201e      	movs	r0, #30
 80009b2:	f000 fa43 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_InitTick+0xf4>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e002      	b.n	80009c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	200000a0 	.word	0x200000a0
 80009dc:	40000800 	.word	0x40000800
 80009e0:	20000004 	.word	0x20000004

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  _EXTI0_IRQHandler();
 8000a14:	f7ff fe14 	bl	8000640 <_EXTI0_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 fbef 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM4_IRQHandler+0x10>)
 8000a2a:	f001 f94b 	bl	8001cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000a0 	.word	0x200000a0

08000a38 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <ITM_SendChar+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <ITM_SendChar+0x48>)
 8000a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a4c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <ITM_SendChar+0x4c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <ITM_SendChar+0x4c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a5a:	bf00      	nop
 8000a5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000edfc 	.word	0xe000edfc
 8000a84:	e0000e00 	.word	0xe0000e00

08000a88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
	}

return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffab 	bl	8000a38 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
	}
	return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f002 ff76 	bl	8003a84 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200000e8 	.word	0x200000e8
 8000bcc:	20012e28 	.word	0x20012e28

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 ff35 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fd2b 	bl	8000680 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c38:	08004c50 	.word	0x08004c50
  ldr r2, =_sbss
 8000c3c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c40:	20012e28 	.word	0x20012e28

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8d8 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff fe38 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe0e 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200000ec 	.word	0x200000ec

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000ec 	.word	0x200000ec

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e16b      	b.n	8001184 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 815a 	bne.w	800117e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d017      	beq.n	8000f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80b4 	beq.w	800117e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b60      	ldr	r3, [pc, #384]	; (800119c <HAL_GPIO_Init+0x30c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a5f      	ldr	r2, [pc, #380]	; (800119c <HAL_GPIO_Init+0x30c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_GPIO_Init+0x30c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a5b      	ldr	r2, [pc, #364]	; (80011a0 <HAL_GPIO_Init+0x310>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x314>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d02b      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <HAL_GPIO_Init+0x318>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d025      	beq.n	80010b2 <HAL_GPIO_Init+0x222>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_GPIO_Init+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01f      	beq.n	80010ae <HAL_GPIO_Init+0x21e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x21a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_GPIO_Init+0x324>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x216>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <HAL_GPIO_Init+0x328>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x212>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_GPIO_Init+0x32c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x20e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4b      	ldr	r2, [pc, #300]	; (80011c0 <HAL_GPIO_Init+0x330>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x20a>
 8001096:	2307      	movs	r3, #7
 8001098:	e00e      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 800109a:	2308      	movs	r3, #8
 800109c:	e00c      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 800109e:	2306      	movs	r3, #6
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x228>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x310>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_Init+0x334>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_GPIO_Init+0x334>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_GPIO_Init+0x334>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f ae90 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40021c00 	.word	0x40021c00
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f806 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcda 	bl	8000cb4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcd6 	bl	8000cb4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcc6 	bl	8000cb4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcc2 	bl	8000cb4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc7b 	bl	8000cb4 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc77 	bl	8000cb4 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc5a 	bl	8000cb4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc56 	bl	8000cb4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc3a 	bl	8000cb4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc36 	bl	8000cb4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc23 	bl	8000cb4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc1f 	bl	8000cb4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbdf 	bl	8000cb4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fbdb 	bl	8000cb4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fba0 	bl	8000cb4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb9c 	bl	8000cb4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb8a 	bl	8000cb4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb86 	bl	8000cb4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb5a 	bl	8000cb4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fb56 	bl	8000cb4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb2f 	bl	8000cb4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb2b 	bl	8000cb4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb18 	bl	8000cb4 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb14 	bl	8000cb4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fa46 	bl	8000cb4 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff fa42 	bl	8000cb4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f806 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08004b90 	.word	0x08004b90
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b090      	sub	sp, #64	; 0x40
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80a1 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001938:	e09b      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193e:	e098      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	627a      	str	r2, [r7, #36]	; 0x24
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001968:	2100      	movs	r1, #0
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800196c:	fb03 f201 	mul.w	r2, r3, r1
 8001970:	2300      	movs	r3, #0
 8001972:	fb00 f303 	mul.w	r3, r0, r3
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800197a:	fba0 1202 	umull	r1, r2, r0, r2
 800197e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001980:	460a      	mov	r2, r1
 8001982:	62ba      	str	r2, [r7, #40]	; 0x28
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	4413      	add	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	2200      	movs	r2, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	61fa      	str	r2, [r7, #28]
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800199a:	f7fe fc69 	bl	8000270 <__aeabi_uldivmod>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4613      	mov	r3, r2
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a6:	e053      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	2200      	movs	r2, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ba:	f04f 0b00 	mov.w	fp, #0
 80019be:	4652      	mov	r2, sl
 80019c0:	465b      	mov	r3, fp
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ebb2 080a 	subs.w	r8, r2, sl
 80019da:	eb63 090b 	sbc.w	r9, r3, fp
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019f2:	ebb2 0408 	subs.w	r4, r2, r8
 80019f6:	eb63 0509 	sbc.w	r5, r3, r9
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	00eb      	lsls	r3, r5, #3
 8001a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a08:	00e2      	lsls	r2, r4, #3
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	eb14 030a 	adds.w	r3, r4, sl
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	eb45 030b 	adc.w	r3, r5, fp
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a26:	4629      	mov	r1, r5
 8001a28:	028b      	lsls	r3, r1, #10
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a30:	4621      	mov	r1, r4
 8001a32:	028a      	lsls	r2, r1, #10
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a44:	f7fe fc14 	bl	8000270 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3740      	adds	r7, #64	; 0x40
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	017d7840 	.word	0x017d7840

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08004ba0 	.word	0x08004ba0

08001acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_RCC_GetClockConfig+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 f9d8 	bl	8001f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04e      	b.n	8001c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d01d      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_TIM_Base_Start_IT+0xc8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d010      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	e007      	b.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40001800 	.word	0x40001800

08001cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8ee 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8e0 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8f1 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0204 	mvn.w	r2, #4
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8c4 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8b6 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8c7 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0208 	mvn.w	r2, #8
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f89a 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f88c 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f89d 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f870 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f862 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f873 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0201 	mvn.w	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fd12 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f902 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f838 	bl	8001f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0220 	mvn.w	r2, #32
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8cc 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a40      	ldr	r2, [pc, #256]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d00f      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <TIM_Base_SetConfig+0x118>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <TIM_Base_SetConfig+0x11c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <TIM_Base_SetConfig+0x120>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d027      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	; (800203c <TIM_Base_SetConfig+0x118>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d023      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <TIM_Base_SetConfig+0x11c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <TIM_Base_SetConfig+0x120>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d017      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <TIM_Base_SetConfig+0x128>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <TIM_Base_SetConfig+0x12c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00f      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <TIM_Base_SetConfig+0x130>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a25      	ldr	r2, [pc, #148]	; (8002058 <TIM_Base_SetConfig+0x134>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <TIM_Base_SetConfig+0x138>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	; (8002060 <TIM_Base_SetConfig+0x13c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0xf8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d103      	bne.n	8002024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800
 8002058:	40001800 	.word	0x40001800
 800205c:	40001c00 	.word	0x40001c00
 8002060:	40002000 	.word	0x40002000

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f103 0208 	add.w	r2, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0208 	add.w	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d103      	bne.n	800214e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e00c      	b.n	8002168 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3308      	adds	r3, #8
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e002      	b.n	800215c <vListInsert+0x2e>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d2f6      	bcs.n	8002156 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6892      	ldr	r2, [r2, #8]
 80021b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6852      	ldr	r2, [r2, #4]
 80021c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d103      	bne.n	80021d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af04      	add	r7, sp, #16
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4618      	mov	r0, r3
 800220a:	f001 fa6f 	bl	80036ec <pvPortMalloc>
 800220e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d013      	beq.n	800223e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002216:	2058      	movs	r0, #88	; 0x58
 8002218:	f001 fa68 	bl	80036ec <pvPortMalloc>
 800221c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002224:	2258      	movs	r2, #88	; 0x58
 8002226:	2100      	movs	r1, #0
 8002228:	69f8      	ldr	r0, [r7, #28]
 800222a:	f001 fc55 	bl	8003ad8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	e005      	b.n	8002242 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f001 fb12 	bl	8003860 <vPortFree>
 800223c:	e001      	b.n	8002242 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	2300      	movs	r3, #0
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f80e 	bl	8002280 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002264:	69f8      	ldr	r0, [r7, #28]
 8002266:	f000 f899 	bl	800239c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800226a:	2301      	movs	r3, #1
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e002      	b.n	8002276 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002276:	69bb      	ldr	r3, [r7, #24]
    }
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	461a      	mov	r2, r3
 8002298:	21a5      	movs	r1, #165	; 0xa5
 800229a:	f001 fc1d 	bl	8003ad8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a8:	3b01      	subs	r3, #1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f023 0307 	bic.w	r3, r3, #7
 80022b6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80022c2:	f04f 0305 	mov.w	r3, #5
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80022d4:	bf00      	nop
 80022d6:	e7fe      	b.n	80022d6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01e      	beq.n	800231c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e012      	b.n	800230a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	7819      	ldrb	r1, [r3, #0]
 80022ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	3334      	adds	r3, #52	; 0x34
 80022f4:	460a      	mov	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3301      	adds	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d9e9      	bls.n	80022e4 <prvInitialiseNewTask+0x64>
 8002310:	e000      	b.n	8002314 <prvInitialiseNewTask+0x94>
            {
                break;
 8002312:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2b04      	cmp	r3, #4
 8002320:	d90a      	bls.n	8002338 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002322:	f04f 0305 	mov.w	r3, #5
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	613b      	str	r3, [r7, #16]
    }
 8002334:	bf00      	nop
 8002336:	e7fe      	b.n	8002336 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	2b04      	cmp	r3, #4
 800233c:	d901      	bls.n	8002342 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800233e:	2304      	movs	r3, #4
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800234c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	3304      	adds	r3, #4
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff feba 	bl	80020cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	3318      	adds	r3, #24
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff feb5 	bl	80020cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002366:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	f1c3 0205 	rsb	r2, r3, #5
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f000 ff63 	bl	8003248 <pxPortInitialiseStack>
 8002382:	4602      	mov	r2, r0
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002392:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023a4:	f001 f880 	bl	80034a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <prvAddNewTaskToReadyList+0x110>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <prvAddNewTaskToReadyList+0x110>)
 80023b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ba:	4a3d      	ldr	r2, [pc, #244]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023c0:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <prvAddNewTaskToReadyList+0x110>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d110      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023c8:	f000 fe24 	bl	8003014 <prvInitialiseTaskLists>
 80023cc:	e00d      	b.n	80023ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <prvAddNewTaskToReadyList+0x118>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d802      	bhi.n	80023ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023e4:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <prvAddNewTaskToReadyList+0x11c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <prvAddNewTaskToReadyList+0x11c>)
 80023f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <prvAddNewTaskToReadyList+0x11c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <prvAddNewTaskToReadyList+0x120>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <prvAddNewTaskToReadyList+0x120>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	492b      	ldr	r1, [pc, #172]	; (80024c0 <prvAddNewTaskToReadyList+0x124>)
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	3204      	adds	r2, #4
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <prvAddNewTaskToReadyList+0x124>)
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <prvAddNewTaskToReadyList+0x124>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <prvAddNewTaskToReadyList+0x124>)
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4403      	add	r3, r0
 8002478:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800247a:	f001 f845 	bl	8003508 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <prvAddNewTaskToReadyList+0x118>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <prvAddNewTaskToReadyList+0x114>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <prvAddNewTaskToReadyList+0x128>)
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200001c8 	.word	0x200001c8
 80024b0:	200000f0 	.word	0x200000f0
 80024b4:	200001d4 	.word	0x200001d4
 80024b8:	200001e4 	.word	0x200001e4
 80024bc:	200001d0 	.word	0x200001d0
 80024c0:	200000f4 	.word	0x200000f4
 80024c4:	e000ed04 	.word	0xe000ed04

080024c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80024d0:	f000 ffea 	bl	80034a8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <vTaskDelete+0x18>
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <vTaskDelete+0x100>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e000      	b.n	80024e2 <vTaskDelete+0x1a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe59 	bl	80021a0 <uxListRemove>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d115      	bne.n	8002520 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f8:	4934      	ldr	r1, [pc, #208]	; (80025cc <vTaskDelete+0x104>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <vTaskDelete+0x58>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43da      	mvns	r2, r3
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <vTaskDelete+0x108>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4013      	ands	r3, r2
 800251c:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <vTaskDelete+0x108>)
 800251e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3318      	adds	r3, #24
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fe37 	bl	80021a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <vTaskDelete+0x10c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <vTaskDelete+0x10c>)
 800253a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <vTaskDelete+0x100>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	d10b      	bne.n	800255e <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3304      	adds	r3, #4
 800254a:	4619      	mov	r1, r3
 800254c:	4822      	ldr	r0, [pc, #136]	; (80025d8 <vTaskDelete+0x110>)
 800254e:	f7ff fdca 	bl	80020e6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <vTaskDelete+0x114>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <vTaskDelete+0x114>)
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e006      	b.n	800256c <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <vTaskDelete+0x118>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3b01      	subs	r3, #1
 8002564:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <vTaskDelete+0x118>)
 8002566:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002568:	f000 fdd2 	bl	8003110 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800256c:	f000 ffcc 	bl	8003508 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <vTaskDelete+0x100>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	429a      	cmp	r2, r3
 8002578:	d002      	beq.n	8002580 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fdb8 	bl	80030f0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <vTaskDelete+0x11c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <vTaskDelete+0x100>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d116      	bne.n	80025c0 <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <vTaskDelete+0x120>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <vTaskDelete+0xe8>
        __asm volatile
 800259a:	f04f 0305 	mov.w	r3, #5
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	60bb      	str	r3, [r7, #8]
    }
 80025ac:	bf00      	nop
 80025ae:	e7fe      	b.n	80025ae <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <vTaskDelete+0x124>)
 80025b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200000f0 	.word	0x200000f0
 80025cc:	200000f4 	.word	0x200000f4
 80025d0:	200001d0 	.word	0x200001d0
 80025d4:	200001e4 	.word	0x200001e4
 80025d8:	2000019c 	.word	0x2000019c
 80025dc:	200001b0 	.word	0x200001b0
 80025e0:	200001c8 	.word	0x200001c8
 80025e4:	200001d4 	.word	0x200001d4
 80025e8:	200001f0 	.word	0x200001f0
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xTaskDelayUntil+0x2a>
        __asm volatile
 8002604:	f04f 0305 	mov.w	r3, #5
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	617b      	str	r3, [r7, #20]
    }
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xTaskDelayUntil+0x46>
        __asm volatile
 8002620:	f04f 0305 	mov.w	r3, #5
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	613b      	str	r3, [r7, #16]
    }
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <xTaskDelayUntil+0xf0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <xTaskDelayUntil+0x64>
        __asm volatile
 800263e:	f04f 0305 	mov.w	r3, #5
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	60fb      	str	r3, [r7, #12]
    }
 8002650:	bf00      	nop
 8002652:	e7fe      	b.n	8002652 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002654:	f000 fa3a 	bl	8002acc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <xTaskDelayUntil+0xf4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	429a      	cmp	r2, r3
 8002670:	d20b      	bcs.n	800268a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	d211      	bcs.n	80026a0 <xTaskDelayUntil+0xb0>
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d90d      	bls.n	80026a0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002684:	2301      	movs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
 8002688:	e00a      	b.n	80026a0 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	d303      	bcc.n	800269c <xTaskDelayUntil+0xac>
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d901      	bls.n	80026a0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fd47 	bl	8003148 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80026ba:	f000 fa15 	bl	8002ae8 <xTaskResumeAll>
 80026be:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <xTaskDelayUntil+0xf8>)
 80026c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026d8:	4618      	mov	r0, r3
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200001f0 	.word	0x200001f0
 80026e4:	200001cc 	.word	0x200001cc
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d017      	beq.n	800272e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <vTaskDelay+0x60>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <vTaskDelay+0x30>
        __asm volatile
 8002706:	f04f 0305 	mov.w	r3, #5
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	60bb      	str	r3, [r7, #8]
    }
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800271c:	f000 f9d6 	bl	8002acc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002720:	2100      	movs	r1, #0
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fd10 	bl	8003148 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002728:	f000 f9de 	bl	8002ae8 <xTaskResumeAll>
 800272c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <vTaskDelay+0x64>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200001f0 	.word	0x200001f0
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800275c:	f000 fea4 	bl	80034a8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <vTaskSuspend+0x18>
 8002766:	4b43      	ldr	r3, [pc, #268]	; (8002874 <vTaskSuspend+0x120>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e000      	b.n	800276e <vTaskSuspend+0x1a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	3304      	adds	r3, #4
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fd13 	bl	80021a0 <uxListRemove>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d115      	bne.n	80027ac <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	493c      	ldr	r1, [pc, #240]	; (8002878 <vTaskSuspend+0x124>)
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <vTaskSuspend+0x58>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2201      	movs	r2, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43da      	mvns	r2, r3
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <vTaskSuspend+0x128>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4013      	ands	r3, r2
 80027a8:	4a34      	ldr	r2, [pc, #208]	; (800287c <vTaskSuspend+0x128>)
 80027aa:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3318      	adds	r3, #24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fcf1 	bl	80021a0 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	3304      	adds	r3, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	482e      	ldr	r0, [pc, #184]	; (8002880 <vTaskSuspend+0x12c>)
 80027c6:	f7ff fc8e 	bl	80020e6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e010      	b.n	80027f2 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	4413      	add	r3, r2
 80027d6:	3354      	adds	r3, #84	; 0x54
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	4413      	add	r3, r2
 80027e6:	3354      	adds	r3, #84	; 0x54
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	ddeb      	ble.n	80027d0 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80027f8:	f000 fe86 	bl	8003508 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <vTaskSuspend+0x130>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002804:	f000 fe50 	bl	80034a8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002808:	f000 fc82 	bl	8003110 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800280c:	f000 fe7c 	bl	8003508 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <vTaskSuspend+0x120>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	429a      	cmp	r2, r3
 8002818:	d127      	bne.n	800286a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <vTaskSuspend+0x130>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <vTaskSuspend+0x134>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <vTaskSuspend+0xec>
        __asm volatile
 800282a:	f04f 0305 	mov.w	r3, #5
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	60fb      	str	r3, [r7, #12]
    }
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <vTaskSuspend+0x138>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002850:	e00b      	b.n	800286a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <vTaskSuspend+0x12c>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <vTaskSuspend+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d103      	bne.n	8002866 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <vTaskSuspend+0x120>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    }
 8002864:	e001      	b.n	800286a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8002866:	f000 fb61 	bl	8002f2c <vTaskSwitchContext>
    }
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200000f0 	.word	0x200000f0
 8002878:	200000f4 	.word	0x200000f4
 800287c:	200001d0 	.word	0x200001d0
 8002880:	200001b4 	.word	0x200001b4
 8002884:	200001d4 	.word	0x200001d4
 8002888:	200001f0 	.word	0x200001f0
 800288c:	e000ed04 	.word	0xe000ed04
 8002890:	200001c8 	.word	0x200001c8

08002894 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80028aa:	f04f 0305 	mov.w	r3, #5
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	60fb      	str	r3, [r7, #12]
    }
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <prvTaskIsTaskSuspended+0x5c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10a      	bne.n	80028e0 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <prvTaskIsTaskSuspended+0x60>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d005      	beq.n	80028e0 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80028e0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80028e2:	4618      	mov	r0, r3
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200001b4 	.word	0x200001b4
 80028f4:	20000188 	.word	0x20000188

080028f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <xTaskResumeFromISR+0x2c>
        __asm volatile
 800290e:	f04f 0305 	mov.w	r3, #5
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	617b      	str	r3, [r7, #20]
    }
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002924:	f000 fea2 	bl	800366c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002928:	f3ef 8211 	mrs	r2, BASEPRI
 800292c:	f04f 0305 	mov.w	r3, #5
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	613a      	str	r2, [r7, #16]
 800293e:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002940:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002942:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002944:	6a38      	ldr	r0, [r7, #32]
 8002946:	f7ff ffa5 	bl	8002894 <prvTaskIsTaskSuspended>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05a      	beq.n	8002a06 <xTaskResumeFromISR+0x10e>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <xTaskResumeFromISR+0x124>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d150      	bne.n	80029fa <xTaskResumeFromISR+0x102>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <xTaskResumeFromISR+0x128>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	429a      	cmp	r2, r3
 8002964:	d304      	bcc.n	8002970 <xTaskResumeFromISR+0x78>
                    {
                        xYieldRequired = pdTRUE;
 8002966:	2301      	movs	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <xTaskResumeFromISR+0x12c>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	3304      	adds	r3, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fc13 	bl	80021a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	2201      	movs	r2, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <xTaskResumeFromISR+0x130>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <xTaskResumeFromISR+0x130>)
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	4926      	ldr	r1, [pc, #152]	; (8002a2c <xTaskResumeFromISR+0x134>)
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	3204      	adds	r2, #4
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	1d1a      	adds	r2, r3, #4
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <xTaskResumeFromISR+0x134>)
 80029d0:	441a      	add	r2, r3
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <xTaskResumeFromISR+0x134>)
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	4810      	ldr	r0, [pc, #64]	; (8002a2c <xTaskResumeFromISR+0x134>)
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4403      	add	r3, r0
 80029f6:	6019      	str	r1, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <xTaskResumeFromISR+0x10e>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	3318      	adds	r3, #24
 80029fe:	4619      	mov	r1, r3
 8002a00:	480b      	ldr	r0, [pc, #44]	; (8002a30 <xTaskResumeFromISR+0x138>)
 8002a02:	f7ff fb70 	bl	80020e6 <vListInsertEnd>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a10:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a14:	4618      	mov	r0, r3
 8002a16:	3728      	adds	r7, #40	; 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200001f0 	.word	0x200001f0
 8002a20:	200000f0 	.word	0x200000f0
 8002a24:	200001dc 	.word	0x200001dc
 8002a28:	200001d0 	.word	0x200001d0
 8002a2c:	200000f4 	.word	0x200000f4
 8002a30:	20000188 	.word	0x20000188

08002a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <vTaskStartScheduler+0x7c>)
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2300      	movs	r3, #0
 8002a44:	2282      	movs	r2, #130	; 0x82
 8002a46:	491b      	ldr	r1, [pc, #108]	; (8002ab4 <vTaskStartScheduler+0x80>)
 8002a48:	481b      	ldr	r0, [pc, #108]	; (8002ab8 <vTaskStartScheduler+0x84>)
 8002a4a:	f7ff fbd3 	bl	80021f4 <xTaskCreate>
 8002a4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d116      	bne.n	8002a84 <vTaskStartScheduler+0x50>
        __asm volatile
 8002a56:	f04f 0305 	mov.w	r3, #5
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	60bb      	str	r3, [r7, #8]
    }
 8002a68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <vTaskStartScheduler+0x88>)
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <vTaskStartScheduler+0x8c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <vTaskStartScheduler+0x90>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a7e:	f000 fc71 	bl	8003364 <xPortStartScheduler>
 8002a82:	e00e      	b.n	8002aa2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d10a      	bne.n	8002aa2 <vTaskStartScheduler+0x6e>
        __asm volatile
 8002a8c:	f04f 0305 	mov.w	r3, #5
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	607b      	str	r3, [r7, #4]
    }
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <vTaskStartScheduler+0x94>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200001ec 	.word	0x200001ec
 8002ab4:	08004b88 	.word	0x08004b88
 8002ab8:	08002fe5 	.word	0x08002fe5
 8002abc:	200001e8 	.word	0x200001e8
 8002ac0:	200001d4 	.word	0x200001d4
 8002ac4:	200001cc 	.word	0x200001cc
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <vTaskSuspendAll+0x18>)
 8002ad8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	200001f0 	.word	0x200001f0

08002ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002af6:	4b71      	ldr	r3, [pc, #452]	; (8002cbc <xTaskResumeAll+0x1d4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <xTaskResumeAll+0x2c>
        __asm volatile
 8002afe:	f04f 0305 	mov.w	r3, #5
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
    }
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b14:	f000 fcc8 	bl	80034a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <xTaskResumeAll+0x1d4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4a67      	ldr	r2, [pc, #412]	; (8002cbc <xTaskResumeAll+0x1d4>)
 8002b20:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b22:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <xTaskResumeAll+0x1d4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 80c0 	bne.w	8002cac <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b2c:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <xTaskResumeAll+0x1d8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80bb 	beq.w	8002cac <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b36:	e08a      	b.n	8002c4e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b38:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <xTaskResumeAll+0x1dc>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	6a12      	ldr	r2, [r2, #32]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	69d2      	ldr	r2, [r2, #28]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3318      	adds	r3, #24
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d103      	bne.n	8002b6e <xTaskResumeAll+0x86>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2200      	movs	r2, #0
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	68d2      	ldr	r2, [r2, #12]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d103      	bne.n	8002bac <xTaskResumeAll+0xc4>
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <xTaskResumeAll+0x1e0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	4a3f      	ldr	r2, [pc, #252]	; (8002cc8 <xTaskResumeAll+0x1e0>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd2:	493e      	ldr	r1, [pc, #248]	; (8002ccc <xTaskResumeAll+0x1e4>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3304      	adds	r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	3204      	adds	r2, #4
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <xTaskResumeAll+0x1e4>)
 8002c12:	441a      	add	r2, r3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	492b      	ldr	r1, [pc, #172]	; (8002ccc <xTaskResumeAll+0x1e4>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	4827      	ldr	r0, [pc, #156]	; (8002ccc <xTaskResumeAll+0x1e4>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4403      	add	r3, r0
 8002c38:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <xTaskResumeAll+0x1e8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <xTaskResumeAll+0x1dc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f af70 	bne.w	8002b38 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c5e:	f000 fa57 	bl	8003110 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <xTaskResumeAll+0x1f0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c6e:	f000 f847 	bl	8002d00 <xTaskIncrementTick>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f1      	bne.n	8002c6e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <xTaskResumeAll+0x1f0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <xTaskResumeAll+0x1ec>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <xTaskResumeAll+0x1f4>)
 8002c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cac:	f000 fc2c 	bl	8003508 <vPortExitCritical>

    return xAlreadyYielded;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200001f0 	.word	0x200001f0
 8002cc0:	200001c8 	.word	0x200001c8
 8002cc4:	20000188 	.word	0x20000188
 8002cc8:	200001d0 	.word	0x200001d0
 8002ccc:	200000f4 	.word	0x200000f4
 8002cd0:	200000f0 	.word	0x200000f0
 8002cd4:	200001dc 	.word	0x200001dc
 8002cd8:	200001d8 	.word	0x200001d8
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <xTaskGetTickCount+0x1c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	200001cc 	.word	0x200001cc

08002d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <xTaskIncrementTick+0x200>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80ec 	bne.w	8002eec <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d14:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <xTaskIncrementTick+0x204>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d1c:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <xTaskIncrementTick+0x204>)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d120      	bne.n	8002d6a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d32:	f04f 0305 	mov.w	r3, #5
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xTaskIncrementTick+0x46>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <xTaskIncrementTick+0x20c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4a6d      	ldr	r2, [pc, #436]	; (8002f0c <xTaskIncrementTick+0x20c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a6b      	ldr	r2, [pc, #428]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	f000 f9d3 	bl	8003110 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	; (8002f14 <xTaskIncrementTick+0x214>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a3a      	ldr	r2, [r7, #32]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f0c0 80a6 	bcc.w	8002ec2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d76:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d80:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <xTaskIncrementTick+0x214>)
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295
 8002d86:	601a      	str	r2, [r3, #0]
                    break;
 8002d88:	e09b      	b.n	8002ec2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d203      	bcs.n	8002daa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002da2:	4a5c      	ldr	r2, [pc, #368]	; (8002f14 <xTaskIncrementTick+0x214>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002da8:	e08b      	b.n	8002ec2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	68d2      	ldr	r2, [r2, #12]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	6892      	ldr	r2, [r2, #8]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d103      	bne.n	8002dd8 <xTaskIncrementTick+0xd8>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01e      	beq.n	8002e2e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	6a12      	ldr	r2, [r2, #32]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	69d2      	ldr	r2, [r2, #28]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3318      	adds	r3, #24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d103      	bne.n	8002e1e <xTaskIncrementTick+0x11e>
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	2201      	movs	r2, #1
 8002e34:	409a      	lsls	r2, r3
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <xTaskIncrementTick+0x218>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <xTaskIncrementTick+0x218>)
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4935      	ldr	r1, [pc, #212]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	3204      	adds	r2, #4
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1d1a      	adds	r2, r3, #4
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002e84:	441a      	add	r2, r3
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	615a      	str	r2, [r3, #20]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8e:	4923      	ldr	r1, [pc, #140]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c59      	adds	r1, r3, #1
 8002e9e:	481f      	ldr	r0, [pc, #124]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4403      	add	r3, r0
 8002eaa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <xTaskIncrementTick+0x220>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	f67f af5d 	bls.w	8002d76 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec0:	e759      	b.n	8002d76 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <xTaskIncrementTick+0x220>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4914      	ldr	r1, [pc, #80]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d901      	bls.n	8002ede <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	e004      	b.n	8002ef6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <xTaskIncrementTick+0x228>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <xTaskIncrementTick+0x228>)
 8002ef4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200001f0 	.word	0x200001f0
 8002f04:	200001cc 	.word	0x200001cc
 8002f08:	20000180 	.word	0x20000180
 8002f0c:	20000184 	.word	0x20000184
 8002f10:	200001e0 	.word	0x200001e0
 8002f14:	200001e8 	.word	0x200001e8
 8002f18:	200001d0 	.word	0x200001d0
 8002f1c:	200000f4 	.word	0x200000f4
 8002f20:	200000f0 	.word	0x200000f0
 8002f24:	200001dc 	.word	0x200001dc
 8002f28:	200001d8 	.word	0x200001d8

08002f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <vTaskSwitchContext+0xa4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <vTaskSwitchContext+0xa8>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f40:	e03f      	b.n	8002fc2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002f42:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <vTaskSwitchContext+0xa8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <vTaskSwitchContext+0xac>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	f1c3 031f 	rsb	r3, r3, #31
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	491f      	ldr	r1, [pc, #124]	; (8002fdc <vTaskSwitchContext+0xb0>)
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f72:	f04f 0305 	mov.w	r3, #5
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	607b      	str	r3, [r7, #4]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <vTaskSwitchContext+0x5a>
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <vTaskSwitchContext+0xb0>)
 8002f94:	4413      	add	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d104      	bne.n	8002fb8 <vTaskSwitchContext+0x8c>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <vTaskSwitchContext+0xb4>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200001f0 	.word	0x200001f0
 8002fd4:	200001dc 	.word	0x200001dc
 8002fd8:	200001d0 	.word	0x200001d0
 8002fdc:	200000f4 	.word	0x200000f4
 8002fe0:	200000f0 	.word	0x200000f0

08002fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fec:	f000 f852 	bl	8003094 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <prvIdleTask+0x28>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d9f9      	bls.n	8002fec <prvIdleTask+0x8>
            {
                taskYIELD();
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <prvIdleTask+0x2c>)
 8002ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003008:	e7f0      	b.n	8002fec <prvIdleTask+0x8>
 800300a:	bf00      	nop
 800300c:	200000f4 	.word	0x200000f4
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e00c      	b.n	800303a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <prvInitialiseTaskLists+0x60>)
 800302c:	4413      	add	r3, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f82c 	bl	800208c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3301      	adds	r3, #1
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d9ef      	bls.n	8003020 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <prvInitialiseTaskLists+0x64>)
 8003042:	f7ff f823 	bl	800208c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003046:	480d      	ldr	r0, [pc, #52]	; (800307c <prvInitialiseTaskLists+0x68>)
 8003048:	f7ff f820 	bl	800208c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <prvInitialiseTaskLists+0x6c>)
 800304e:	f7ff f81d 	bl	800208c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <prvInitialiseTaskLists+0x70>)
 8003054:	f7ff f81a 	bl	800208c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <prvInitialiseTaskLists+0x74>)
 800305a:	f7ff f817 	bl	800208c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <prvInitialiseTaskLists+0x78>)
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <prvInitialiseTaskLists+0x64>)
 8003062:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <prvInitialiseTaskLists+0x7c>)
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <prvInitialiseTaskLists+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200000f4 	.word	0x200000f4
 8003078:	20000158 	.word	0x20000158
 800307c:	2000016c 	.word	0x2000016c
 8003080:	20000188 	.word	0x20000188
 8003084:	2000019c 	.word	0x2000019c
 8003088:	200001b4 	.word	0x200001b4
 800308c:	20000180 	.word	0x20000180
 8003090:	20000184 	.word	0x20000184

08003094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800309a:	e019      	b.n	80030d0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800309c:	f000 fa04 	bl	80034a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <prvCheckTasksWaitingTermination+0x50>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f877 	bl	80021a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <prvCheckTasksWaitingTermination+0x54>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <prvCheckTasksWaitingTermination+0x54>)
 80030ba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030c4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80030c6:	f000 fa1f 	bl	8003508 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f810 	bl	80030f0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <prvCheckTasksWaitingTermination+0x58>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e1      	bne.n	800309c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2000019c 	.word	0x2000019c
 80030e8:	200001c8 	.word	0x200001c8
 80030ec:	200001b0 	.word	0x200001b0

080030f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fbaf 	bl	8003860 <vPortFree>
            vPortFree( pxTCB );
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fbac 	bl	8003860 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <prvResetNextTaskUnblockTime+0x30>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <prvResetNextTaskUnblockTime+0x34>)
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003126:	e005      	b.n	8003134 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <prvResetNextTaskUnblockTime+0x30>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <prvResetNextTaskUnblockTime+0x34>)
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000180 	.word	0x20000180
 8003144:	200001e8 	.word	0x200001e8

08003148 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f81e 	bl	80021a0 <uxListRemove>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <prvAddCurrentTaskToDelayedList+0xec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4013      	ands	r3, r2
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <prvAddCurrentTaskToDelayedList+0xec>)
 8003180:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d124      	bne.n	80031d4 <prvAddCurrentTaskToDelayedList+0x8c>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d021      	beq.n	80031d4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	3204      	adds	r2, #4
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1d1a      	adds	r2, r3, #4
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031c4:	615a      	str	r2, [r3, #20]
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	4a1a      	ldr	r2, [pc, #104]	; (8003238 <prvAddCurrentTaskToDelayedList+0xf0>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80031d2:	e026      	b.n	8003222 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d209      	bcs.n	8003200 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <prvAddCurrentTaskToDelayedList+0xf4>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7fe ff98 	bl	800212e <vListInsert>
}
 80031fe:	e010      	b.n	8003222 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7fe ff8e 	bl	800212e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d202      	bcs.n	8003222 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800321c:	4a09      	ldr	r2, [pc, #36]	; (8003244 <prvAddCurrentTaskToDelayedList+0xfc>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200001cc 	.word	0x200001cc
 8003230:	200000f0 	.word	0x200000f0
 8003234:	200001d0 	.word	0x200001d0
 8003238:	200001b4 	.word	0x200001b4
 800323c:	20000184 	.word	0x20000184
 8003240:	20000180 	.word	0x20000180
 8003244:	200001e8 	.word	0x200001e8

08003248 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3b04      	subs	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003260:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b04      	subs	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b04      	subs	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <pxPortInitialiseStack+0x64>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3b14      	subs	r3, #20
 8003282:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3b04      	subs	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f06f 0202 	mvn.w	r2, #2
 8003296:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3b20      	subs	r3, #32
 800329c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	080032b1 	.word	0x080032b1

080032b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <prvTaskExitError+0x54>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d00a      	beq.n	80032da <prvTaskExitError+0x2a>
        __asm volatile
 80032c4:	f04f 0305 	mov.w	r3, #5
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	60fb      	str	r3, [r7, #12]
    }
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <prvTaskExitError+0x28>
        __asm volatile
 80032da:	f04f 0305 	mov.w	r3, #5
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60bb      	str	r3, [r7, #8]
    }
 80032ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80032ee:	bf00      	nop
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0fc      	beq.n	80032f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	20000010 	.word	0x20000010
	...

08003310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <pxCurrentTCBConst2>)
 8003312:	6819      	ldr	r1, [r3, #0]
 8003314:	6808      	ldr	r0, [r1, #0]
 8003316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	f380 8809 	msr	PSP, r0
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8811 	msr	BASEPRI, r0
 800332a:	4770      	bx	lr
 800332c:	f3af 8000 	nop.w

08003330 <pxCurrentTCBConst2>:
 8003330:	200000f0 	.word	0x200000f0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop

08003338 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003338:	4808      	ldr	r0, [pc, #32]	; (800335c <prvPortStartFirstTask+0x24>)
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	6800      	ldr	r0, [r0, #0]
 800333e:	f380 8808 	msr	MSP, r0
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f380 8814 	msr	CONTROL, r0
 800334a:	b662      	cpsie	i
 800334c:	b661      	cpsie	f
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	df00      	svc	0
 8003358:	bf00      	nop
 800335a:	0000      	.short	0x0000
 800335c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop

08003364 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800336a:	4b46      	ldr	r3, [pc, #280]	; (8003484 <xPortStartScheduler+0x120>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a46      	ldr	r2, [pc, #280]	; (8003488 <xPortStartScheduler+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10a      	bne.n	800338a <xPortStartScheduler+0x26>
        __asm volatile
 8003374:	f04f 0305 	mov.w	r3, #5
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	613b      	str	r3, [r7, #16]
    }
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800338a:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <xPortStartScheduler+0x120>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3f      	ldr	r2, [pc, #252]	; (800348c <xPortStartScheduler+0x128>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10a      	bne.n	80033aa <xPortStartScheduler+0x46>
        __asm volatile
 8003394:	f04f 0305 	mov.w	r3, #5
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60fb      	str	r3, [r7, #12]
    }
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <xPortStartScheduler+0x12c>)
 80033ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0305 	and.w	r3, r3, #5
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <xPortStartScheduler+0x130>)
 80033d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <xPortStartScheduler+0x134>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033d8:	e009      	b.n	80033ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <xPortStartScheduler+0x134>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <xPortStartScheduler+0x134>)
 80033e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d0ef      	beq.n	80033da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <xPortStartScheduler+0x134>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00a      	beq.n	800341c <xPortStartScheduler+0xb8>
        __asm volatile
 8003406:	f04f 0305 	mov.w	r3, #5
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60bb      	str	r3, [r7, #8]
    }
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <xPortStartScheduler+0x134>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <xPortStartScheduler+0x134>)
 8003424:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <xPortStartScheduler+0x134>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <xPortStartScheduler+0x134>)
 8003430:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <xPortStartScheduler+0x138>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <xPortStartScheduler+0x138>)
 8003440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003444:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <xPortStartScheduler+0x138>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <xPortStartScheduler+0x138>)
 800344c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003450:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003452:	f000 f8db 	bl	800360c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <xPortStartScheduler+0x13c>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800345c:	f000 f8fa 	bl	8003654 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <xPortStartScheduler+0x140>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <xPortStartScheduler+0x140>)
 8003466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800346a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800346c:	f7ff ff64 	bl	8003338 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003470:	f7ff fd5c 	bl	8002f2c <vTaskSwitchContext>
    prvTaskExitError();
 8003474:	f7ff ff1c 	bl	80032b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00
 8003488:	410fc271 	.word	0x410fc271
 800348c:	410fc270 	.word	0x410fc270
 8003490:	e000e400 	.word	0xe000e400
 8003494:	200001f4 	.word	0x200001f4
 8003498:	200001f8 	.word	0x200001f8
 800349c:	e000ed20 	.word	0xe000ed20
 80034a0:	20000010 	.word	0x20000010
 80034a4:	e000ef34 	.word	0xe000ef34

080034a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
        __asm volatile
 80034ae:	f04f 0305 	mov.w	r3, #5
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	607b      	str	r3, [r7, #4]
    }
 80034c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <vPortEnterCritical+0x58>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <vPortEnterCritical+0x58>)
 80034ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <vPortEnterCritical+0x58>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10f      	bne.n	80034f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <vPortEnterCritical+0x5c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80034de:	f04f 0305 	mov.w	r3, #5
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	603b      	str	r3, [r7, #0]
    }
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <vPortEnterCritical+0x4a>
    }
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	20000010 	.word	0x20000010
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <vPortExitCritical+0x50>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <vPortExitCritical+0x24>
        __asm volatile
 8003516:	f04f 0305 	mov.w	r3, #5
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	607b      	str	r3, [r7, #4]
    }
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <vPortExitCritical+0x50>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3b01      	subs	r3, #1
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <vPortExitCritical+0x50>)
 8003534:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <vPortExitCritical+0x50>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d105      	bne.n	800354a <vPortExitCritical+0x42>
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f383 8811 	msr	BASEPRI, r3
    }
 8003548:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000010 	.word	0x20000010
 800355c:	00000000 	.word	0x00000000

08003560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003560:	f3ef 8009 	mrs	r0, PSP
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <pxCurrentTCBConst>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	f01e 0f10 	tst.w	lr, #16
 8003570:	bf08      	it	eq
 8003572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357a:	6010      	str	r0, [r2, #0]
 800357c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003580:	f04f 0005 	mov.w	r0, #5
 8003584:	f380 8811 	msr	BASEPRI, r0
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f7ff fccc 	bl	8002f2c <vTaskSwitchContext>
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f380 8811 	msr	BASEPRI, r0
 800359c:	bc09      	pop	{r0, r3}
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	6808      	ldr	r0, [r1, #0]
 80035a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a6:	f01e 0f10 	tst.w	lr, #16
 80035aa:	bf08      	it	eq
 80035ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035b0:	f380 8809 	msr	PSP, r0
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	f3af 8000 	nop.w

080035c0 <pxCurrentTCBConst>:
 80035c0:	200000f0 	.word	0x200000f0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop

080035c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
        __asm volatile
 80035ce:	f04f 0305 	mov.w	r3, #5
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	607b      	str	r3, [r7, #4]
    }
 80035e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035e2:	f7ff fb8d 	bl	8002d00 <xTaskIncrementTick>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <SysTick_Handler+0x40>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f383 8811 	msr	BASEPRI, r3
    }
 80035fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <vPortSetupTimerInterrupt+0x34>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <vPortSetupTimerInterrupt+0x38>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <vPortSetupTimerInterrupt+0x3c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <vPortSetupTimerInterrupt+0x40>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <vPortSetupTimerInterrupt+0x44>)
 800362a:	3b01      	subs	r3, #1
 800362c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <vPortSetupTimerInterrupt+0x34>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e010 	.word	0xe000e010
 8003644:	e000e018 	.word	0xe000e018
 8003648:	20000000 	.word	0x20000000
 800364c:	10624dd3 	.word	0x10624dd3
 8003650:	e000e014 	.word	0xe000e014

08003654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003664 <vPortEnableVFP+0x10>
 8003658:	6801      	ldr	r1, [r0, #0]
 800365a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800365e:	6001      	str	r1, [r0, #0]
 8003660:	4770      	bx	lr
 8003662:	0000      	.short	0x0000
 8003664:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop

0800366c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003672:	f3ef 8305 	mrs	r3, IPSR
 8003676:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d914      	bls.n	80036a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <vPortValidateInterruptPriority+0x70>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <vPortValidateInterruptPriority+0x74>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	7afa      	ldrb	r2, [r7, #11]
 800368e:	429a      	cmp	r2, r3
 8003690:	d20a      	bcs.n	80036a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003692:	f04f 0305 	mov.w	r3, #5
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	607b      	str	r3, [r7, #4]
    }
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <vPortValidateInterruptPriority+0x78>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <vPortValidateInterruptPriority+0x7c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d90a      	bls.n	80036ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80036b8:	f04f 0305 	mov.w	r3, #5
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	603b      	str	r3, [r7, #0]
    }
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <vPortValidateInterruptPriority+0x60>
    }
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e3f0 	.word	0xe000e3f0
 80036e0:	200001f4 	.word	0x200001f4
 80036e4:	e000ed0c 	.word	0xe000ed0c
 80036e8:	200001f8 	.word	0x200001f8

080036ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80036f8:	f7ff f9e8 	bl	8002acc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <pvPortMalloc+0x160>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003704:	f000 f908 	bl	8003918 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800370e:	2208      	movs	r2, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	3308      	adds	r3, #8
 800371a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	43db      	mvns	r3, r3
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d804      	bhi.n	8003730 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	e001      	b.n	8003734 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	db70      	blt.n	800381c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d06d      	beq.n	800381c <pvPortMalloc+0x130>
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <pvPortMalloc+0x164>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d868      	bhi.n	800381c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800374a:	4b42      	ldr	r3, [pc, #264]	; (8003854 <pvPortMalloc+0x168>)
 800374c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <pvPortMalloc+0x168>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003754:	e004      	b.n	8003760 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d903      	bls.n	8003772 <pvPortMalloc+0x86>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f1      	bne.n	8003756 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003772:	4b36      	ldr	r3, [pc, #216]	; (800384c <pvPortMalloc+0x160>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	429a      	cmp	r2, r3
 800377a:	d04f      	beq.n	800381c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	4413      	add	r3, r2
 8003784:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	2308      	movs	r3, #8
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	429a      	cmp	r2, r3
 800379c:	d91f      	bls.n	80037de <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <pvPortMalloc+0xda>
        __asm volatile
 80037b0:	f04f 0305 	mov.w	r3, #5
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	613b      	str	r3, [r7, #16]
    }
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad2      	subs	r2, r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f000 f8f9 	bl	80039d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <pvPortMalloc+0x164>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	4a19      	ldr	r2, [pc, #100]	; (8003850 <pvPortMalloc+0x164>)
 80037ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <pvPortMalloc+0x164>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <pvPortMalloc+0x16c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d203      	bcs.n	8003800 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <pvPortMalloc+0x164>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <pvPortMalloc+0x16c>)
 80037fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <pvPortMalloc+0x170>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a10      	ldr	r2, [pc, #64]	; (800385c <pvPortMalloc+0x170>)
 800381a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800381c:	f7ff f964 	bl	8002ae8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <pvPortMalloc+0x154>
        __asm volatile
 800382a:	f04f 0305 	mov.w	r3, #5
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60fb      	str	r3, [r7, #12]
    }
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <pvPortMalloc+0x152>
    return pvReturn;
 8003840:	69fb      	ldr	r3, [r7, #28]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20012e04 	.word	0x20012e04
 8003850:	20012e08 	.word	0x20012e08
 8003854:	20012dfc 	.word	0x20012dfc
 8003858:	20012e0c 	.word	0x20012e0c
 800385c:	20012e10 	.word	0x20012e10

08003860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d049      	beq.n	8003906 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003872:	2308      	movs	r3, #8
 8003874:	425b      	negs	r3, r3
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <vPortFree+0x3e>
        __asm volatile
 8003888:	f04f 0305 	mov.w	r3, #5
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60fb      	str	r3, [r7, #12]
    }
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <vPortFree+0x5c>
        __asm volatile
 80038a6:	f04f 0305 	mov.w	r3, #5
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60bb      	str	r3, [r7, #8]
    }
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0fdb      	lsrs	r3, r3, #31
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01c      	beq.n	8003906 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d118      	bne.n	8003906 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80038e0:	f7ff f8f4 	bl	8002acc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <vPortFree+0xb0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a08      	ldr	r2, [pc, #32]	; (8003910 <vPortFree+0xb0>)
 80038f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f000 f86c 	bl	80039d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <vPortFree+0xb4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <vPortFree+0xb4>)
 8003900:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003902:	f7ff f8f1 	bl	8002ae8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20012e08 	.word	0x20012e08
 8003914:	20012e14 	.word	0x20012e14

08003918 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800391e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003922:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <prvHeapInit+0xa4>)
 8003926:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3307      	adds	r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <prvHeapInit+0xa4>)
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <prvHeapInit+0xa8>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <prvHeapInit+0xa8>)
 8003958:	2200      	movs	r2, #0
 800395a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003964:	2208      	movs	r2, #8
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <prvHeapInit+0xac>)
 8003978:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <prvHeapInit+0xac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <prvHeapInit+0xac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvHeapInit+0xac>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <prvHeapInit+0xb0>)
 80039a6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <prvHeapInit+0xb4>)
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	200001fc 	.word	0x200001fc
 80039c0:	20012dfc 	.word	0x20012dfc
 80039c4:	20012e04 	.word	0x20012e04
 80039c8:	20012e0c 	.word	0x20012e0c
 80039cc:	20012e08 	.word	0x20012e08

080039d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <prvInsertBlockIntoFreeList+0xac>)
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e002      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x14>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d8f7      	bhi.n	80039de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	4413      	add	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d108      	bne.n	8003a12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	441a      	add	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	441a      	add	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d118      	bne.n	8003a58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <prvInsertBlockIntoFreeList+0xb0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d00d      	beq.n	8003a4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e008      	b.n	8003a60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <prvInsertBlockIntoFreeList+0xb0>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e003      	b.n	8003a60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d002      	beq.n	8003a6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20012dfc 	.word	0x20012dfc
 8003a80:	20012e04 	.word	0x20012e04

08003a84 <__errno>:
 8003a84:	4b01      	ldr	r3, [pc, #4]	; (8003a8c <__errno+0x8>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000014 	.word	0x20000014

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4d0d      	ldr	r5, [pc, #52]	; (8003ac8 <__libc_init_array+0x38>)
 8003a94:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	42a6      	cmp	r6, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	4d0b      	ldr	r5, [pc, #44]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa2:	4c0c      	ldr	r4, [pc, #48]	; (8003ad4 <__libc_init_array+0x44>)
 8003aa4:	f001 f824 	bl	8004af0 <_init>
 8003aa8:	1b64      	subs	r4, r4, r5
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	2600      	movs	r6, #0
 8003aae:	42a6      	cmp	r6, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab8:	4798      	blx	r3
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac2:	4798      	blx	r3
 8003ac4:	3601      	adds	r6, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	08004c48 	.word	0x08004c48
 8003acc:	08004c48 	.word	0x08004c48
 8003ad0:	08004c48 	.word	0x08004c48
 8003ad4:	08004c4c 	.word	0x08004c4c

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <iprintf>:
 8003ae8:	b40f      	push	{r0, r1, r2, r3}
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <iprintf+0x2c>)
 8003aec:	b513      	push	{r0, r1, r4, lr}
 8003aee:	681c      	ldr	r4, [r3, #0]
 8003af0:	b124      	cbz	r4, 8003afc <iprintf+0x14>
 8003af2:	69a3      	ldr	r3, [r4, #24]
 8003af4:	b913      	cbnz	r3, 8003afc <iprintf+0x14>
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 fa5e 	bl	8003fb8 <__sinit>
 8003afc:	ab05      	add	r3, sp, #20
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	68a1      	ldr	r1, [r4, #8]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	4620      	mov	r0, r4
 8003b06:	f000 fc67 	bl	80043d8 <_vfiprintf_r>
 8003b0a:	b002      	add	sp, #8
 8003b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b10:	b004      	add	sp, #16
 8003b12:	4770      	bx	lr
 8003b14:	20000014 	.word	0x20000014

08003b18 <_puts_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	460e      	mov	r6, r1
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b118      	cbz	r0, 8003b28 <_puts_r+0x10>
 8003b20:	6983      	ldr	r3, [r0, #24]
 8003b22:	b90b      	cbnz	r3, 8003b28 <_puts_r+0x10>
 8003b24:	f000 fa48 	bl	8003fb8 <__sinit>
 8003b28:	69ab      	ldr	r3, [r5, #24]
 8003b2a:	68ac      	ldr	r4, [r5, #8]
 8003b2c:	b913      	cbnz	r3, 8003b34 <_puts_r+0x1c>
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fa42 	bl	8003fb8 <__sinit>
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <_puts_r+0xd0>)
 8003b36:	429c      	cmp	r4, r3
 8003b38:	d120      	bne.n	8003b7c <_puts_r+0x64>
 8003b3a:	686c      	ldr	r4, [r5, #4]
 8003b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b3e:	07db      	lsls	r3, r3, #31
 8003b40:	d405      	bmi.n	8003b4e <_puts_r+0x36>
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	0598      	lsls	r0, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <_puts_r+0x36>
 8003b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b4a:	f000 fad3 	bl	80040f4 <__retarget_lock_acquire_recursive>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	0719      	lsls	r1, r3, #28
 8003b52:	d51d      	bpl.n	8003b90 <_puts_r+0x78>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	b1db      	cbz	r3, 8003b90 <_puts_r+0x78>
 8003b58:	3e01      	subs	r6, #1
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	bb39      	cbnz	r1, 8003bb6 <_puts_r+0x9e>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da38      	bge.n	8003bdc <_puts_r+0xc4>
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	210a      	movs	r1, #10
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f848 	bl	8003c04 <__swbuf_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d011      	beq.n	8003b9c <_puts_r+0x84>
 8003b78:	250a      	movs	r5, #10
 8003b7a:	e011      	b.n	8003ba0 <_puts_r+0x88>
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <_puts_r+0xd4>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d101      	bne.n	8003b86 <_puts_r+0x6e>
 8003b82:	68ac      	ldr	r4, [r5, #8]
 8003b84:	e7da      	b.n	8003b3c <_puts_r+0x24>
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <_puts_r+0xd8>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	bf08      	it	eq
 8003b8c:	68ec      	ldreq	r4, [r5, #12]
 8003b8e:	e7d5      	b.n	8003b3c <_puts_r+0x24>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 f888 	bl	8003ca8 <__swsetup_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d0dd      	beq.n	8003b58 <_puts_r+0x40>
 8003b9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ba2:	07da      	lsls	r2, r3, #31
 8003ba4:	d405      	bmi.n	8003bb2 <_puts_r+0x9a>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	059b      	lsls	r3, r3, #22
 8003baa:	d402      	bmi.n	8003bb2 <_puts_r+0x9a>
 8003bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bae:	f000 faa2 	bl	80040f6 <__retarget_lock_release_recursive>
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da04      	bge.n	8003bc4 <_puts_r+0xac>
 8003bba:	69a2      	ldr	r2, [r4, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dc06      	bgt.n	8003bce <_puts_r+0xb6>
 8003bc0:	290a      	cmp	r1, #10
 8003bc2:	d004      	beq.n	8003bce <_puts_r+0xb6>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	7019      	strb	r1, [r3, #0]
 8003bcc:	e7c5      	b.n	8003b5a <_puts_r+0x42>
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f000 f817 	bl	8003c04 <__swbuf_r>
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d1bf      	bne.n	8003b5a <_puts_r+0x42>
 8003bda:	e7df      	b.n	8003b9c <_puts_r+0x84>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	250a      	movs	r5, #10
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	701d      	strb	r5, [r3, #0]
 8003be6:	e7db      	b.n	8003ba0 <_puts_r+0x88>
 8003be8:	08004bcc 	.word	0x08004bcc
 8003bec:	08004bec 	.word	0x08004bec
 8003bf0:	08004bac 	.word	0x08004bac

08003bf4 <puts>:
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <puts+0xc>)
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f7ff bf8d 	b.w	8003b18 <_puts_r>
 8003bfe:	bf00      	nop
 8003c00:	20000014 	.word	0x20000014

08003c04 <__swbuf_r>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	460e      	mov	r6, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	b118      	cbz	r0, 8003c16 <__swbuf_r+0x12>
 8003c0e:	6983      	ldr	r3, [r0, #24]
 8003c10:	b90b      	cbnz	r3, 8003c16 <__swbuf_r+0x12>
 8003c12:	f000 f9d1 	bl	8003fb8 <__sinit>
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <__swbuf_r+0x98>)
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	d12b      	bne.n	8003c74 <__swbuf_r+0x70>
 8003c1c:	686c      	ldr	r4, [r5, #4]
 8003c1e:	69a3      	ldr	r3, [r4, #24]
 8003c20:	60a3      	str	r3, [r4, #8]
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	071a      	lsls	r2, r3, #28
 8003c26:	d52f      	bpl.n	8003c88 <__swbuf_r+0x84>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	b36b      	cbz	r3, 8003c88 <__swbuf_r+0x84>
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	1ac0      	subs	r0, r0, r3
 8003c32:	6963      	ldr	r3, [r4, #20]
 8003c34:	b2f6      	uxtb	r6, r6
 8003c36:	4283      	cmp	r3, r0
 8003c38:	4637      	mov	r7, r6
 8003c3a:	dc04      	bgt.n	8003c46 <__swbuf_r+0x42>
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f926 	bl	8003e90 <_fflush_r>
 8003c44:	bb30      	cbnz	r0, 8003c94 <__swbuf_r+0x90>
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	60a3      	str	r3, [r4, #8]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	6022      	str	r2, [r4, #0]
 8003c52:	701e      	strb	r6, [r3, #0]
 8003c54:	6963      	ldr	r3, [r4, #20]
 8003c56:	3001      	adds	r0, #1
 8003c58:	4283      	cmp	r3, r0
 8003c5a:	d004      	beq.n	8003c66 <__swbuf_r+0x62>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	07db      	lsls	r3, r3, #31
 8003c60:	d506      	bpl.n	8003c70 <__swbuf_r+0x6c>
 8003c62:	2e0a      	cmp	r6, #10
 8003c64:	d104      	bne.n	8003c70 <__swbuf_r+0x6c>
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 f911 	bl	8003e90 <_fflush_r>
 8003c6e:	b988      	cbnz	r0, 8003c94 <__swbuf_r+0x90>
 8003c70:	4638      	mov	r0, r7
 8003c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <__swbuf_r+0x9c>)
 8003c76:	429c      	cmp	r4, r3
 8003c78:	d101      	bne.n	8003c7e <__swbuf_r+0x7a>
 8003c7a:	68ac      	ldr	r4, [r5, #8]
 8003c7c:	e7cf      	b.n	8003c1e <__swbuf_r+0x1a>
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <__swbuf_r+0xa0>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	bf08      	it	eq
 8003c84:	68ec      	ldreq	r4, [r5, #12]
 8003c86:	e7ca      	b.n	8003c1e <__swbuf_r+0x1a>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f80c 	bl	8003ca8 <__swsetup_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d0cb      	beq.n	8003c2c <__swbuf_r+0x28>
 8003c94:	f04f 37ff 	mov.w	r7, #4294967295
 8003c98:	e7ea      	b.n	8003c70 <__swbuf_r+0x6c>
 8003c9a:	bf00      	nop
 8003c9c:	08004bcc 	.word	0x08004bcc
 8003ca0:	08004bec 	.word	0x08004bec
 8003ca4:	08004bac 	.word	0x08004bac

08003ca8 <__swsetup_r>:
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <__swsetup_r+0xcc>)
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	4606      	mov	r6, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	b125      	cbz	r5, 8003cbe <__swsetup_r+0x16>
 8003cb4:	69ab      	ldr	r3, [r5, #24]
 8003cb6:	b913      	cbnz	r3, 8003cbe <__swsetup_r+0x16>
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f000 f97d 	bl	8003fb8 <__sinit>
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <__swsetup_r+0xd0>)
 8003cc0:	429c      	cmp	r4, r3
 8003cc2:	d10f      	bne.n	8003ce4 <__swsetup_r+0x3c>
 8003cc4:	686c      	ldr	r4, [r5, #4]
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ccc:	0719      	lsls	r1, r3, #28
 8003cce:	d42c      	bmi.n	8003d2a <__swsetup_r+0x82>
 8003cd0:	06dd      	lsls	r5, r3, #27
 8003cd2:	d411      	bmi.n	8003cf8 <__swsetup_r+0x50>
 8003cd4:	2309      	movs	r3, #9
 8003cd6:	6033      	str	r3, [r6, #0]
 8003cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003cdc:	81a3      	strh	r3, [r4, #12]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	e03e      	b.n	8003d62 <__swsetup_r+0xba>
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <__swsetup_r+0xd4>)
 8003ce6:	429c      	cmp	r4, r3
 8003ce8:	d101      	bne.n	8003cee <__swsetup_r+0x46>
 8003cea:	68ac      	ldr	r4, [r5, #8]
 8003cec:	e7eb      	b.n	8003cc6 <__swsetup_r+0x1e>
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <__swsetup_r+0xd8>)
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	bf08      	it	eq
 8003cf4:	68ec      	ldreq	r4, [r5, #12]
 8003cf6:	e7e6      	b.n	8003cc6 <__swsetup_r+0x1e>
 8003cf8:	0758      	lsls	r0, r3, #29
 8003cfa:	d512      	bpl.n	8003d22 <__swsetup_r+0x7a>
 8003cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cfe:	b141      	cbz	r1, 8003d12 <__swsetup_r+0x6a>
 8003d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d002      	beq.n	8003d0e <__swsetup_r+0x66>
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f000 fa5b 	bl	80041c4 <_free_r>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6363      	str	r3, [r4, #52]	; 0x34
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d18:	81a3      	strh	r3, [r4, #12]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	81a3      	strh	r3, [r4, #12]
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	b94b      	cbnz	r3, 8003d42 <__swsetup_r+0x9a>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d003      	beq.n	8003d42 <__swsetup_r+0x9a>
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 fa01 	bl	8004144 <__smakebuf_r>
 8003d42:	89a0      	ldrh	r0, [r4, #12]
 8003d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d48:	f010 0301 	ands.w	r3, r0, #1
 8003d4c:	d00a      	beq.n	8003d64 <__swsetup_r+0xbc>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	6963      	ldr	r3, [r4, #20]
 8003d54:	425b      	negs	r3, r3
 8003d56:	61a3      	str	r3, [r4, #24]
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	b943      	cbnz	r3, 8003d6e <__swsetup_r+0xc6>
 8003d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d60:	d1ba      	bne.n	8003cd8 <__swsetup_r+0x30>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	0781      	lsls	r1, r0, #30
 8003d66:	bf58      	it	pl
 8003d68:	6963      	ldrpl	r3, [r4, #20]
 8003d6a:	60a3      	str	r3, [r4, #8]
 8003d6c:	e7f4      	b.n	8003d58 <__swsetup_r+0xb0>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e7f7      	b.n	8003d62 <__swsetup_r+0xba>
 8003d72:	bf00      	nop
 8003d74:	20000014 	.word	0x20000014
 8003d78:	08004bcc 	.word	0x08004bcc
 8003d7c:	08004bec 	.word	0x08004bec
 8003d80:	08004bac 	.word	0x08004bac

08003d84 <__sflush_r>:
 8003d84:	898a      	ldrh	r2, [r1, #12]
 8003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	0710      	lsls	r0, r2, #28
 8003d8e:	460c      	mov	r4, r1
 8003d90:	d458      	bmi.n	8003e44 <__sflush_r+0xc0>
 8003d92:	684b      	ldr	r3, [r1, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dc05      	bgt.n	8003da4 <__sflush_r+0x20>
 8003d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	dc02      	bgt.n	8003da4 <__sflush_r+0x20>
 8003d9e:	2000      	movs	r0, #0
 8003da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003da6:	2e00      	cmp	r6, #0
 8003da8:	d0f9      	beq.n	8003d9e <__sflush_r+0x1a>
 8003daa:	2300      	movs	r3, #0
 8003dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003db0:	682f      	ldr	r7, [r5, #0]
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	d032      	beq.n	8003e1c <__sflush_r+0x98>
 8003db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	075a      	lsls	r2, r3, #29
 8003dbc:	d505      	bpl.n	8003dca <__sflush_r+0x46>
 8003dbe:	6863      	ldr	r3, [r4, #4]
 8003dc0:	1ac0      	subs	r0, r0, r3
 8003dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dc4:	b10b      	cbz	r3, 8003dca <__sflush_r+0x46>
 8003dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dc8:	1ac0      	subs	r0, r0, r3
 8003dca:	2300      	movs	r3, #0
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dd0:	6a21      	ldr	r1, [r4, #32]
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b0      	blx	r6
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	d106      	bne.n	8003dea <__sflush_r+0x66>
 8003ddc:	6829      	ldr	r1, [r5, #0]
 8003dde:	291d      	cmp	r1, #29
 8003de0:	d82c      	bhi.n	8003e3c <__sflush_r+0xb8>
 8003de2:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <__sflush_r+0x108>)
 8003de4:	40ca      	lsrs	r2, r1
 8003de6:	07d6      	lsls	r6, r2, #31
 8003de8:	d528      	bpl.n	8003e3c <__sflush_r+0xb8>
 8003dea:	2200      	movs	r2, #0
 8003dec:	6062      	str	r2, [r4, #4]
 8003dee:	04d9      	lsls	r1, r3, #19
 8003df0:	6922      	ldr	r2, [r4, #16]
 8003df2:	6022      	str	r2, [r4, #0]
 8003df4:	d504      	bpl.n	8003e00 <__sflush_r+0x7c>
 8003df6:	1c42      	adds	r2, r0, #1
 8003df8:	d101      	bne.n	8003dfe <__sflush_r+0x7a>
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	b903      	cbnz	r3, 8003e00 <__sflush_r+0x7c>
 8003dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8003e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e02:	602f      	str	r7, [r5, #0]
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d0ca      	beq.n	8003d9e <__sflush_r+0x1a>
 8003e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e0c:	4299      	cmp	r1, r3
 8003e0e:	d002      	beq.n	8003e16 <__sflush_r+0x92>
 8003e10:	4628      	mov	r0, r5
 8003e12:	f000 f9d7 	bl	80041c4 <_free_r>
 8003e16:	2000      	movs	r0, #0
 8003e18:	6360      	str	r0, [r4, #52]	; 0x34
 8003e1a:	e7c1      	b.n	8003da0 <__sflush_r+0x1c>
 8003e1c:	6a21      	ldr	r1, [r4, #32]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b0      	blx	r6
 8003e24:	1c41      	adds	r1, r0, #1
 8003e26:	d1c7      	bne.n	8003db8 <__sflush_r+0x34>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0c4      	beq.n	8003db8 <__sflush_r+0x34>
 8003e2e:	2b1d      	cmp	r3, #29
 8003e30:	d001      	beq.n	8003e36 <__sflush_r+0xb2>
 8003e32:	2b16      	cmp	r3, #22
 8003e34:	d101      	bne.n	8003e3a <__sflush_r+0xb6>
 8003e36:	602f      	str	r7, [r5, #0]
 8003e38:	e7b1      	b.n	8003d9e <__sflush_r+0x1a>
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	e7ad      	b.n	8003da0 <__sflush_r+0x1c>
 8003e44:	690f      	ldr	r7, [r1, #16]
 8003e46:	2f00      	cmp	r7, #0
 8003e48:	d0a9      	beq.n	8003d9e <__sflush_r+0x1a>
 8003e4a:	0793      	lsls	r3, r2, #30
 8003e4c:	680e      	ldr	r6, [r1, #0]
 8003e4e:	bf08      	it	eq
 8003e50:	694b      	ldreq	r3, [r1, #20]
 8003e52:	600f      	str	r7, [r1, #0]
 8003e54:	bf18      	it	ne
 8003e56:	2300      	movne	r3, #0
 8003e58:	eba6 0807 	sub.w	r8, r6, r7
 8003e5c:	608b      	str	r3, [r1, #8]
 8003e5e:	f1b8 0f00 	cmp.w	r8, #0
 8003e62:	dd9c      	ble.n	8003d9e <__sflush_r+0x1a>
 8003e64:	6a21      	ldr	r1, [r4, #32]
 8003e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e68:	4643      	mov	r3, r8
 8003e6a:	463a      	mov	r2, r7
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b0      	blx	r6
 8003e70:	2800      	cmp	r0, #0
 8003e72:	dc06      	bgt.n	8003e82 <__sflush_r+0xfe>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	e78e      	b.n	8003da0 <__sflush_r+0x1c>
 8003e82:	4407      	add	r7, r0
 8003e84:	eba8 0800 	sub.w	r8, r8, r0
 8003e88:	e7e9      	b.n	8003e5e <__sflush_r+0xda>
 8003e8a:	bf00      	nop
 8003e8c:	20400001 	.word	0x20400001

08003e90 <_fflush_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	4605      	mov	r5, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	b913      	cbnz	r3, 8003ea0 <_fflush_r+0x10>
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	b118      	cbz	r0, 8003eaa <_fflush_r+0x1a>
 8003ea2:	6983      	ldr	r3, [r0, #24]
 8003ea4:	b90b      	cbnz	r3, 8003eaa <_fflush_r+0x1a>
 8003ea6:	f000 f887 	bl	8003fb8 <__sinit>
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <_fflush_r+0x6c>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d11b      	bne.n	8003ee8 <_fflush_r+0x58>
 8003eb0:	686c      	ldr	r4, [r5, #4]
 8003eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <_fflush_r+0xa>
 8003eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ebc:	07d0      	lsls	r0, r2, #31
 8003ebe:	d404      	bmi.n	8003eca <_fflush_r+0x3a>
 8003ec0:	0599      	lsls	r1, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_fflush_r+0x3a>
 8003ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec6:	f000 f915 	bl	80040f4 <__retarget_lock_acquire_recursive>
 8003eca:	4628      	mov	r0, r5
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f7ff ff59 	bl	8003d84 <__sflush_r>
 8003ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed4:	07da      	lsls	r2, r3, #31
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	d4e0      	bmi.n	8003e9c <_fflush_r+0xc>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	059b      	lsls	r3, r3, #22
 8003ede:	d4dd      	bmi.n	8003e9c <_fflush_r+0xc>
 8003ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee2:	f000 f908 	bl	80040f6 <__retarget_lock_release_recursive>
 8003ee6:	e7d9      	b.n	8003e9c <_fflush_r+0xc>
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_fflush_r+0x70>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d101      	bne.n	8003ef2 <_fflush_r+0x62>
 8003eee:	68ac      	ldr	r4, [r5, #8]
 8003ef0:	e7df      	b.n	8003eb2 <_fflush_r+0x22>
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <_fflush_r+0x74>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	bf08      	it	eq
 8003ef8:	68ec      	ldreq	r4, [r5, #12]
 8003efa:	e7da      	b.n	8003eb2 <_fflush_r+0x22>
 8003efc:	08004bcc 	.word	0x08004bcc
 8003f00:	08004bec 	.word	0x08004bec
 8003f04:	08004bac 	.word	0x08004bac

08003f08 <std>:
 8003f08:	2300      	movs	r3, #0
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f16:	6083      	str	r3, [r0, #8]
 8003f18:	8181      	strh	r1, [r0, #12]
 8003f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f1c:	81c2      	strh	r2, [r0, #14]
 8003f1e:	6183      	str	r3, [r0, #24]
 8003f20:	4619      	mov	r1, r3
 8003f22:	2208      	movs	r2, #8
 8003f24:	305c      	adds	r0, #92	; 0x5c
 8003f26:	f7ff fdd7 	bl	8003ad8 <memset>
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <std+0x38>)
 8003f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <std+0x3c>)
 8003f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <std+0x40>)
 8003f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <std+0x44>)
 8003f38:	6224      	str	r4, [r4, #32]
 8003f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	bf00      	nop
 8003f40:	08004981 	.word	0x08004981
 8003f44:	080049a3 	.word	0x080049a3
 8003f48:	080049db 	.word	0x080049db
 8003f4c:	080049ff 	.word	0x080049ff

08003f50 <_cleanup_r>:
 8003f50:	4901      	ldr	r1, [pc, #4]	; (8003f58 <_cleanup_r+0x8>)
 8003f52:	f000 b8af 	b.w	80040b4 <_fwalk_reent>
 8003f56:	bf00      	nop
 8003f58:	08003e91 	.word	0x08003e91

08003f5c <__sfmoreglue>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	2268      	movs	r2, #104	; 0x68
 8003f60:	1e4d      	subs	r5, r1, #1
 8003f62:	4355      	muls	r5, r2
 8003f64:	460e      	mov	r6, r1
 8003f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f6a:	f000 f997 	bl	800429c <_malloc_r>
 8003f6e:	4604      	mov	r4, r0
 8003f70:	b140      	cbz	r0, 8003f84 <__sfmoreglue+0x28>
 8003f72:	2100      	movs	r1, #0
 8003f74:	e9c0 1600 	strd	r1, r6, [r0]
 8003f78:	300c      	adds	r0, #12
 8003f7a:	60a0      	str	r0, [r4, #8]
 8003f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f80:	f7ff fdaa 	bl	8003ad8 <memset>
 8003f84:	4620      	mov	r0, r4
 8003f86:	bd70      	pop	{r4, r5, r6, pc}

08003f88 <__sfp_lock_acquire>:
 8003f88:	4801      	ldr	r0, [pc, #4]	; (8003f90 <__sfp_lock_acquire+0x8>)
 8003f8a:	f000 b8b3 	b.w	80040f4 <__retarget_lock_acquire_recursive>
 8003f8e:	bf00      	nop
 8003f90:	20012e19 	.word	0x20012e19

08003f94 <__sfp_lock_release>:
 8003f94:	4801      	ldr	r0, [pc, #4]	; (8003f9c <__sfp_lock_release+0x8>)
 8003f96:	f000 b8ae 	b.w	80040f6 <__retarget_lock_release_recursive>
 8003f9a:	bf00      	nop
 8003f9c:	20012e19 	.word	0x20012e19

08003fa0 <__sinit_lock_acquire>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	; (8003fa8 <__sinit_lock_acquire+0x8>)
 8003fa2:	f000 b8a7 	b.w	80040f4 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	20012e1a 	.word	0x20012e1a

08003fac <__sinit_lock_release>:
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <__sinit_lock_release+0x8>)
 8003fae:	f000 b8a2 	b.w	80040f6 <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	20012e1a 	.word	0x20012e1a

08003fb8 <__sinit>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f7ff fff0 	bl	8003fa0 <__sinit_lock_acquire>
 8003fc0:	69a3      	ldr	r3, [r4, #24]
 8003fc2:	b11b      	cbz	r3, 8003fcc <__sinit+0x14>
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc8:	f7ff bff0 	b.w	8003fac <__sinit_lock_release>
 8003fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <__sinit+0x68>)
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <__sinit+0x6c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	bf04      	itt	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	61a3      	streq	r3, [r4, #24]
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 f820 	bl	8004028 <__sfp>
 8003fe8:	6060      	str	r0, [r4, #4]
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 f81c 	bl	8004028 <__sfp>
 8003ff0:	60a0      	str	r0, [r4, #8]
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f000 f818 	bl	8004028 <__sfp>
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60e0      	str	r0, [r4, #12]
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	6860      	ldr	r0, [r4, #4]
 8004000:	f7ff ff82 	bl	8003f08 <std>
 8004004:	68a0      	ldr	r0, [r4, #8]
 8004006:	2201      	movs	r2, #1
 8004008:	2109      	movs	r1, #9
 800400a:	f7ff ff7d 	bl	8003f08 <std>
 800400e:	68e0      	ldr	r0, [r4, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	2112      	movs	r1, #18
 8004014:	f7ff ff78 	bl	8003f08 <std>
 8004018:	2301      	movs	r3, #1
 800401a:	61a3      	str	r3, [r4, #24]
 800401c:	e7d2      	b.n	8003fc4 <__sinit+0xc>
 800401e:	bf00      	nop
 8004020:	08004ba8 	.word	0x08004ba8
 8004024:	08003f51 	.word	0x08003f51

08004028 <__sfp>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	4607      	mov	r7, r0
 800402c:	f7ff ffac 	bl	8003f88 <__sfp_lock_acquire>
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <__sfp+0x84>)
 8004032:	681e      	ldr	r6, [r3, #0]
 8004034:	69b3      	ldr	r3, [r6, #24]
 8004036:	b913      	cbnz	r3, 800403e <__sfp+0x16>
 8004038:	4630      	mov	r0, r6
 800403a:	f7ff ffbd 	bl	8003fb8 <__sinit>
 800403e:	3648      	adds	r6, #72	; 0x48
 8004040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004044:	3b01      	subs	r3, #1
 8004046:	d503      	bpl.n	8004050 <__sfp+0x28>
 8004048:	6833      	ldr	r3, [r6, #0]
 800404a:	b30b      	cbz	r3, 8004090 <__sfp+0x68>
 800404c:	6836      	ldr	r6, [r6, #0]
 800404e:	e7f7      	b.n	8004040 <__sfp+0x18>
 8004050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004054:	b9d5      	cbnz	r5, 800408c <__sfp+0x64>
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <__sfp+0x88>)
 8004058:	60e3      	str	r3, [r4, #12]
 800405a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800405e:	6665      	str	r5, [r4, #100]	; 0x64
 8004060:	f000 f847 	bl	80040f2 <__retarget_lock_init_recursive>
 8004064:	f7ff ff96 	bl	8003f94 <__sfp_lock_release>
 8004068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800406c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004070:	6025      	str	r5, [r4, #0]
 8004072:	61a5      	str	r5, [r4, #24]
 8004074:	2208      	movs	r2, #8
 8004076:	4629      	mov	r1, r5
 8004078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800407c:	f7ff fd2c 	bl	8003ad8 <memset>
 8004080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004088:	4620      	mov	r0, r4
 800408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408c:	3468      	adds	r4, #104	; 0x68
 800408e:	e7d9      	b.n	8004044 <__sfp+0x1c>
 8004090:	2104      	movs	r1, #4
 8004092:	4638      	mov	r0, r7
 8004094:	f7ff ff62 	bl	8003f5c <__sfmoreglue>
 8004098:	4604      	mov	r4, r0
 800409a:	6030      	str	r0, [r6, #0]
 800409c:	2800      	cmp	r0, #0
 800409e:	d1d5      	bne.n	800404c <__sfp+0x24>
 80040a0:	f7ff ff78 	bl	8003f94 <__sfp_lock_release>
 80040a4:	230c      	movs	r3, #12
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	e7ee      	b.n	8004088 <__sfp+0x60>
 80040aa:	bf00      	nop
 80040ac:	08004ba8 	.word	0x08004ba8
 80040b0:	ffff0001 	.word	0xffff0001

080040b4 <_fwalk_reent>:
 80040b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4606      	mov	r6, r0
 80040ba:	4688      	mov	r8, r1
 80040bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80040c0:	2700      	movs	r7, #0
 80040c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040c6:	f1b9 0901 	subs.w	r9, r9, #1
 80040ca:	d505      	bpl.n	80040d8 <_fwalk_reent+0x24>
 80040cc:	6824      	ldr	r4, [r4, #0]
 80040ce:	2c00      	cmp	r4, #0
 80040d0:	d1f7      	bne.n	80040c2 <_fwalk_reent+0xe>
 80040d2:	4638      	mov	r0, r7
 80040d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d8:	89ab      	ldrh	r3, [r5, #12]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d907      	bls.n	80040ee <_fwalk_reent+0x3a>
 80040de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040e2:	3301      	adds	r3, #1
 80040e4:	d003      	beq.n	80040ee <_fwalk_reent+0x3a>
 80040e6:	4629      	mov	r1, r5
 80040e8:	4630      	mov	r0, r6
 80040ea:	47c0      	blx	r8
 80040ec:	4307      	orrs	r7, r0
 80040ee:	3568      	adds	r5, #104	; 0x68
 80040f0:	e7e9      	b.n	80040c6 <_fwalk_reent+0x12>

080040f2 <__retarget_lock_init_recursive>:
 80040f2:	4770      	bx	lr

080040f4 <__retarget_lock_acquire_recursive>:
 80040f4:	4770      	bx	lr

080040f6 <__retarget_lock_release_recursive>:
 80040f6:	4770      	bx	lr

080040f8 <__swhatbuf_r>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460e      	mov	r6, r1
 80040fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004100:	2900      	cmp	r1, #0
 8004102:	b096      	sub	sp, #88	; 0x58
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	da08      	bge.n	800411c <__swhatbuf_r+0x24>
 800410a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	061a      	lsls	r2, r3, #24
 8004114:	d410      	bmi.n	8004138 <__swhatbuf_r+0x40>
 8004116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411a:	e00e      	b.n	800413a <__swhatbuf_r+0x42>
 800411c:	466a      	mov	r2, sp
 800411e:	f000 fc95 	bl	8004a4c <_fstat_r>
 8004122:	2800      	cmp	r0, #0
 8004124:	dbf1      	blt.n	800410a <__swhatbuf_r+0x12>
 8004126:	9a01      	ldr	r2, [sp, #4]
 8004128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800412c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004130:	425a      	negs	r2, r3
 8004132:	415a      	adcs	r2, r3
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	e7ee      	b.n	8004116 <__swhatbuf_r+0x1e>
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	2000      	movs	r0, #0
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	b016      	add	sp, #88	; 0x58
 8004140:	bd70      	pop	{r4, r5, r6, pc}
	...

08004144 <__smakebuf_r>:
 8004144:	898b      	ldrh	r3, [r1, #12]
 8004146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004148:	079d      	lsls	r5, r3, #30
 800414a:	4606      	mov	r6, r0
 800414c:	460c      	mov	r4, r1
 800414e:	d507      	bpl.n	8004160 <__smakebuf_r+0x1c>
 8004150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	2301      	movs	r3, #1
 800415a:	6163      	str	r3, [r4, #20]
 800415c:	b002      	add	sp, #8
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	ab01      	add	r3, sp, #4
 8004162:	466a      	mov	r2, sp
 8004164:	f7ff ffc8 	bl	80040f8 <__swhatbuf_r>
 8004168:	9900      	ldr	r1, [sp, #0]
 800416a:	4605      	mov	r5, r0
 800416c:	4630      	mov	r0, r6
 800416e:	f000 f895 	bl	800429c <_malloc_r>
 8004172:	b948      	cbnz	r0, 8004188 <__smakebuf_r+0x44>
 8004174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004178:	059a      	lsls	r2, r3, #22
 800417a:	d4ef      	bmi.n	800415c <__smakebuf_r+0x18>
 800417c:	f023 0303 	bic.w	r3, r3, #3
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	e7e3      	b.n	8004150 <__smakebuf_r+0xc>
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <__smakebuf_r+0x7c>)
 800418a:	62b3      	str	r3, [r6, #40]	; 0x28
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	6020      	str	r0, [r4, #0]
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	9b00      	ldr	r3, [sp, #0]
 8004198:	6163      	str	r3, [r4, #20]
 800419a:	9b01      	ldr	r3, [sp, #4]
 800419c:	6120      	str	r0, [r4, #16]
 800419e:	b15b      	cbz	r3, 80041b8 <__smakebuf_r+0x74>
 80041a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 fc63 	bl	8004a70 <_isatty_r>
 80041aa:	b128      	cbz	r0, 80041b8 <__smakebuf_r+0x74>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	89a0      	ldrh	r0, [r4, #12]
 80041ba:	4305      	orrs	r5, r0
 80041bc:	81a5      	strh	r5, [r4, #12]
 80041be:	e7cd      	b.n	800415c <__smakebuf_r+0x18>
 80041c0:	08003f51 	.word	0x08003f51

080041c4 <_free_r>:
 80041c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041c6:	2900      	cmp	r1, #0
 80041c8:	d044      	beq.n	8004254 <_free_r+0x90>
 80041ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ce:	9001      	str	r0, [sp, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f1a1 0404 	sub.w	r4, r1, #4
 80041d6:	bfb8      	it	lt
 80041d8:	18e4      	addlt	r4, r4, r3
 80041da:	f000 fc6b 	bl	8004ab4 <__malloc_lock>
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <_free_r+0x94>)
 80041e0:	9801      	ldr	r0, [sp, #4]
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	b933      	cbnz	r3, 80041f4 <_free_r+0x30>
 80041e6:	6063      	str	r3, [r4, #4]
 80041e8:	6014      	str	r4, [r2, #0]
 80041ea:	b003      	add	sp, #12
 80041ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f0:	f000 bc66 	b.w	8004ac0 <__malloc_unlock>
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	d908      	bls.n	800420a <_free_r+0x46>
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	1961      	adds	r1, r4, r5
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf01      	itttt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	1949      	addeq	r1, r1, r5
 8004206:	6021      	streq	r1, [r4, #0]
 8004208:	e7ed      	b.n	80041e6 <_free_r+0x22>
 800420a:	461a      	mov	r2, r3
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b10b      	cbz	r3, 8004214 <_free_r+0x50>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x46>
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	1855      	adds	r5, r2, r1
 8004218:	42a5      	cmp	r5, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x70>
 800421c:	6824      	ldr	r4, [r4, #0]
 800421e:	4421      	add	r1, r4
 8004220:	1854      	adds	r4, r2, r1
 8004222:	42a3      	cmp	r3, r4
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	d1e0      	bne.n	80041ea <_free_r+0x26>
 8004228:	681c      	ldr	r4, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	4421      	add	r1, r4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	e7da      	b.n	80041ea <_free_r+0x26>
 8004234:	d902      	bls.n	800423c <_free_r+0x78>
 8004236:	230c      	movs	r3, #12
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	e7d6      	b.n	80041ea <_free_r+0x26>
 800423c:	6825      	ldr	r5, [r4, #0]
 800423e:	1961      	adds	r1, r4, r5
 8004240:	428b      	cmp	r3, r1
 8004242:	bf04      	itt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6054      	str	r4, [r2, #4]
 8004252:	e7ca      	b.n	80041ea <_free_r+0x26>
 8004254:	b003      	add	sp, #12
 8004256:	bd30      	pop	{r4, r5, pc}
 8004258:	20012e1c 	.word	0x20012e1c

0800425c <sbrk_aligned>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4e0e      	ldr	r6, [pc, #56]	; (8004298 <sbrk_aligned+0x3c>)
 8004260:	460c      	mov	r4, r1
 8004262:	6831      	ldr	r1, [r6, #0]
 8004264:	4605      	mov	r5, r0
 8004266:	b911      	cbnz	r1, 800426e <sbrk_aligned+0x12>
 8004268:	f000 fb7a 	bl	8004960 <_sbrk_r>
 800426c:	6030      	str	r0, [r6, #0]
 800426e:	4621      	mov	r1, r4
 8004270:	4628      	mov	r0, r5
 8004272:	f000 fb75 	bl	8004960 <_sbrk_r>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d00a      	beq.n	8004290 <sbrk_aligned+0x34>
 800427a:	1cc4      	adds	r4, r0, #3
 800427c:	f024 0403 	bic.w	r4, r4, #3
 8004280:	42a0      	cmp	r0, r4
 8004282:	d007      	beq.n	8004294 <sbrk_aligned+0x38>
 8004284:	1a21      	subs	r1, r4, r0
 8004286:	4628      	mov	r0, r5
 8004288:	f000 fb6a 	bl	8004960 <_sbrk_r>
 800428c:	3001      	adds	r0, #1
 800428e:	d101      	bne.n	8004294 <sbrk_aligned+0x38>
 8004290:	f04f 34ff 	mov.w	r4, #4294967295
 8004294:	4620      	mov	r0, r4
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	20012e20 	.word	0x20012e20

0800429c <_malloc_r>:
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	1ccd      	adds	r5, r1, #3
 80042a2:	f025 0503 	bic.w	r5, r5, #3
 80042a6:	3508      	adds	r5, #8
 80042a8:	2d0c      	cmp	r5, #12
 80042aa:	bf38      	it	cc
 80042ac:	250c      	movcc	r5, #12
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	4607      	mov	r7, r0
 80042b2:	db01      	blt.n	80042b8 <_malloc_r+0x1c>
 80042b4:	42a9      	cmp	r1, r5
 80042b6:	d905      	bls.n	80042c4 <_malloc_r+0x28>
 80042b8:	230c      	movs	r3, #12
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	2600      	movs	r6, #0
 80042be:	4630      	mov	r0, r6
 80042c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c4:	4e2e      	ldr	r6, [pc, #184]	; (8004380 <_malloc_r+0xe4>)
 80042c6:	f000 fbf5 	bl	8004ab4 <__malloc_lock>
 80042ca:	6833      	ldr	r3, [r6, #0]
 80042cc:	461c      	mov	r4, r3
 80042ce:	bb34      	cbnz	r4, 800431e <_malloc_r+0x82>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff ffc2 	bl	800425c <sbrk_aligned>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	4604      	mov	r4, r0
 80042dc:	d14d      	bne.n	800437a <_malloc_r+0xde>
 80042de:	6834      	ldr	r4, [r6, #0]
 80042e0:	4626      	mov	r6, r4
 80042e2:	2e00      	cmp	r6, #0
 80042e4:	d140      	bne.n	8004368 <_malloc_r+0xcc>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	4631      	mov	r1, r6
 80042ea:	4638      	mov	r0, r7
 80042ec:	eb04 0803 	add.w	r8, r4, r3
 80042f0:	f000 fb36 	bl	8004960 <_sbrk_r>
 80042f4:	4580      	cmp	r8, r0
 80042f6:	d13a      	bne.n	800436e <_malloc_r+0xd2>
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	3503      	adds	r5, #3
 80042fc:	1a6d      	subs	r5, r5, r1
 80042fe:	f025 0503 	bic.w	r5, r5, #3
 8004302:	3508      	adds	r5, #8
 8004304:	2d0c      	cmp	r5, #12
 8004306:	bf38      	it	cc
 8004308:	250c      	movcc	r5, #12
 800430a:	4629      	mov	r1, r5
 800430c:	4638      	mov	r0, r7
 800430e:	f7ff ffa5 	bl	800425c <sbrk_aligned>
 8004312:	3001      	adds	r0, #1
 8004314:	d02b      	beq.n	800436e <_malloc_r+0xd2>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	442b      	add	r3, r5
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	e00e      	b.n	800433c <_malloc_r+0xa0>
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	1b52      	subs	r2, r2, r5
 8004322:	d41e      	bmi.n	8004362 <_malloc_r+0xc6>
 8004324:	2a0b      	cmp	r2, #11
 8004326:	d916      	bls.n	8004356 <_malloc_r+0xba>
 8004328:	1961      	adds	r1, r4, r5
 800432a:	42a3      	cmp	r3, r4
 800432c:	6025      	str	r5, [r4, #0]
 800432e:	bf18      	it	ne
 8004330:	6059      	strne	r1, [r3, #4]
 8004332:	6863      	ldr	r3, [r4, #4]
 8004334:	bf08      	it	eq
 8004336:	6031      	streq	r1, [r6, #0]
 8004338:	5162      	str	r2, [r4, r5]
 800433a:	604b      	str	r3, [r1, #4]
 800433c:	4638      	mov	r0, r7
 800433e:	f104 060b 	add.w	r6, r4, #11
 8004342:	f000 fbbd 	bl	8004ac0 <__malloc_unlock>
 8004346:	f026 0607 	bic.w	r6, r6, #7
 800434a:	1d23      	adds	r3, r4, #4
 800434c:	1af2      	subs	r2, r6, r3
 800434e:	d0b6      	beq.n	80042be <_malloc_r+0x22>
 8004350:	1b9b      	subs	r3, r3, r6
 8004352:	50a3      	str	r3, [r4, r2]
 8004354:	e7b3      	b.n	80042be <_malloc_r+0x22>
 8004356:	6862      	ldr	r2, [r4, #4]
 8004358:	42a3      	cmp	r3, r4
 800435a:	bf0c      	ite	eq
 800435c:	6032      	streq	r2, [r6, #0]
 800435e:	605a      	strne	r2, [r3, #4]
 8004360:	e7ec      	b.n	800433c <_malloc_r+0xa0>
 8004362:	4623      	mov	r3, r4
 8004364:	6864      	ldr	r4, [r4, #4]
 8004366:	e7b2      	b.n	80042ce <_malloc_r+0x32>
 8004368:	4634      	mov	r4, r6
 800436a:	6876      	ldr	r6, [r6, #4]
 800436c:	e7b9      	b.n	80042e2 <_malloc_r+0x46>
 800436e:	230c      	movs	r3, #12
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4638      	mov	r0, r7
 8004374:	f000 fba4 	bl	8004ac0 <__malloc_unlock>
 8004378:	e7a1      	b.n	80042be <_malloc_r+0x22>
 800437a:	6025      	str	r5, [r4, #0]
 800437c:	e7de      	b.n	800433c <_malloc_r+0xa0>
 800437e:	bf00      	nop
 8004380:	20012e1c 	.word	0x20012e1c

08004384 <__sfputc_r>:
 8004384:	6893      	ldr	r3, [r2, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	b410      	push	{r4}
 800438c:	6093      	str	r3, [r2, #8]
 800438e:	da08      	bge.n	80043a2 <__sfputc_r+0x1e>
 8004390:	6994      	ldr	r4, [r2, #24]
 8004392:	42a3      	cmp	r3, r4
 8004394:	db01      	blt.n	800439a <__sfputc_r+0x16>
 8004396:	290a      	cmp	r1, #10
 8004398:	d103      	bne.n	80043a2 <__sfputc_r+0x1e>
 800439a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439e:	f7ff bc31 	b.w	8003c04 <__swbuf_r>
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	1c58      	adds	r0, r3, #1
 80043a6:	6010      	str	r0, [r2, #0]
 80043a8:	7019      	strb	r1, [r3, #0]
 80043aa:	4608      	mov	r0, r1
 80043ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <__sfputs_r>:
 80043b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b4:	4606      	mov	r6, r0
 80043b6:	460f      	mov	r7, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	18d5      	adds	r5, r2, r3
 80043bc:	42ac      	cmp	r4, r5
 80043be:	d101      	bne.n	80043c4 <__sfputs_r+0x12>
 80043c0:	2000      	movs	r0, #0
 80043c2:	e007      	b.n	80043d4 <__sfputs_r+0x22>
 80043c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c8:	463a      	mov	r2, r7
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7ff ffda 	bl	8004384 <__sfputc_r>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d1f3      	bne.n	80043bc <__sfputs_r+0xa>
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d8 <_vfiprintf_r>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	460d      	mov	r5, r1
 80043de:	b09d      	sub	sp, #116	; 0x74
 80043e0:	4614      	mov	r4, r2
 80043e2:	4698      	mov	r8, r3
 80043e4:	4606      	mov	r6, r0
 80043e6:	b118      	cbz	r0, 80043f0 <_vfiprintf_r+0x18>
 80043e8:	6983      	ldr	r3, [r0, #24]
 80043ea:	b90b      	cbnz	r3, 80043f0 <_vfiprintf_r+0x18>
 80043ec:	f7ff fde4 	bl	8003fb8 <__sinit>
 80043f0:	4b89      	ldr	r3, [pc, #548]	; (8004618 <_vfiprintf_r+0x240>)
 80043f2:	429d      	cmp	r5, r3
 80043f4:	d11b      	bne.n	800442e <_vfiprintf_r+0x56>
 80043f6:	6875      	ldr	r5, [r6, #4]
 80043f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043fa:	07d9      	lsls	r1, r3, #31
 80043fc:	d405      	bmi.n	800440a <_vfiprintf_r+0x32>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	059a      	lsls	r2, r3, #22
 8004402:	d402      	bmi.n	800440a <_vfiprintf_r+0x32>
 8004404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004406:	f7ff fe75 	bl	80040f4 <__retarget_lock_acquire_recursive>
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	d501      	bpl.n	8004414 <_vfiprintf_r+0x3c>
 8004410:	692b      	ldr	r3, [r5, #16]
 8004412:	b9eb      	cbnz	r3, 8004450 <_vfiprintf_r+0x78>
 8004414:	4629      	mov	r1, r5
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff fc46 	bl	8003ca8 <__swsetup_r>
 800441c:	b1c0      	cbz	r0, 8004450 <_vfiprintf_r+0x78>
 800441e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004420:	07dc      	lsls	r4, r3, #31
 8004422:	d50e      	bpl.n	8004442 <_vfiprintf_r+0x6a>
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	b01d      	add	sp, #116	; 0x74
 800442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442e:	4b7b      	ldr	r3, [pc, #492]	; (800461c <_vfiprintf_r+0x244>)
 8004430:	429d      	cmp	r5, r3
 8004432:	d101      	bne.n	8004438 <_vfiprintf_r+0x60>
 8004434:	68b5      	ldr	r5, [r6, #8]
 8004436:	e7df      	b.n	80043f8 <_vfiprintf_r+0x20>
 8004438:	4b79      	ldr	r3, [pc, #484]	; (8004620 <_vfiprintf_r+0x248>)
 800443a:	429d      	cmp	r5, r3
 800443c:	bf08      	it	eq
 800443e:	68f5      	ldreq	r5, [r6, #12]
 8004440:	e7da      	b.n	80043f8 <_vfiprintf_r+0x20>
 8004442:	89ab      	ldrh	r3, [r5, #12]
 8004444:	0598      	lsls	r0, r3, #22
 8004446:	d4ed      	bmi.n	8004424 <_vfiprintf_r+0x4c>
 8004448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800444a:	f7ff fe54 	bl	80040f6 <__retarget_lock_release_recursive>
 800444e:	e7e9      	b.n	8004424 <_vfiprintf_r+0x4c>
 8004450:	2300      	movs	r3, #0
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	2320      	movs	r3, #32
 8004456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800445a:	f8cd 800c 	str.w	r8, [sp, #12]
 800445e:	2330      	movs	r3, #48	; 0x30
 8004460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004624 <_vfiprintf_r+0x24c>
 8004464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004468:	f04f 0901 	mov.w	r9, #1
 800446c:	4623      	mov	r3, r4
 800446e:	469a      	mov	sl, r3
 8004470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004474:	b10a      	cbz	r2, 800447a <_vfiprintf_r+0xa2>
 8004476:	2a25      	cmp	r2, #37	; 0x25
 8004478:	d1f9      	bne.n	800446e <_vfiprintf_r+0x96>
 800447a:	ebba 0b04 	subs.w	fp, sl, r4
 800447e:	d00b      	beq.n	8004498 <_vfiprintf_r+0xc0>
 8004480:	465b      	mov	r3, fp
 8004482:	4622      	mov	r2, r4
 8004484:	4629      	mov	r1, r5
 8004486:	4630      	mov	r0, r6
 8004488:	f7ff ff93 	bl	80043b2 <__sfputs_r>
 800448c:	3001      	adds	r0, #1
 800448e:	f000 80aa 	beq.w	80045e6 <_vfiprintf_r+0x20e>
 8004492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004494:	445a      	add	r2, fp
 8004496:	9209      	str	r2, [sp, #36]	; 0x24
 8004498:	f89a 3000 	ldrb.w	r3, [sl]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80a2 	beq.w	80045e6 <_vfiprintf_r+0x20e>
 80044a2:	2300      	movs	r3, #0
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ac:	f10a 0a01 	add.w	sl, sl, #1
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	9307      	str	r3, [sp, #28]
 80044b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b8:	931a      	str	r3, [sp, #104]	; 0x68
 80044ba:	4654      	mov	r4, sl
 80044bc:	2205      	movs	r2, #5
 80044be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c2:	4858      	ldr	r0, [pc, #352]	; (8004624 <_vfiprintf_r+0x24c>)
 80044c4:	f7fb fe84 	bl	80001d0 <memchr>
 80044c8:	9a04      	ldr	r2, [sp, #16]
 80044ca:	b9d8      	cbnz	r0, 8004504 <_vfiprintf_r+0x12c>
 80044cc:	06d1      	lsls	r1, r2, #27
 80044ce:	bf44      	itt	mi
 80044d0:	2320      	movmi	r3, #32
 80044d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d6:	0713      	lsls	r3, r2, #28
 80044d8:	bf44      	itt	mi
 80044da:	232b      	movmi	r3, #43	; 0x2b
 80044dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e0:	f89a 3000 	ldrb.w	r3, [sl]
 80044e4:	2b2a      	cmp	r3, #42	; 0x2a
 80044e6:	d015      	beq.n	8004514 <_vfiprintf_r+0x13c>
 80044e8:	9a07      	ldr	r2, [sp, #28]
 80044ea:	4654      	mov	r4, sl
 80044ec:	2000      	movs	r0, #0
 80044ee:	f04f 0c0a 	mov.w	ip, #10
 80044f2:	4621      	mov	r1, r4
 80044f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f8:	3b30      	subs	r3, #48	; 0x30
 80044fa:	2b09      	cmp	r3, #9
 80044fc:	d94e      	bls.n	800459c <_vfiprintf_r+0x1c4>
 80044fe:	b1b0      	cbz	r0, 800452e <_vfiprintf_r+0x156>
 8004500:	9207      	str	r2, [sp, #28]
 8004502:	e014      	b.n	800452e <_vfiprintf_r+0x156>
 8004504:	eba0 0308 	sub.w	r3, r0, r8
 8004508:	fa09 f303 	lsl.w	r3, r9, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	9304      	str	r3, [sp, #16]
 8004510:	46a2      	mov	sl, r4
 8004512:	e7d2      	b.n	80044ba <_vfiprintf_r+0xe2>
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	1d19      	adds	r1, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	9103      	str	r1, [sp, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	bfbb      	ittet	lt
 8004520:	425b      	neglt	r3, r3
 8004522:	f042 0202 	orrlt.w	r2, r2, #2
 8004526:	9307      	strge	r3, [sp, #28]
 8004528:	9307      	strlt	r3, [sp, #28]
 800452a:	bfb8      	it	lt
 800452c:	9204      	strlt	r2, [sp, #16]
 800452e:	7823      	ldrb	r3, [r4, #0]
 8004530:	2b2e      	cmp	r3, #46	; 0x2e
 8004532:	d10c      	bne.n	800454e <_vfiprintf_r+0x176>
 8004534:	7863      	ldrb	r3, [r4, #1]
 8004536:	2b2a      	cmp	r3, #42	; 0x2a
 8004538:	d135      	bne.n	80045a6 <_vfiprintf_r+0x1ce>
 800453a:	9b03      	ldr	r3, [sp, #12]
 800453c:	1d1a      	adds	r2, r3, #4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	9203      	str	r2, [sp, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfb8      	it	lt
 8004546:	f04f 33ff 	movlt.w	r3, #4294967295
 800454a:	3402      	adds	r4, #2
 800454c:	9305      	str	r3, [sp, #20]
 800454e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004634 <_vfiprintf_r+0x25c>
 8004552:	7821      	ldrb	r1, [r4, #0]
 8004554:	2203      	movs	r2, #3
 8004556:	4650      	mov	r0, sl
 8004558:	f7fb fe3a 	bl	80001d0 <memchr>
 800455c:	b140      	cbz	r0, 8004570 <_vfiprintf_r+0x198>
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	eba0 000a 	sub.w	r0, r0, sl
 8004564:	fa03 f000 	lsl.w	r0, r3, r0
 8004568:	9b04      	ldr	r3, [sp, #16]
 800456a:	4303      	orrs	r3, r0
 800456c:	3401      	adds	r4, #1
 800456e:	9304      	str	r3, [sp, #16]
 8004570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004574:	482c      	ldr	r0, [pc, #176]	; (8004628 <_vfiprintf_r+0x250>)
 8004576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800457a:	2206      	movs	r2, #6
 800457c:	f7fb fe28 	bl	80001d0 <memchr>
 8004580:	2800      	cmp	r0, #0
 8004582:	d03f      	beq.n	8004604 <_vfiprintf_r+0x22c>
 8004584:	4b29      	ldr	r3, [pc, #164]	; (800462c <_vfiprintf_r+0x254>)
 8004586:	bb1b      	cbnz	r3, 80045d0 <_vfiprintf_r+0x1f8>
 8004588:	9b03      	ldr	r3, [sp, #12]
 800458a:	3307      	adds	r3, #7
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	3308      	adds	r3, #8
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004596:	443b      	add	r3, r7
 8004598:	9309      	str	r3, [sp, #36]	; 0x24
 800459a:	e767      	b.n	800446c <_vfiprintf_r+0x94>
 800459c:	fb0c 3202 	mla	r2, ip, r2, r3
 80045a0:	460c      	mov	r4, r1
 80045a2:	2001      	movs	r0, #1
 80045a4:	e7a5      	b.n	80044f2 <_vfiprintf_r+0x11a>
 80045a6:	2300      	movs	r3, #0
 80045a8:	3401      	adds	r4, #1
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	4619      	mov	r1, r3
 80045ae:	f04f 0c0a 	mov.w	ip, #10
 80045b2:	4620      	mov	r0, r4
 80045b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045b8:	3a30      	subs	r2, #48	; 0x30
 80045ba:	2a09      	cmp	r2, #9
 80045bc:	d903      	bls.n	80045c6 <_vfiprintf_r+0x1ee>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0c5      	beq.n	800454e <_vfiprintf_r+0x176>
 80045c2:	9105      	str	r1, [sp, #20]
 80045c4:	e7c3      	b.n	800454e <_vfiprintf_r+0x176>
 80045c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ca:	4604      	mov	r4, r0
 80045cc:	2301      	movs	r3, #1
 80045ce:	e7f0      	b.n	80045b2 <_vfiprintf_r+0x1da>
 80045d0:	ab03      	add	r3, sp, #12
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	462a      	mov	r2, r5
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <_vfiprintf_r+0x258>)
 80045d8:	a904      	add	r1, sp, #16
 80045da:	4630      	mov	r0, r6
 80045dc:	f3af 8000 	nop.w
 80045e0:	4607      	mov	r7, r0
 80045e2:	1c78      	adds	r0, r7, #1
 80045e4:	d1d6      	bne.n	8004594 <_vfiprintf_r+0x1bc>
 80045e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045e8:	07d9      	lsls	r1, r3, #31
 80045ea:	d405      	bmi.n	80045f8 <_vfiprintf_r+0x220>
 80045ec:	89ab      	ldrh	r3, [r5, #12]
 80045ee:	059a      	lsls	r2, r3, #22
 80045f0:	d402      	bmi.n	80045f8 <_vfiprintf_r+0x220>
 80045f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f4:	f7ff fd7f 	bl	80040f6 <__retarget_lock_release_recursive>
 80045f8:	89ab      	ldrh	r3, [r5, #12]
 80045fa:	065b      	lsls	r3, r3, #25
 80045fc:	f53f af12 	bmi.w	8004424 <_vfiprintf_r+0x4c>
 8004600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004602:	e711      	b.n	8004428 <_vfiprintf_r+0x50>
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	462a      	mov	r2, r5
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <_vfiprintf_r+0x258>)
 800460c:	a904      	add	r1, sp, #16
 800460e:	4630      	mov	r0, r6
 8004610:	f000 f880 	bl	8004714 <_printf_i>
 8004614:	e7e4      	b.n	80045e0 <_vfiprintf_r+0x208>
 8004616:	bf00      	nop
 8004618:	08004bcc 	.word	0x08004bcc
 800461c:	08004bec 	.word	0x08004bec
 8004620:	08004bac 	.word	0x08004bac
 8004624:	08004c0c 	.word	0x08004c0c
 8004628:	08004c16 	.word	0x08004c16
 800462c:	00000000 	.word	0x00000000
 8004630:	080043b3 	.word	0x080043b3
 8004634:	08004c12 	.word	0x08004c12

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4699      	mov	r9, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004694:	4649      	mov	r1, r9
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	68e5      	ldr	r5, [r4, #12]
 80046a2:	6832      	ldr	r2, [r6, #0]
 80046a4:	f003 0306 	and.w	r3, r3, #6
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	bf08      	it	eq
 80046ac:	1aad      	subeq	r5, r5, r2
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4649      	mov	r1, r9
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c0      	blx	r8
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	; 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	7e0f      	ldrb	r7, [r1, #24]
 800471a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800471c:	2f78      	cmp	r7, #120	; 0x78
 800471e:	4691      	mov	r9, r2
 8004720:	4680      	mov	r8, r0
 8004722:	460c      	mov	r4, r1
 8004724:	469a      	mov	sl, r3
 8004726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	; 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d8 	beq.w	80048e6 <_printf_i+0x1d2>
 8004736:	2f58      	cmp	r7, #88	; 0x58
 8004738:	f000 80a3 	beq.w	8004882 <_printf_i+0x16e>
 800473c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a101      	add	r1, pc, #4	; (adr r1, 8004754 <_printf_i+0x40>)
 8004750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048cd 	.word	0x080048cd
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080048af 	.word	0x080048af
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048ef 	.word	0x080048ef
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	080048b7 	.word	0x080048b7
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e0a3      	b.n	8004908 <_printf_i+0x1f4>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	6829      	ldr	r1, [r5, #0]
 80047c4:	0606      	lsls	r6, r0, #24
 80047c6:	f101 0304 	add.w	r3, r1, #4
 80047ca:	d50a      	bpl.n	80047e2 <_printf_i+0xce>
 80047cc:	680e      	ldr	r6, [r1, #0]
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	2e00      	cmp	r6, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xc8>
 80047d4:	232d      	movs	r3, #45	; 0x2d
 80047d6:	4276      	negs	r6, r6
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	485e      	ldr	r0, [pc, #376]	; (8004958 <_printf_i+0x244>)
 80047de:	230a      	movs	r3, #10
 80047e0:	e019      	b.n	8004816 <_printf_i+0x102>
 80047e2:	680e      	ldr	r6, [r1, #0]
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ea:	bf18      	it	ne
 80047ec:	b236      	sxthne	r6, r6
 80047ee:	e7ef      	b.n	80047d0 <_printf_i+0xbc>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	6820      	ldr	r0, [r4, #0]
 80047f4:	1d19      	adds	r1, r3, #4
 80047f6:	6029      	str	r1, [r5, #0]
 80047f8:	0601      	lsls	r1, r0, #24
 80047fa:	d501      	bpl.n	8004800 <_printf_i+0xec>
 80047fc:	681e      	ldr	r6, [r3, #0]
 80047fe:	e002      	b.n	8004806 <_printf_i+0xf2>
 8004800:	0646      	lsls	r6, r0, #25
 8004802:	d5fb      	bpl.n	80047fc <_printf_i+0xe8>
 8004804:	881e      	ldrh	r6, [r3, #0]
 8004806:	4854      	ldr	r0, [pc, #336]	; (8004958 <_printf_i+0x244>)
 8004808:	2f6f      	cmp	r7, #111	; 0x6f
 800480a:	bf0c      	ite	eq
 800480c:	2308      	moveq	r3, #8
 800480e:	230a      	movne	r3, #10
 8004810:	2100      	movs	r1, #0
 8004812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004816:	6865      	ldr	r5, [r4, #4]
 8004818:	60a5      	str	r5, [r4, #8]
 800481a:	2d00      	cmp	r5, #0
 800481c:	bfa2      	ittt	ge
 800481e:	6821      	ldrge	r1, [r4, #0]
 8004820:	f021 0104 	bicge.w	r1, r1, #4
 8004824:	6021      	strge	r1, [r4, #0]
 8004826:	b90e      	cbnz	r6, 800482c <_printf_i+0x118>
 8004828:	2d00      	cmp	r5, #0
 800482a:	d04d      	beq.n	80048c8 <_printf_i+0x1b4>
 800482c:	4615      	mov	r5, r2
 800482e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004832:	fb03 6711 	mls	r7, r3, r1, r6
 8004836:	5dc7      	ldrb	r7, [r0, r7]
 8004838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800483c:	4637      	mov	r7, r6
 800483e:	42bb      	cmp	r3, r7
 8004840:	460e      	mov	r6, r1
 8004842:	d9f4      	bls.n	800482e <_printf_i+0x11a>
 8004844:	2b08      	cmp	r3, #8
 8004846:	d10b      	bne.n	8004860 <_printf_i+0x14c>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	07de      	lsls	r6, r3, #31
 800484c:	d508      	bpl.n	8004860 <_printf_i+0x14c>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	4299      	cmp	r1, r3
 8004854:	bfde      	ittt	le
 8004856:	2330      	movle	r3, #48	; 0x30
 8004858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800485c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004860:	1b52      	subs	r2, r2, r5
 8004862:	6122      	str	r2, [r4, #16]
 8004864:	f8cd a000 	str.w	sl, [sp]
 8004868:	464b      	mov	r3, r9
 800486a:	aa03      	add	r2, sp, #12
 800486c:	4621      	mov	r1, r4
 800486e:	4640      	mov	r0, r8
 8004870:	f7ff fee2 	bl	8004638 <_printf_common>
 8004874:	3001      	adds	r0, #1
 8004876:	d14c      	bne.n	8004912 <_printf_i+0x1fe>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	b004      	add	sp, #16
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	4835      	ldr	r0, [pc, #212]	; (8004958 <_printf_i+0x244>)
 8004884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004888:	6829      	ldr	r1, [r5, #0]
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004890:	6029      	str	r1, [r5, #0]
 8004892:	061d      	lsls	r5, r3, #24
 8004894:	d514      	bpl.n	80048c0 <_printf_i+0x1ac>
 8004896:	07df      	lsls	r7, r3, #31
 8004898:	bf44      	itt	mi
 800489a:	f043 0320 	orrmi.w	r3, r3, #32
 800489e:	6023      	strmi	r3, [r4, #0]
 80048a0:	b91e      	cbnz	r6, 80048aa <_printf_i+0x196>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f023 0320 	bic.w	r3, r3, #32
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	2310      	movs	r3, #16
 80048ac:	e7b0      	b.n	8004810 <_printf_i+0xfc>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	2378      	movs	r3, #120	; 0x78
 80048b8:	4828      	ldr	r0, [pc, #160]	; (800495c <_printf_i+0x248>)
 80048ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048be:	e7e3      	b.n	8004888 <_printf_i+0x174>
 80048c0:	0659      	lsls	r1, r3, #25
 80048c2:	bf48      	it	mi
 80048c4:	b2b6      	uxthmi	r6, r6
 80048c6:	e7e6      	b.n	8004896 <_printf_i+0x182>
 80048c8:	4615      	mov	r5, r2
 80048ca:	e7bb      	b.n	8004844 <_printf_i+0x130>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	6826      	ldr	r6, [r4, #0]
 80048d0:	6961      	ldr	r1, [r4, #20]
 80048d2:	1d18      	adds	r0, r3, #4
 80048d4:	6028      	str	r0, [r5, #0]
 80048d6:	0635      	lsls	r5, r6, #24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	d501      	bpl.n	80048e0 <_printf_i+0x1cc>
 80048dc:	6019      	str	r1, [r3, #0]
 80048de:	e002      	b.n	80048e6 <_printf_i+0x1d2>
 80048e0:	0670      	lsls	r0, r6, #25
 80048e2:	d5fb      	bpl.n	80048dc <_printf_i+0x1c8>
 80048e4:	8019      	strh	r1, [r3, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	4615      	mov	r5, r2
 80048ec:	e7ba      	b.n	8004864 <_printf_i+0x150>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	602a      	str	r2, [r5, #0]
 80048f4:	681d      	ldr	r5, [r3, #0]
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7fb fc68 	bl	80001d0 <memchr>
 8004900:	b108      	cbz	r0, 8004906 <_printf_i+0x1f2>
 8004902:	1b40      	subs	r0, r0, r5
 8004904:	6060      	str	r0, [r4, #4]
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	2300      	movs	r3, #0
 800490c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004910:	e7a8      	b.n	8004864 <_printf_i+0x150>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	462a      	mov	r2, r5
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d0ab      	beq.n	8004878 <_printf_i+0x164>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	079b      	lsls	r3, r3, #30
 8004924:	d413      	bmi.n	800494e <_printf_i+0x23a>
 8004926:	68e0      	ldr	r0, [r4, #12]
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	4298      	cmp	r0, r3
 800492c:	bfb8      	it	lt
 800492e:	4618      	movlt	r0, r3
 8004930:	e7a4      	b.n	800487c <_printf_i+0x168>
 8004932:	2301      	movs	r3, #1
 8004934:	4632      	mov	r2, r6
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d09b      	beq.n	8004878 <_printf_i+0x164>
 8004940:	3501      	adds	r5, #1
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	9903      	ldr	r1, [sp, #12]
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	42ab      	cmp	r3, r5
 800494a:	dcf2      	bgt.n	8004932 <_printf_i+0x21e>
 800494c:	e7eb      	b.n	8004926 <_printf_i+0x212>
 800494e:	2500      	movs	r5, #0
 8004950:	f104 0619 	add.w	r6, r4, #25
 8004954:	e7f5      	b.n	8004942 <_printf_i+0x22e>
 8004956:	bf00      	nop
 8004958:	08004c1d 	.word	0x08004c1d
 800495c:	08004c2e 	.word	0x08004c2e

08004960 <_sbrk_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4d06      	ldr	r5, [pc, #24]	; (800497c <_sbrk_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4604      	mov	r4, r0
 8004968:	4608      	mov	r0, r1
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fc f8fa 	bl	8000b64 <_sbrk>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_sbrk_r+0x1a>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_sbrk_r+0x1a>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20012e24 	.word	0x20012e24

08004980 <__sread>:
 8004980:	b510      	push	{r4, lr}
 8004982:	460c      	mov	r4, r1
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	f000 f8a0 	bl	8004acc <_read_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	bfab      	itete	ge
 8004990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004992:	89a3      	ldrhlt	r3, [r4, #12]
 8004994:	181b      	addge	r3, r3, r0
 8004996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800499a:	bfac      	ite	ge
 800499c:	6563      	strge	r3, [r4, #84]	; 0x54
 800499e:	81a3      	strhlt	r3, [r4, #12]
 80049a0:	bd10      	pop	{r4, pc}

080049a2 <__swrite>:
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	461f      	mov	r7, r3
 80049a8:	898b      	ldrh	r3, [r1, #12]
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	4605      	mov	r5, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	4616      	mov	r6, r2
 80049b2:	d505      	bpl.n	80049c0 <__swrite+0x1e>
 80049b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b8:	2302      	movs	r3, #2
 80049ba:	2200      	movs	r2, #0
 80049bc:	f000 f868 	bl	8004a90 <_lseek_r>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	4628      	mov	r0, r5
 80049d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	f000 b817 	b.w	8004a08 <_write_r>

080049da <__sseek>:
 80049da:	b510      	push	{r4, lr}
 80049dc:	460c      	mov	r4, r1
 80049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e2:	f000 f855 	bl	8004a90 <_lseek_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	bf15      	itete	ne
 80049ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80049ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049f6:	81a3      	strheq	r3, [r4, #12]
 80049f8:	bf18      	it	ne
 80049fa:	81a3      	strhne	r3, [r4, #12]
 80049fc:	bd10      	pop	{r4, pc}

080049fe <__sclose>:
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 b813 	b.w	8004a2c <_close_r>
	...

08004a08 <_write_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d07      	ldr	r5, [pc, #28]	; (8004a28 <_write_r+0x20>)
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	4608      	mov	r0, r1
 8004a10:	4611      	mov	r1, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	602a      	str	r2, [r5, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f7fc f853 	bl	8000ac2 <_write>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_write_r+0x1e>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_write_r+0x1e>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20012e24 	.word	0x20012e24

08004a2c <_close_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4d06      	ldr	r5, [pc, #24]	; (8004a48 <_close_r+0x1c>)
 8004a30:	2300      	movs	r3, #0
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fc f85f 	bl	8000afa <_close>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_close_r+0x1a>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_close_r+0x1a>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20012e24 	.word	0x20012e24

08004a4c <_fstat_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4d07      	ldr	r5, [pc, #28]	; (8004a6c <_fstat_r+0x20>)
 8004a50:	2300      	movs	r3, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	f7fc f85a 	bl	8000b12 <_fstat>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	d102      	bne.n	8004a68 <_fstat_r+0x1c>
 8004a62:	682b      	ldr	r3, [r5, #0]
 8004a64:	b103      	cbz	r3, 8004a68 <_fstat_r+0x1c>
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20012e24 	.word	0x20012e24

08004a70 <_isatty_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d06      	ldr	r5, [pc, #24]	; (8004a8c <_isatty_r+0x1c>)
 8004a74:	2300      	movs	r3, #0
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	f7fc f859 	bl	8000b32 <_isatty>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_isatty_r+0x1a>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_isatty_r+0x1a>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20012e24 	.word	0x20012e24

08004a90 <_lseek_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	; (8004ab0 <_lseek_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fc f852 	bl	8000b48 <_lseek>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_lseek_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_lseek_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	20012e24 	.word	0x20012e24

08004ab4 <__malloc_lock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__malloc_lock+0x8>)
 8004ab6:	f7ff bb1d 	b.w	80040f4 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20012e18 	.word	0x20012e18

08004ac0 <__malloc_unlock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_unlock+0x8>)
 8004ac2:	f7ff bb18 	b.w	80040f6 <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20012e18 	.word	0x20012e18

08004acc <_read_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_read_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fb ffd4 	bl	8000a88 <_read>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_read_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_read_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20012e24 	.word	0x20012e24

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
