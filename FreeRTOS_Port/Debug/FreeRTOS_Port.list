
FreeRTOS_Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a10  08004a10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a18  08004a18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012db4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e2c  20012e2c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d273  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002257  00000000  00000000  0002d31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a4a  00000000  00000000  00030f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f65e  00000000  00000000  0003397a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d17c7  00000000  00000000  00042fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011479f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ec8  00000000  00000000  001147f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048a0 	.word	0x080048a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080048a0 	.word	0x080048a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <myTask1>:
 * @brief : A FreeRTOS Task Handler example.
 * @param : A void argument pointer.
 * @return: None.
 */
void myTask1(void *p)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
	TickType_t myLastUnblock;

	while(1){
		printf("In Task 1 : count is %d\r\n", count++);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60fa      	str	r2, [r7, #12]
 8000586:	4619      	mov	r1, r3
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <myTask1+0x34>)
 800058a:	f003 f985 	bl	8003898 <iprintf>
		//vTaskDelay(1000);  // This is not accurate, its based on the no. of systicks not seconds or milliseconds.
		//vTaskDelay(1000 * configTICK_RATE_HZ / 1000); //This is in milliseconds.
		vTaskDelay(pdMS_TO_TICKS(3000)); //This function i.e. pdMS_TO_TICKS can be used instead of the above equation, it also gives delay in milliseconds.
 800058e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000592:	f002 f831 	bl	80025f8 <vTaskDelay>
		/*Pls note that vTaskDelay is not very accurate,
		 * for accurate delays in ms you can use vTaskDelayUntil
		 * as shown below */
		//myLastUnblock = xTaskGetTickCount();
		//vTaskDelayUntil(&myLastUnblock, pdMS_TO_TICKS(1000));
		if (count >= 30){
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b1d      	cmp	r3, #29
 800059a:	ddf1      	ble.n	8000580 <myTask1+0xc>
			vTaskDelete(myTask1Handle);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <myTask1+0x38>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 ff95 	bl	80024d0 <vTaskDelete>
		printf("In Task 1 : count is %d\r\n", count++);
 80005a6:	e7eb      	b.n	8000580 <myTask1+0xc>
 80005a8:	080048b8 	.word	0x080048b8
 80005ac:	20000094 	.word	0x20000094

080005b0 <myTask2>:
 * @brief : A FreeRTOS Task Handler example with a single argument handled.
 * @param : A void argument pointer.
 * @return: None.
 */
void myTask2(void *p)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	//int count = (int *)p;
	int count = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
	TickType_t myLastUnblock;

	while(1){
		printf("In Task 2 count is %d\r\n", count++);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	60fa      	str	r2, [r7, #12]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <myTask2+0x34>)
 80005c6:	f003 f967 	bl	8003898 <iprintf>
		//vTaskDelay(1000);
		//vTaskDelay(1000 * configTICK_RATE_HZ / 1000); //This is in milliseconds.
		vTaskDelay(pdMS_TO_TICKS(3000));
 80005ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ce:	f002 f813 	bl	80025f8 <vTaskDelay>
		//myLastUnblock = xTaskGetTickCount();
		//vTaskDelayUntil(&myLastUnblock, pdMS_TO_TICKS(1000));
		if (count >= 30){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b1d      	cmp	r3, #29
 80005d6:	ddf1      	ble.n	80005bc <myTask2+0xc>
			vTaskDelete(myTask2Handle);
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <myTask2+0x38>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 ff77 	bl	80024d0 <vTaskDelete>
		printf("In Task 2 count is %d\r\n", count++);
 80005e2:	e7eb      	b.n	80005bc <myTask2+0xc>
 80005e4:	080048d4 	.word	0x080048d4
 80005e8:	20000098 	.word	0x20000098

080005ec <button_init>:
 * @brief : Configure on discovery board Button for interrupt.
 * @param : None.
 * @return: None.
 * */
void button_init()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <button_init+0x54>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <button_init+0x54>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <button_init+0x54>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800060e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000612:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pin = GPIO_PIN_0;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <button_init+0x58>)
 8000622:	f000 fc39 	bl	8000e98 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	210a      	movs	r1, #10
 800062a:	2006      	movs	r0, #6
 800062c:	f000 fc0a 	bl	8000e44 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 fc23 	bl	8000e7c <HAL_NVIC_EnableIRQ>
}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <_EXTI0_IRQHandler>:
/*
 * @brief : Interrupt Service Routine for User Button on Discovery Board.
 * @param : None.
 * */
void _EXTI0_IRQHandler()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	BaseType_t checkIfYieldIsRequired;

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fdd8 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
	checkIfYieldIsRequired = xTaskResumeFromISR(myIntTaskHandle);
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <_EXTI0_IRQHandler+0x38>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f833 	bl	80026c4 <xTaskResumeFromISR>
 800065e:	6078      	str	r0, [r7, #4]
	portYIELD_FROM_ISR(checkIfYieldIsRequired);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <_EXTI0_IRQHandler+0x2e>
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <_EXTI0_IRQHandler+0x3c>)
 8000668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	f3bf 8f6f 	isb	sy

}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c
 8000684:	e000ed04 	.word	0xe000ed04

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fadf 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f849 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f8a5 	bl	80007e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int pass = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
  printf("Hello RTOS\r\n");
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <main+0x78>)
 80006a0:	f003 f980 	bl	80039a4 <puts>
  button_init();
 80006a4:	f7ff ffa2 	bl	80005ec <button_init>
   * @param3: Stack Size is in words,not in bytes.
   * @param4: Argument(s) to be passed to the task handler.
   * @param5: Priority of the task can be 0,1,2,3,4 here a macro is used for zero.
   * @param6: Pointer to a handle for the task.
   * */
  xReturn = xTaskCreate(myTask1, "Task1", 200, (void *) 0, tskIDLE_PRIORITY, &myTask1Handle);
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <main+0x7c>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2300      	movs	r3, #0
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2300      	movs	r3, #0
 80006b2:	22c8      	movs	r2, #200	; 0xc8
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <main+0x80>)
 80006b6:	4815      	ldr	r0, [pc, #84]	; (800070c <main+0x84>)
 80006b8:	f001 fda0 	bl	80021fc <xTaskCreate>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0x88>)
 80006c0:	6013      	str	r3, [r2, #0]
  if (xReturn != pdPASS) {
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <main+0x88>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d002      	beq.n	80006d0 <main+0x48>
	  printf("Error creating task1!!!");
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x8c>)
 80006cc:	f003 f8e4 	bl	8003898 <iprintf>
  }
  xReturn = xTaskCreate(myTask2, "Task2", 200, (void *) 0, tskIDLE_PRIORITY, &myTask2Handle);
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <main+0x90>)
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2300      	movs	r3, #0
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	22c8      	movs	r2, #200	; 0xc8
 80006dc:	490f      	ldr	r1, [pc, #60]	; (800071c <main+0x94>)
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0x98>)
 80006e0:	f001 fd8c 	bl	80021fc <xTaskCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0x88>)
 80006e8:	6013      	str	r3, [r2, #0]
    if (xReturn != pdPASS) {
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <main+0x88>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d002      	beq.n	80006f8 <main+0x70>
  	  printf("Error creating task2!!!");
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <main+0x9c>)
 80006f4:	f003 f8d0 	bl	8003898 <iprintf>
   xReturn = xTaskCreate(myIntTask, "IntTask", 200, (void *) 0, tskIDLE_PRIORITY, &myIntTaskHandle);
   if (xReturn != pdPASS) {
      printf("Error creating IntTask!!!");
   }
#endif
  vTaskStartScheduler();
 80006f8:	f002 f882 	bl	8002800 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x74>
 80006fe:	bf00      	nop
 8000700:	0800490c 	.word	0x0800490c
 8000704:	20000094 	.word	0x20000094
 8000708:	08004918 	.word	0x08004918
 800070c:	08000575 	.word	0x08000575
 8000710:	200000a0 	.word	0x200000a0
 8000714:	08004920 	.word	0x08004920
 8000718:	20000098 	.word	0x20000098
 800071c:	08004938 	.word	0x08004938
 8000720:	080005b1 	.word	0x080005b1
 8000724:	08004940 	.word	0x08004940

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 f8a6 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <SystemClock_Config+0xb4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <SystemClock_Config+0xb4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <SystemClock_Config+0xb4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <SystemClock_Config+0xb8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <SystemClock_Config+0xb8>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <SystemClock_Config+0xb8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fd57 	bl	800124c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007a4:	f000 f878 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 ffba 	bl	800173c <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ce:	f000 f863 	bl	8000898 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	; 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_GPIO_Init+0x88>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <MX_GPIO_Init+0x88>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0x88>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081a:	4815      	ldr	r0, [pc, #84]	; (8000870 <MX_GPIO_Init+0x8c>)
 800081c:	f000 fcd8 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_GPIO_Init+0x8c>)
 8000834:	f000 fb30 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800083c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <MX_GPIO_Init+0x8c>)
 8000850:	f000 fb22 	bl	8000e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2006      	movs	r0, #6
 800085a:	f000 faf3 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800085e:	2006      	movs	r0, #6
 8000860:	f000 fb0c 	bl	8000e7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000

08000874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000886:	f000 fa05 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40000800 	.word	0x40000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_InitTick+0xe4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a32      	ldr	r2, [pc, #200]	; (80009d8 <HAL_InitTick+0xe4>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_InitTick+0xe4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000920:	f107 0210 	add.w	r2, r7, #16
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f001 f8d2 	bl	8001ad4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093a:	f001 f8b7 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 800093e:	6378      	str	r0, [r7, #52]	; 0x34
 8000940:	e004      	b.n	800094c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000942:	f001 f8b3 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8000946:	4603      	mov	r3, r0
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <HAL_InitTick+0xe8>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	0c9b      	lsrs	r3, r3, #18
 8000956:	3b01      	subs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_InitTick+0xec>)
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <HAL_InitTick+0xf0>)
 800095e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_InitTick+0xec>)
 8000962:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000966:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <HAL_InitTick+0xec>)
 800096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_InitTick+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_InitTick+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_InitTick+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_InitTick+0xec>)
 8000982:	f001 f8d9 	bl	8001b38 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800098c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11b      	bne.n	80009cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <HAL_InitTick+0xec>)
 8000996:	f001 f929 	bl	8001bec <HAL_TIM_Base_Start_IT>
 800099a:	4603      	mov	r3, r0
 800099c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d111      	bne.n	80009cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009a8:	201e      	movs	r0, #30
 80009aa:	f000 fa67 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d808      	bhi.n	80009c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	201e      	movs	r0, #30
 80009ba:	f000 fa43 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_InitTick+0xf4>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e002      	b.n	80009cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3738      	adds	r7, #56	; 0x38
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200000a4 	.word	0x200000a4
 80009e4:	40000800 	.word	0x40000800
 80009e8:	20000004 	.word	0x20000004

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  _EXTI0_IRQHandler();
 8000a1c:	f7ff fe14 	bl	8000648 <_EXTI0_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fbef 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM4_IRQHandler+0x10>)
 8000a32:	f001 f94b 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000a4 	.word	0x200000a4

08000a40 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <ITM_SendChar+0x48>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <ITM_SendChar+0x48>)
 8000a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a54:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <ITM_SendChar+0x4c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <ITM_SendChar+0x4c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a62:	bf00      	nop
 8000a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f8      	beq.n	8000a64 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000edfc 	.word	0xe000edfc
 8000a8c:	e0000e00 	.word	0xe0000e00

08000a90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00a      	b.n	8000ab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aa2:	f3af 8000 	nop.w
 8000aa6:	4601      	mov	r1, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf0      	blt.n	8000aa2 <_read+0x12>
	}

return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	e009      	b.n	8000af0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffab 	bl	8000a40 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf1      	blt.n	8000adc <_write+0x12>
	}
	return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_isatty>:

int _isatty(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f002 fe4a 	bl	8003834 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20020000 	.word	0x20020000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	200000ec 	.word	0x200000ec
 8000bd4:	20012e30 	.word	0x20012e30

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fe09 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd2b 	bl	8000688 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c40:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 8000c44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c48:	20012e2c 	.word	0x20012e2c

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff fe38 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe0e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200000f0 	.word	0x200000f0

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200000f0 	.word	0x200000f0

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f806 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcda 	bl	8000cbc <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcd6 	bl	8000cbc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcc6 	bl	8000cbc <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fcc2 	bl	8000cbc <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc7b 	bl	8000cbc <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc77 	bl	8000cbc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc5a 	bl	8000cbc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc56 	bl	8000cbc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc3a 	bl	8000cbc <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc36 	bl	8000cbc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc23 	bl	8000cbc <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc1f 	bl	8000cbc <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fbdf 	bl	8000cbc <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbdb 	bl	8000cbc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fba0 	bl	8000cbc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fb9c 	bl	8000cbc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fb8a 	bl	8000cbc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb86 	bl	8000cbc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb5a 	bl	8000cbc <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb56 	bl	8000cbc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb2f 	bl	8000cbc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb2b 	bl	8000cbc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb18 	bl	8000cbc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb14 	bl	8000cbc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa46 	bl	8000cbc <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa42 	bl	8000cbc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f806 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08004960 	.word	0x08004960
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b090      	sub	sp, #64	; 0x40
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80a1 	bhi.w	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e09b      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001940:	e09b      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001946:	e098      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d028      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	627a      	str	r2, [r7, #36]	; 0x24
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001970:	2100      	movs	r1, #0
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001974:	fb03 f201 	mul.w	r2, r3, r1
 8001978:	2300      	movs	r3, #0
 800197a:	fb00 f303 	mul.w	r3, r0, r3
 800197e:	4413      	add	r3, r2
 8001980:	4a43      	ldr	r2, [pc, #268]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001982:	fba0 1202 	umull	r1, r2, r0, r2
 8001986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001988:	460a      	mov	r2, r1
 800198a:	62ba      	str	r2, [r7, #40]	; 0x28
 800198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198e:	4413      	add	r3, r2
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	2200      	movs	r2, #0
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	61fa      	str	r2, [r7, #28]
 800199a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800199e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019a2:	f7fe fc65 	bl	8000270 <__aeabi_uldivmod>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4613      	mov	r3, r2
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ae:	e053      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019c2:	f04f 0b00 	mov.w	fp, #0
 80019c6:	4652      	mov	r2, sl
 80019c8:	465b      	mov	r3, fp
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0159      	lsls	r1, r3, #5
 80019d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d8:	0150      	lsls	r0, r2, #5
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ebb2 080a 	subs.w	r8, r2, sl
 80019e2:	eb63 090b 	sbc.w	r9, r3, fp
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019fa:	ebb2 0408 	subs.w	r4, r2, r8
 80019fe:	eb63 0509 	sbc.w	r5, r3, r9
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	00eb      	lsls	r3, r5, #3
 8001a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a10:	00e2      	lsls	r2, r4, #3
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	eb14 030a 	adds.w	r3, r4, sl
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	eb45 030b 	adc.w	r3, r5, fp
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	028b      	lsls	r3, r1, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a38:	4621      	mov	r1, r4
 8001a3a:	028a      	lsls	r2, r1, #10
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	2200      	movs	r2, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a4c:	f7fe fc10 	bl	8000270 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3740      	adds	r7, #64	; 0x40
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	017d7840 	.word	0x017d7840

08001a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff0 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08004970 	.word	0x08004970

08001ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCC_GetClockConfig+0x60>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e041      	b.n	8001bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f839 	bl	8001bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f000 f9d8 	bl	8001f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e04e      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d022      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d01d      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d018      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d010      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8e:	e007      	b.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00
 8001cc0:	40010400 	.word	0x40010400
 8001cc4:	40014000 	.word	0x40014000
 8001cc8:	40001800 	.word	0x40001800

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8ee 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e0 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8f1 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0204 	mvn.w	r2, #4
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c4 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b6 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8c7 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89a 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f88c 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f89d 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0210 	mvn.w	r2, #16
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f870 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f862 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f873 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd12 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b80      	cmp	r3, #128	; 0x80
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f902 	bl	8002080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f838 	bl	8001f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8cc 	bl	800206c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d00f      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <TIM_Base_SetConfig+0x118>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00b      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3c      	ldr	r2, [pc, #240]	; (8002048 <TIM_Base_SetConfig+0x11c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	; (800204c <TIM_Base_SetConfig+0x120>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d108      	bne.n	8001f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8c:	d027      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <TIM_Base_SetConfig+0x118>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d023      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <TIM_Base_SetConfig+0x11c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <TIM_Base_SetConfig+0x120>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d017      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <TIM_Base_SetConfig+0x128>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a27      	ldr	r2, [pc, #156]	; (8002058 <TIM_Base_SetConfig+0x12c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00f      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <TIM_Base_SetConfig+0x130>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_Base_SetConfig+0x134>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <TIM_Base_SetConfig+0x138>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <TIM_Base_SetConfig+0x13c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0xf8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	615a      	str	r2, [r3, #20]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40010400 	.word	0x40010400
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	40001800 	.word	0x40001800
 8002064:	40001c00 	.word	0x40001c00
 8002068:	40002000 	.word	0x40002000

0800206c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0208 	add.w	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f103 0208 	add.w	r2, r3, #8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d103      	bne.n	8002156 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e00c      	b.n	8002170 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3308      	adds	r3, #8
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e002      	b.n	8002164 <vListInsert+0x2e>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	d2f6      	bcs.n	800215e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d103      	bne.n	80021dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4618      	mov	r0, r3
 8002212:	f001 f943 	bl	800349c <pvPortMalloc>
 8002216:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d013      	beq.n	8002246 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800221e:	2058      	movs	r0, #88	; 0x58
 8002220:	f001 f93c 	bl	800349c <pvPortMalloc>
 8002224:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800222c:	2258      	movs	r2, #88	; 0x58
 800222e:	2100      	movs	r1, #0
 8002230:	69f8      	ldr	r0, [r7, #28]
 8002232:	f001 fb29 	bl	8003888 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
 800223c:	e005      	b.n	800224a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f001 f9e6 	bl	8003610 <vPortFree>
 8002244:	e001      	b.n	800224a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	2300      	movs	r3, #0
 8002254:	9303      	str	r3, [sp, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f80e 	bl	8002288 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800226c:	69f8      	ldr	r0, [r7, #28]
 800226e:	f000 f899 	bl	80023a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	e002      	b.n	800227e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800227e:	69bb      	ldr	r3, [r7, #24]
    }
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	21a5      	movs	r1, #165	; 0xa5
 80022a2:	f001 faf1 	bl	8003888 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	3b01      	subs	r3, #1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f023 0307 	bic.w	r3, r3, #7
 80022be:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80022ca:	f04f 0305 	mov.w	r3, #5
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e012      	b.n	8002312 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	7819      	ldrb	r1, [r3, #0]
 80022f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	3334      	adds	r3, #52	; 0x34
 80022fc:	460a      	mov	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3301      	adds	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d9e9      	bls.n	80022ec <prvInitialiseNewTask+0x64>
 8002318:	e000      	b.n	800231c <prvInitialiseNewTask+0x94>
            {
                break;
 800231a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2b04      	cmp	r3, #4
 8002328:	d90a      	bls.n	8002340 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800232a:	f04f 0305 	mov.w	r3, #5
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	613b      	str	r3, [r7, #16]
    }
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2b04      	cmp	r3, #4
 8002344:	d901      	bls.n	800234a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002346:	2304      	movs	r3, #4
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	3304      	adds	r3, #4
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff feba 	bl	80020d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	3318      	adds	r3, #24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feb5 	bl	80020d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	f1c3 0205 	rsb	r2, r3, #5
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	69b8      	ldr	r0, [r7, #24]
 8002386:	f000 fe35 	bl	8002ff4 <pxPortInitialiseStack>
 800238a:	4602      	mov	r2, r0
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023ac:	f000 ff54 	bl	8003258 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <prvAddNewTaskToReadyList+0x110>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <prvAddNewTaskToReadyList+0x110>)
 80023b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <prvAddNewTaskToReadyList+0x114>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023c2:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <prvAddNewTaskToReadyList+0x114>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <prvAddNewTaskToReadyList+0x110>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d110      	bne.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023d0:	f000 fcf6 	bl	8002dc0 <prvInitialiseTaskLists>
 80023d4:	e00d      	b.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <prvAddNewTaskToReadyList+0x118>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <prvAddNewTaskToReadyList+0x114>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d802      	bhi.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023ec:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <prvAddNewTaskToReadyList+0x114>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <prvAddNewTaskToReadyList+0x11c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	4a31      	ldr	r2, [pc, #196]	; (80024c0 <prvAddNewTaskToReadyList+0x11c>)
 80023fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <prvAddNewTaskToReadyList+0x11c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2201      	movs	r2, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <prvAddNewTaskToReadyList+0x120>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <prvAddNewTaskToReadyList+0x120>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	492b      	ldr	r1, [pc, #172]	; (80024c8 <prvAddNewTaskToReadyList+0x124>)
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	3204      	adds	r2, #4
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <prvAddNewTaskToReadyList+0x124>)
 800245a:	441a      	add	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <prvAddNewTaskToReadyList+0x124>)
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1c59      	adds	r1, r3, #1
 8002474:	4814      	ldr	r0, [pc, #80]	; (80024c8 <prvAddNewTaskToReadyList+0x124>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4403      	add	r3, r0
 8002480:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002482:	f000 ff19 	bl	80032b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <prvAddNewTaskToReadyList+0x118>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvAddNewTaskToReadyList+0x114>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <prvAddNewTaskToReadyList+0x128>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200001cc 	.word	0x200001cc
 80024b8:	200000f4 	.word	0x200000f4
 80024bc:	200001d8 	.word	0x200001d8
 80024c0:	200001e8 	.word	0x200001e8
 80024c4:	200001d4 	.word	0x200001d4
 80024c8:	200000f8 	.word	0x200000f8
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80024d8:	f000 febe 	bl	8003258 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <vTaskDelete+0x18>
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <vTaskDelete+0x100>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e000      	b.n	80024ea <vTaskDelete+0x1a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fe59 	bl	80021a8 <uxListRemove>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	4934      	ldr	r1, [pc, #208]	; (80025d4 <vTaskDelete+0x104>)
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <vTaskDelete+0x58>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	2201      	movs	r2, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <vTaskDelete+0x108>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4013      	ands	r3, r2
 8002524:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <vTaskDelete+0x108>)
 8002526:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3318      	adds	r3, #24
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fe37 	bl	80021a8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <vTaskDelete+0x10c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	4a26      	ldr	r2, [pc, #152]	; (80025dc <vTaskDelete+0x10c>)
 8002542:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <vTaskDelete+0x100>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	d10b      	bne.n	8002566 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3304      	adds	r3, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4822      	ldr	r0, [pc, #136]	; (80025e0 <vTaskDelete+0x110>)
 8002556:	f7ff fdca 	bl	80020ee <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <vTaskDelete+0x114>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <vTaskDelete+0x114>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e006      	b.n	8002574 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <vTaskDelete+0x118>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <vTaskDelete+0x118>)
 800256e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002570:	f000 fca4 	bl	8002ebc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002574:	f000 fea0 	bl	80032b8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <vTaskDelete+0x100>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d002      	beq.n	8002588 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fc8a 	bl	8002e9c <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <vTaskDelete+0x11c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <vTaskDelete+0x100>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	429a      	cmp	r2, r3
 8002598:	d116      	bne.n	80025c8 <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <vTaskDelete+0x120>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <vTaskDelete+0xe8>
        __asm volatile
 80025a2:	f04f 0305 	mov.w	r3, #5
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	60bb      	str	r3, [r7, #8]
    }
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <vTaskDelete+0x124>)
 80025ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200000f4 	.word	0x200000f4
 80025d4:	200000f8 	.word	0x200000f8
 80025d8:	200001d4 	.word	0x200001d4
 80025dc:	200001e8 	.word	0x200001e8
 80025e0:	200001a0 	.word	0x200001a0
 80025e4:	200001b4 	.word	0x200001b4
 80025e8:	200001cc 	.word	0x200001cc
 80025ec:	200001d8 	.word	0x200001d8
 80025f0:	200001f4 	.word	0x200001f4
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d017      	beq.n	800263a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <vTaskDelay+0x60>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <vTaskDelay+0x30>
        __asm volatile
 8002612:	f04f 0305 	mov.w	r3, #5
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	60bb      	str	r3, [r7, #8]
    }
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002628:	f000 f936 	bl	8002898 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800262c:	2100      	movs	r1, #0
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fc60 	bl	8002ef4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002634:	f000 f93e 	bl	80028b4 <xTaskResumeAll>
 8002638:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <vTaskDelay+0x64>)
 8002642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200001f4 	.word	0x200001f4
 800265c:	e000ed04 	.word	0xe000ed04

08002660 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8002676:	f04f 0305 	mov.w	r3, #5
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	60fb      	str	r3, [r7, #12]
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <prvTaskIsTaskSuspended+0x5c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10a      	bne.n	80026ac <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <prvTaskIsTaskSuspended+0x60>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d005      	beq.n	80026ac <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80026ac:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200001b8 	.word	0x200001b8
 80026c0:	2000018c 	.word	0x2000018c

080026c4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xTaskResumeFromISR+0x2c>
        __asm volatile
 80026da:	f04f 0305 	mov.w	r3, #5
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	617b      	str	r3, [r7, #20]
    }
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026f0:	f000 fe94 	bl	800341c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026f4:	f3ef 8211 	mrs	r2, BASEPRI
 80026f8:	f04f 0305 	mov.w	r3, #5
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	613a      	str	r2, [r7, #16]
 800270a:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800270c:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800270e:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002710:	6a38      	ldr	r0, [r7, #32]
 8002712:	f7ff ffa5 	bl	8002660 <prvTaskIsTaskSuspended>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05a      	beq.n	80027d2 <xTaskResumeFromISR+0x10e>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <xTaskResumeFromISR+0x124>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d150      	bne.n	80027c6 <xTaskResumeFromISR+0x102>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <xTaskResumeFromISR+0x128>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	429a      	cmp	r2, r3
 8002730:	d304      	bcc.n	800273c <xTaskResumeFromISR+0x78>
                    {
                        xYieldRequired = pdTRUE;
 8002732:	2301      	movs	r3, #1
 8002734:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <xTaskResumeFromISR+0x12c>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	3304      	adds	r3, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fd31 	bl	80021a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <xTaskResumeFromISR+0x130>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <xTaskResumeFromISR+0x130>)
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	4926      	ldr	r1, [pc, #152]	; (80027f8 <xTaskResumeFromISR+0x134>)
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3304      	adds	r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	3204      	adds	r2, #4
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <xTaskResumeFromISR+0x134>)
 800279c:	441a      	add	r2, r3
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a6:	4914      	ldr	r1, [pc, #80]	; (80027f8 <xTaskResumeFromISR+0x134>)
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1c59      	adds	r1, r3, #1
 80027b6:	4810      	ldr	r0, [pc, #64]	; (80027f8 <xTaskResumeFromISR+0x134>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	6019      	str	r1, [r3, #0]
 80027c4:	e005      	b.n	80027d2 <xTaskResumeFromISR+0x10e>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	3318      	adds	r3, #24
 80027ca:	4619      	mov	r1, r3
 80027cc:	480b      	ldr	r0, [pc, #44]	; (80027fc <xTaskResumeFromISR+0x138>)
 80027ce:	f7ff fc8e 	bl	80020ee <vListInsertEnd>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80027dc:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001f4 	.word	0x200001f4
 80027ec:	200000f4 	.word	0x200000f4
 80027f0:	200001e0 	.word	0x200001e0
 80027f4:	200001d4 	.word	0x200001d4
 80027f8:	200000f8 	.word	0x200000f8
 80027fc:	2000018c 	.word	0x2000018c

08002800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <vTaskStartScheduler+0x7c>)
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2282      	movs	r2, #130	; 0x82
 8002812:	491b      	ldr	r1, [pc, #108]	; (8002880 <vTaskStartScheduler+0x80>)
 8002814:	481b      	ldr	r0, [pc, #108]	; (8002884 <vTaskStartScheduler+0x84>)
 8002816:	f7ff fcf1 	bl	80021fc <xTaskCreate>
 800281a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d116      	bne.n	8002850 <vTaskStartScheduler+0x50>
        __asm volatile
 8002822:	f04f 0305 	mov.w	r3, #5
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	60bb      	str	r3, [r7, #8]
    }
 8002834:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <vTaskStartScheduler+0x88>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <vTaskStartScheduler+0x8c>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <vTaskStartScheduler+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800284a:	f000 fc63 	bl	8003114 <xPortStartScheduler>
 800284e:	e00e      	b.n	800286e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d10a      	bne.n	800286e <vTaskStartScheduler+0x6e>
        __asm volatile
 8002858:	f04f 0305 	mov.w	r3, #5
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	607b      	str	r3, [r7, #4]
    }
 800286a:	bf00      	nop
 800286c:	e7fe      	b.n	800286c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <vTaskStartScheduler+0x94>)
 8002870:	681b      	ldr	r3, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200001f0 	.word	0x200001f0
 8002880:	08004958 	.word	0x08004958
 8002884:	08002d91 	.word	0x08002d91
 8002888:	200001ec 	.word	0x200001ec
 800288c:	200001d8 	.word	0x200001d8
 8002890:	200001d0 	.word	0x200001d0
 8002894:	2000000c 	.word	0x2000000c

08002898 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <vTaskSuspendAll+0x18>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <vTaskSuspendAll+0x18>)
 80028a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	200001f4 	.word	0x200001f4

080028b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028c2:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <xTaskResumeAll+0x1d4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80028ca:	f04f 0305 	mov.w	r3, #5
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	607b      	str	r3, [r7, #4]
    }
 80028dc:	bf00      	nop
 80028de:	e7fe      	b.n	80028de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028e0:	f000 fcba 	bl	8003258 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <xTaskResumeAll+0x1d4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4a67      	ldr	r2, [pc, #412]	; (8002a88 <xTaskResumeAll+0x1d4>)
 80028ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <xTaskResumeAll+0x1d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 80c0 	bne.w	8002a78 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <xTaskResumeAll+0x1d8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80bb 	beq.w	8002a78 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002902:	e08a      	b.n	8002a1a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002904:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <xTaskResumeAll+0x1dc>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	6a12      	ldr	r2, [r2, #32]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	69d2      	ldr	r2, [r2, #28]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3318      	adds	r3, #24
 800292e:	429a      	cmp	r2, r3
 8002930:	d103      	bne.n	800293a <xTaskResumeAll+0x86>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	68d2      	ldr	r2, [r2, #12]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3304      	adds	r3, #4
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <xTaskResumeAll+0xc4>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <xTaskResumeAll+0x1e0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <xTaskResumeAll+0x1e0>)
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	493e      	ldr	r1, [pc, #248]	; (8002a98 <xTaskResumeAll+0x1e4>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3304      	adds	r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	3204      	adds	r2, #4
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <xTaskResumeAll+0x1e4>)
 80029de:	441a      	add	r2, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	615a      	str	r2, [r3, #20]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	492b      	ldr	r1, [pc, #172]	; (8002a98 <xTaskResumeAll+0x1e4>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	4827      	ldr	r0, [pc, #156]	; (8002a98 <xTaskResumeAll+0x1e4>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4403      	add	r3, r0
 8002a04:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <xTaskResumeAll+0x1e8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <xTaskResumeAll+0x1ec>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <xTaskResumeAll+0x1dc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f47f af70 	bne.w	8002904 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a2a:	f000 fa47 	bl	8002ebc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <xTaskResumeAll+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d010      	beq.n	8002a5c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a3a:	f000 f837 	bl	8002aac <xTaskIncrementTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <xTaskResumeAll+0x1ec>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f1      	bne.n	8002a3a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <xTaskResumeAll+0x1f0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <xTaskResumeAll+0x1ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <xTaskResumeAll+0x1f4>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a78:	f000 fc1e 	bl	80032b8 <vPortExitCritical>

    return xAlreadyYielded;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200001f4 	.word	0x200001f4
 8002a8c:	200001cc 	.word	0x200001cc
 8002a90:	2000018c 	.word	0x2000018c
 8002a94:	200001d4 	.word	0x200001d4
 8002a98:	200000f8 	.word	0x200000f8
 8002a9c:	200000f4 	.word	0x200000f4
 8002aa0:	200001e0 	.word	0x200001e0
 8002aa4:	200001dc 	.word	0x200001dc
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <xTaskIncrementTick+0x200>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80ec 	bne.w	8002c98 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ac0:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <xTaskIncrementTick+0x204>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ac8:	4a79      	ldr	r2, [pc, #484]	; (8002cb0 <xTaskIncrementTick+0x204>)
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d120      	bne.n	8002b16 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ad4:	4b77      	ldr	r3, [pc, #476]	; (8002cb4 <xTaskIncrementTick+0x208>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002ade:	f04f 0305 	mov.w	r3, #5
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
    }
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xTaskIncrementTick+0x46>
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <xTaskIncrementTick+0x208>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <xTaskIncrementTick+0x20c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6d      	ldr	r2, [pc, #436]	; (8002cb4 <xTaskIncrementTick+0x208>)
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4a6d      	ldr	r2, [pc, #436]	; (8002cb8 <xTaskIncrementTick+0x20c>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <xTaskIncrementTick+0x210>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <xTaskIncrementTick+0x210>)
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	f000 f9d3 	bl	8002ebc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <xTaskIncrementTick+0x214>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a3a      	ldr	r2, [r7, #32]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f0c0 80a6 	bcc.w	8002c6e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b22:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <xTaskIncrementTick+0x208>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b2c:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <xTaskIncrementTick+0x214>)
 8002b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b32:	601a      	str	r2, [r3, #0]
                    break;
 8002b34:	e09b      	b.n	8002c6e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <xTaskIncrementTick+0x208>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d203      	bcs.n	8002b56 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b4e:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <xTaskIncrementTick+0x214>)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b54:	e08b      	b.n	8002c6e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	68d2      	ldr	r2, [r2, #12]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	3304      	adds	r3, #4
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <xTaskIncrementTick+0xd8>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01e      	beq.n	8002bda <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	6a12      	ldr	r2, [r2, #32]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	69d2      	ldr	r2, [r2, #28]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d103      	bne.n	8002bca <xTaskIncrementTick+0x11e>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <xTaskIncrementTick+0x218>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	4a36      	ldr	r2, [pc, #216]	; (8002cc4 <xTaskIncrementTick+0x218>)
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <xTaskIncrementTick+0x21c>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	3204      	adds	r2, #4
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1d1a      	adds	r2, r3, #4
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <xTaskIncrementTick+0x21c>)
 8002c30:	441a      	add	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	615a      	str	r2, [r3, #20]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	4923      	ldr	r1, [pc, #140]	; (8002cc8 <xTaskIncrementTick+0x21c>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	1c59      	adds	r1, r3, #1
 8002c4a:	481f      	ldr	r0, [pc, #124]	; (8002cc8 <xTaskIncrementTick+0x21c>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4403      	add	r3, r0
 8002c56:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <xTaskIncrementTick+0x220>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	f67f af5d 	bls.w	8002b22 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6c:	e759      	b.n	8002b22 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <xTaskIncrementTick+0x220>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	4914      	ldr	r1, [pc, #80]	; (8002cc8 <xTaskIncrementTick+0x21c>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d901      	bls.n	8002c8a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <xTaskIncrementTick+0x224>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	e004      	b.n	8002ca2 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <xTaskIncrementTick+0x228>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <xTaskIncrementTick+0x228>)
 8002ca0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200001f4 	.word	0x200001f4
 8002cb0:	200001d0 	.word	0x200001d0
 8002cb4:	20000184 	.word	0x20000184
 8002cb8:	20000188 	.word	0x20000188
 8002cbc:	200001e4 	.word	0x200001e4
 8002cc0:	200001ec 	.word	0x200001ec
 8002cc4:	200001d4 	.word	0x200001d4
 8002cc8:	200000f8 	.word	0x200000f8
 8002ccc:	200000f4 	.word	0x200000f4
 8002cd0:	200001e0 	.word	0x200001e0
 8002cd4:	200001dc 	.word	0x200001dc

08002cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <vTaskSwitchContext+0xa4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <vTaskSwitchContext+0xa8>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002cec:	e03f      	b.n	8002d6e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <vTaskSwitchContext+0xa8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <vTaskSwitchContext+0xac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f1c3 031f 	rsb	r3, r3, #31
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	491f      	ldr	r1, [pc, #124]	; (8002d88 <vTaskSwitchContext+0xb0>)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d1e:	f04f 0305 	mov.w	r3, #5
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
    }
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <vTaskSwitchContext+0x5a>
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <vTaskSwitchContext+0xb0>)
 8002d40:	4413      	add	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3308      	adds	r3, #8
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d104      	bne.n	8002d64 <vTaskSwitchContext+0x8c>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <vTaskSwitchContext+0xb4>)
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	200001f4 	.word	0x200001f4
 8002d80:	200001e0 	.word	0x200001e0
 8002d84:	200001d4 	.word	0x200001d4
 8002d88:	200000f8 	.word	0x200000f8
 8002d8c:	200000f4 	.word	0x200000f4

08002d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d98:	f000 f852 	bl	8002e40 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <prvIdleTask+0x28>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d9f9      	bls.n	8002d98 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <prvIdleTask+0x2c>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002db4:	e7f0      	b.n	8002d98 <prvIdleTask+0x8>
 8002db6:	bf00      	nop
 8002db8:	200000f8 	.word	0x200000f8
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	e00c      	b.n	8002de6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <prvInitialiseTaskLists+0x60>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f95a 	bl	8002094 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d9ef      	bls.n	8002dcc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <prvInitialiseTaskLists+0x64>)
 8002dee:	f7ff f951 	bl	8002094 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002df2:	480d      	ldr	r0, [pc, #52]	; (8002e28 <prvInitialiseTaskLists+0x68>)
 8002df4:	f7ff f94e 	bl	8002094 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <prvInitialiseTaskLists+0x6c>)
 8002dfa:	f7ff f94b 	bl	8002094 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <prvInitialiseTaskLists+0x70>)
 8002e00:	f7ff f948 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e04:	480b      	ldr	r0, [pc, #44]	; (8002e34 <prvInitialiseTaskLists+0x74>)
 8002e06:	f7ff f945 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <prvInitialiseTaskLists+0x78>)
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <prvInitialiseTaskLists+0x64>)
 8002e0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <prvInitialiseTaskLists+0x7c>)
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <prvInitialiseTaskLists+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200000f8 	.word	0x200000f8
 8002e24:	2000015c 	.word	0x2000015c
 8002e28:	20000170 	.word	0x20000170
 8002e2c:	2000018c 	.word	0x2000018c
 8002e30:	200001a0 	.word	0x200001a0
 8002e34:	200001b8 	.word	0x200001b8
 8002e38:	20000184 	.word	0x20000184
 8002e3c:	20000188 	.word	0x20000188

08002e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e46:	e019      	b.n	8002e7c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e48:	f000 fa06 	bl	8003258 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <prvCheckTasksWaitingTermination+0x50>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f9a5 	bl	80021a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <prvCheckTasksWaitingTermination+0x54>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <prvCheckTasksWaitingTermination+0x54>)
 8002e66:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e70:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002e72:	f000 fa21 	bl	80032b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f810 	bl	8002e9c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <prvCheckTasksWaitingTermination+0x58>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e1      	bne.n	8002e48 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200001a0 	.word	0x200001a0
 8002e94:	200001cc 	.word	0x200001cc
 8002e98:	200001b4 	.word	0x200001b4

08002e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fbb1 	bl	8003610 <vPortFree>
            vPortFree( pxTCB );
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fbae 	bl	8003610 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <prvResetNextTaskUnblockTime+0x30>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <prvResetNextTaskUnblockTime+0x34>)
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ed2:	e005      	b.n	8002ee0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <prvResetNextTaskUnblockTime+0x30>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <prvResetNextTaskUnblockTime+0x34>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000184 	.word	0x20000184
 8002ef0:	200001ec 	.word	0x200001ec

08002ef4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f94c 	bl	80021a8 <uxListRemove>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d124      	bne.n	8002f80 <prvAddCurrentTaskToDelayedList+0x8c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d021      	beq.n	8002f80 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	3204      	adds	r2, #4
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f70:	615a      	str	r2, [r3, #20]
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f7e:	e026      	b.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d209      	bcs.n	8002fac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7ff f8c6 	bl	8002136 <vListInsert>
}
 8002faa:	e010      	b.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7ff f8bc 	bl	8002136 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d202      	bcs.n	8002fce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200001d0 	.word	0x200001d0
 8002fdc:	200000f4 	.word	0x200000f4
 8002fe0:	200001d4 	.word	0x200001d4
 8002fe4:	200001b8 	.word	0x200001b8
 8002fe8:	20000188 	.word	0x20000188
 8002fec:	20000184 	.word	0x20000184
 8002ff0:	200001ec 	.word	0x200001ec

08002ff4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b04      	subs	r3, #4
 8003004:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800300c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3b04      	subs	r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3b04      	subs	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003024:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <pxPortInitialiseStack+0x64>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b14      	subs	r3, #20
 800302e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3b04      	subs	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f06f 0202 	mvn.w	r2, #2
 8003042:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3b20      	subs	r3, #32
 8003048:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	0800305d 	.word	0x0800305d

0800305c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <prvTaskExitError+0x54>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d00a      	beq.n	8003086 <prvTaskExitError+0x2a>
        __asm volatile
 8003070:	f04f 0305 	mov.w	r3, #5
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	60fb      	str	r3, [r7, #12]
    }
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <prvTaskExitError+0x28>
        __asm volatile
 8003086:	f04f 0305 	mov.w	r3, #5
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	60bb      	str	r3, [r7, #8]
    }
 8003098:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800309a:	bf00      	nop
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0fc      	beq.n	800309c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20000010 	.word	0x20000010
	...

080030c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	4770      	bx	lr
 80030dc:	f3af 8000 	nop.w

080030e0 <pxCurrentTCBConst2>:
 80030e0:	200000f4 	.word	0x200000f4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80030e8:	4808      	ldr	r0, [pc, #32]	; (800310c <prvPortStartFirstTask+0x24>)
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	f380 8808 	msr	MSP, r0
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f380 8814 	msr	CONTROL, r0
 80030fa:	b662      	cpsie	i
 80030fc:	b661      	cpsie	f
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	df00      	svc	0
 8003108:	bf00      	nop
 800310a:	0000      	.short	0x0000
 800310c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop

08003114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <xPortStartScheduler+0x120>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a46      	ldr	r2, [pc, #280]	; (8003238 <xPortStartScheduler+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10a      	bne.n	800313a <xPortStartScheduler+0x26>
        __asm volatile
 8003124:	f04f 0305 	mov.w	r3, #5
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	613b      	str	r3, [r7, #16]
    }
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <xPortStartScheduler+0x120>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <xPortStartScheduler+0x128>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10a      	bne.n	800315a <xPortStartScheduler+0x46>
        __asm volatile
 8003144:	f04f 0305 	mov.w	r3, #5
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60fb      	str	r3, [r7, #12]
    }
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <xPortStartScheduler+0x12c>)
 800315c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 0305 	and.w	r3, r3, #5
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <xPortStartScheduler+0x130>)
 8003180:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <xPortStartScheduler+0x134>)
 8003184:	2207      	movs	r2, #7
 8003186:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003188:	e009      	b.n	800319e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <xPortStartScheduler+0x134>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	4a2d      	ldr	r2, [pc, #180]	; (8003248 <xPortStartScheduler+0x134>)
 8003192:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d0ef      	beq.n	800318a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <xPortStartScheduler+0x134>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00a      	beq.n	80031cc <xPortStartScheduler+0xb8>
        __asm volatile
 80031b6:	f04f 0305 	mov.w	r3, #5
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60bb      	str	r3, [r7, #8]
    }
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <xPortStartScheduler+0x134>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <xPortStartScheduler+0x134>)
 80031d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <xPortStartScheduler+0x134>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <xPortStartScheduler+0x134>)
 80031e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <xPortStartScheduler+0x138>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <xPortStartScheduler+0x138>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <xPortStartScheduler+0x138>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <xPortStartScheduler+0x138>)
 80031fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003200:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003202:	f000 f8db 	bl	80033bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <xPortStartScheduler+0x13c>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800320c:	f000 f8fa 	bl	8003404 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <xPortStartScheduler+0x140>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <xPortStartScheduler+0x140>)
 8003216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800321a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800321c:	f7ff ff64 	bl	80030e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003220:	f7ff fd5a 	bl	8002cd8 <vTaskSwitchContext>
    prvTaskExitError();
 8003224:	f7ff ff1a 	bl	800305c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	410fc271 	.word	0x410fc271
 800323c:	410fc270 	.word	0x410fc270
 8003240:	e000e400 	.word	0xe000e400
 8003244:	200001f8 	.word	0x200001f8
 8003248:	200001fc 	.word	0x200001fc
 800324c:	e000ed20 	.word	0xe000ed20
 8003250:	20000010 	.word	0x20000010
 8003254:	e000ef34 	.word	0xe000ef34

08003258 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
        __asm volatile
 800325e:	f04f 0305 	mov.w	r3, #5
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	607b      	str	r3, [r7, #4]
    }
 8003270:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <vPortEnterCritical+0x58>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <vPortEnterCritical+0x58>)
 800327a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <vPortEnterCritical+0x58>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10f      	bne.n	80032a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <vPortEnterCritical+0x5c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800328e:	f04f 0305 	mov.w	r3, #5
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	603b      	str	r3, [r7, #0]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <vPortEnterCritical+0x4a>
    }
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20000010 	.word	0x20000010
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <vPortExitCritical+0x50>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <vPortExitCritical+0x24>
        __asm volatile
 80032c6:	f04f 0305 	mov.w	r3, #5
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	607b      	str	r3, [r7, #4]
    }
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <vPortExitCritical+0x50>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <vPortExitCritical+0x50>)
 80032e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <vPortExitCritical+0x50>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <vPortExitCritical+0x42>
 80032ee:	2300      	movs	r3, #0
 80032f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f383 8811 	msr	BASEPRI, r3
    }
 80032f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000010 	.word	0x20000010
 800330c:	00000000 	.word	0x00000000

08003310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f01e 0f10 	tst.w	lr, #16
 8003320:	bf08      	it	eq
 8003322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	6010      	str	r0, [r2, #0]
 800332c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003330:	f04f 0005 	mov.w	r0, #5
 8003334:	f380 8811 	msr	BASEPRI, r0
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f7ff fcca 	bl	8002cd8 <vTaskSwitchContext>
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f380 8811 	msr	BASEPRI, r0
 800334c:	bc09      	pop	{r0, r3}
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	6808      	ldr	r0, [r1, #0]
 8003352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003356:	f01e 0f10 	tst.w	lr, #16
 800335a:	bf08      	it	eq
 800335c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003360:	f380 8809 	msr	PSP, r0
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	f3af 8000 	nop.w

08003370 <pxCurrentTCBConst>:
 8003370:	200000f4 	.word	0x200000f4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop

08003378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
        __asm volatile
 800337e:	f04f 0305 	mov.w	r3, #5
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	607b      	str	r3, [r7, #4]
    }
 8003390:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003392:	f7ff fb8b 	bl	8002aac <xTaskIncrementTick>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <SysTick_Handler+0x40>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f383 8811 	msr	BASEPRI, r3
    }
 80033ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <vPortSetupTimerInterrupt+0x38>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <vPortSetupTimerInterrupt+0x3c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <vPortSetupTimerInterrupt+0x40>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <vPortSetupTimerInterrupt+0x44>)
 80033da:	3b01      	subs	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010
 80033f4:	e000e018 	.word	0xe000e018
 80033f8:	20000000 	.word	0x20000000
 80033fc:	10624dd3 	.word	0x10624dd3
 8003400:	e000e014 	.word	0xe000e014

08003404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003414 <vPortEnableVFP+0x10>
 8003408:	6801      	ldr	r1, [r0, #0]
 800340a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800340e:	6001      	str	r1, [r0, #0]
 8003410:	4770      	bx	lr
 8003412:	0000      	.short	0x0000
 8003414:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop

0800341c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d914      	bls.n	8003458 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <vPortValidateInterruptPriority+0x70>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <vPortValidateInterruptPriority+0x74>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	7afa      	ldrb	r2, [r7, #11]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20a      	bcs.n	8003458 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003442:	f04f 0305 	mov.w	r3, #5
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <vPortValidateInterruptPriority+0x78>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <vPortValidateInterruptPriority+0x7c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90a      	bls.n	800347e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003468:	f04f 0305 	mov.w	r3, #5
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	603b      	str	r3, [r7, #0]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortValidateInterruptPriority+0x60>
    }
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e3f0 	.word	0xe000e3f0
 8003490:	200001f8 	.word	0x200001f8
 8003494:	e000ed0c 	.word	0xe000ed0c
 8003498:	200001fc 	.word	0x200001fc

0800349c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80034a8:	f7ff f9f6 	bl	8002898 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <pvPortMalloc+0x160>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034b4:	f000 f908 	bl	80036c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80034be:	2208      	movs	r2, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	3308      	adds	r3, #8
 80034ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d804      	bhi.n	80034e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	e001      	b.n	80034e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db70      	blt.n	80035cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d06d      	beq.n	80035cc <pvPortMalloc+0x130>
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <pvPortMalloc+0x164>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d868      	bhi.n	80035cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80034fa:	4b42      	ldr	r3, [pc, #264]	; (8003604 <pvPortMalloc+0x168>)
 80034fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <pvPortMalloc+0x168>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003504:	e004      	b.n	8003510 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d903      	bls.n	8003522 <pvPortMalloc+0x86>
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f1      	bne.n	8003506 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <pvPortMalloc+0x160>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	d04f      	beq.n	80035cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	4413      	add	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad2      	subs	r2, r2, r3
 8003546:	2308      	movs	r3, #8
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	429a      	cmp	r2, r3
 800354c:	d91f      	bls.n	800358e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <pvPortMalloc+0xda>
        __asm volatile
 8003560:	f04f 0305 	mov.w	r3, #5
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	613b      	str	r3, [r7, #16]
    }
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f000 f8f9 	bl	8003780 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <pvPortMalloc+0x164>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <pvPortMalloc+0x164>)
 800359a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <pvPortMalloc+0x164>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <pvPortMalloc+0x16c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d203      	bcs.n	80035b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <pvPortMalloc+0x164>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a16      	ldr	r2, [pc, #88]	; (8003608 <pvPortMalloc+0x16c>)
 80035ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <pvPortMalloc+0x170>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	4a10      	ldr	r2, [pc, #64]	; (800360c <pvPortMalloc+0x170>)
 80035ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035cc:	f7ff f972 	bl	80028b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <pvPortMalloc+0x154>
        __asm volatile
 80035da:	f04f 0305 	mov.w	r3, #5
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <pvPortMalloc+0x152>
    return pvReturn;
 80035f0:	69fb      	ldr	r3, [r7, #28]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20012e08 	.word	0x20012e08
 8003600:	20012e0c 	.word	0x20012e0c
 8003604:	20012e00 	.word	0x20012e00
 8003608:	20012e10 	.word	0x20012e10
 800360c:	20012e14 	.word	0x20012e14

08003610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d049      	beq.n	80036b6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003622:	2308      	movs	r3, #8
 8003624:	425b      	negs	r3, r3
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4413      	add	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db0a      	blt.n	800364e <vPortFree+0x3e>
        __asm volatile
 8003638:	f04f 0305 	mov.w	r3, #5
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	60fb      	str	r3, [r7, #12]
    }
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <vPortFree+0x5c>
        __asm volatile
 8003656:	f04f 0305 	mov.w	r3, #5
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60bb      	str	r3, [r7, #8]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0fdb      	lsrs	r3, r3, #31
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01c      	beq.n	80036b6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d118      	bne.n	80036b6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003690:	f7ff f902 	bl	8002898 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <vPortFree+0xb0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4413      	add	r3, r2
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <vPortFree+0xb0>)
 80036a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036a2:	6938      	ldr	r0, [r7, #16]
 80036a4:	f000 f86c 	bl	8003780 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <vPortFree+0xb4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <vPortFree+0xb4>)
 80036b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036b2:	f7ff f8ff 	bl	80028b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20012e0c 	.word	0x20012e0c
 80036c4:	20012e18 	.word	0x20012e18

080036c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036ce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <prvHeapInit+0xa4>)
 80036d6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0307 	bic.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <prvHeapInit+0xa4>)
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003700:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <prvHeapInit+0xa8>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <prvHeapInit+0xa8>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4413      	add	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003714:	2208      	movs	r2, #8
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a13      	ldr	r2, [pc, #76]	; (8003774 <prvHeapInit+0xac>)
 8003728:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <prvHeapInit+0xac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <prvHeapInit+0xac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <prvHeapInit+0xac>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <prvHeapInit+0xb0>)
 8003756:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <prvHeapInit+0xb4>)
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000200 	.word	0x20000200
 8003770:	20012e00 	.word	0x20012e00
 8003774:	20012e08 	.word	0x20012e08
 8003778:	20012e10 	.word	0x20012e10
 800377c:	20012e0c 	.word	0x20012e0c

08003780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <prvInsertBlockIntoFreeList+0xac>)
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e002      	b.n	8003794 <prvInsertBlockIntoFreeList+0x14>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d8f7      	bhi.n	800378e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4413      	add	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d108      	bne.n	80037c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	441a      	add	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	441a      	add	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d118      	bne.n	8003808 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <prvInsertBlockIntoFreeList+0xb0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d00d      	beq.n	80037fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e008      	b.n	8003810 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <prvInsertBlockIntoFreeList+0xb0>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e003      	b.n	8003810 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d002      	beq.n	800381e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20012e00 	.word	0x20012e00
 8003830:	20012e08 	.word	0x20012e08

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000014 	.word	0x20000014

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f001 f824 	bl	80048a0 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	08004a18 	.word	0x08004a18
 800387c:	08004a18 	.word	0x08004a18
 8003880:	08004a18 	.word	0x08004a18
 8003884:	08004a1c 	.word	0x08004a1c

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <iprintf>:
 8003898:	b40f      	push	{r0, r1, r2, r3}
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <iprintf+0x2c>)
 800389c:	b513      	push	{r0, r1, r4, lr}
 800389e:	681c      	ldr	r4, [r3, #0]
 80038a0:	b124      	cbz	r4, 80038ac <iprintf+0x14>
 80038a2:	69a3      	ldr	r3, [r4, #24]
 80038a4:	b913      	cbnz	r3, 80038ac <iprintf+0x14>
 80038a6:	4620      	mov	r0, r4
 80038a8:	f000 fa5e 	bl	8003d68 <__sinit>
 80038ac:	ab05      	add	r3, sp, #20
 80038ae:	9a04      	ldr	r2, [sp, #16]
 80038b0:	68a1      	ldr	r1, [r4, #8]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 fc67 	bl	8004188 <_vfiprintf_r>
 80038ba:	b002      	add	sp, #8
 80038bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c0:	b004      	add	sp, #16
 80038c2:	4770      	bx	lr
 80038c4:	20000014 	.word	0x20000014

080038c8 <_puts_r>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	460e      	mov	r6, r1
 80038cc:	4605      	mov	r5, r0
 80038ce:	b118      	cbz	r0, 80038d8 <_puts_r+0x10>
 80038d0:	6983      	ldr	r3, [r0, #24]
 80038d2:	b90b      	cbnz	r3, 80038d8 <_puts_r+0x10>
 80038d4:	f000 fa48 	bl	8003d68 <__sinit>
 80038d8:	69ab      	ldr	r3, [r5, #24]
 80038da:	68ac      	ldr	r4, [r5, #8]
 80038dc:	b913      	cbnz	r3, 80038e4 <_puts_r+0x1c>
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 fa42 	bl	8003d68 <__sinit>
 80038e4:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <_puts_r+0xd0>)
 80038e6:	429c      	cmp	r4, r3
 80038e8:	d120      	bne.n	800392c <_puts_r+0x64>
 80038ea:	686c      	ldr	r4, [r5, #4]
 80038ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038ee:	07db      	lsls	r3, r3, #31
 80038f0:	d405      	bmi.n	80038fe <_puts_r+0x36>
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	0598      	lsls	r0, r3, #22
 80038f6:	d402      	bmi.n	80038fe <_puts_r+0x36>
 80038f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fa:	f000 fad3 	bl	8003ea4 <__retarget_lock_acquire_recursive>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	0719      	lsls	r1, r3, #28
 8003902:	d51d      	bpl.n	8003940 <_puts_r+0x78>
 8003904:	6923      	ldr	r3, [r4, #16]
 8003906:	b1db      	cbz	r3, 8003940 <_puts_r+0x78>
 8003908:	3e01      	subs	r6, #1
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003910:	3b01      	subs	r3, #1
 8003912:	60a3      	str	r3, [r4, #8]
 8003914:	bb39      	cbnz	r1, 8003966 <_puts_r+0x9e>
 8003916:	2b00      	cmp	r3, #0
 8003918:	da38      	bge.n	800398c <_puts_r+0xc4>
 800391a:	4622      	mov	r2, r4
 800391c:	210a      	movs	r1, #10
 800391e:	4628      	mov	r0, r5
 8003920:	f000 f848 	bl	80039b4 <__swbuf_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d011      	beq.n	800394c <_puts_r+0x84>
 8003928:	250a      	movs	r5, #10
 800392a:	e011      	b.n	8003950 <_puts_r+0x88>
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <_puts_r+0xd4>)
 800392e:	429c      	cmp	r4, r3
 8003930:	d101      	bne.n	8003936 <_puts_r+0x6e>
 8003932:	68ac      	ldr	r4, [r5, #8]
 8003934:	e7da      	b.n	80038ec <_puts_r+0x24>
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <_puts_r+0xd8>)
 8003938:	429c      	cmp	r4, r3
 800393a:	bf08      	it	eq
 800393c:	68ec      	ldreq	r4, [r5, #12]
 800393e:	e7d5      	b.n	80038ec <_puts_r+0x24>
 8003940:	4621      	mov	r1, r4
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f888 	bl	8003a58 <__swsetup_r>
 8003948:	2800      	cmp	r0, #0
 800394a:	d0dd      	beq.n	8003908 <_puts_r+0x40>
 800394c:	f04f 35ff 	mov.w	r5, #4294967295
 8003950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003952:	07da      	lsls	r2, r3, #31
 8003954:	d405      	bmi.n	8003962 <_puts_r+0x9a>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	059b      	lsls	r3, r3, #22
 800395a:	d402      	bmi.n	8003962 <_puts_r+0x9a>
 800395c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800395e:	f000 faa2 	bl	8003ea6 <__retarget_lock_release_recursive>
 8003962:	4628      	mov	r0, r5
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	2b00      	cmp	r3, #0
 8003968:	da04      	bge.n	8003974 <_puts_r+0xac>
 800396a:	69a2      	ldr	r2, [r4, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	dc06      	bgt.n	800397e <_puts_r+0xb6>
 8003970:	290a      	cmp	r1, #10
 8003972:	d004      	beq.n	800397e <_puts_r+0xb6>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	6022      	str	r2, [r4, #0]
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	e7c5      	b.n	800390a <_puts_r+0x42>
 800397e:	4622      	mov	r2, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f000 f817 	bl	80039b4 <__swbuf_r>
 8003986:	3001      	adds	r0, #1
 8003988:	d1bf      	bne.n	800390a <_puts_r+0x42>
 800398a:	e7df      	b.n	800394c <_puts_r+0x84>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	250a      	movs	r5, #10
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	6022      	str	r2, [r4, #0]
 8003994:	701d      	strb	r5, [r3, #0]
 8003996:	e7db      	b.n	8003950 <_puts_r+0x88>
 8003998:	0800499c 	.word	0x0800499c
 800399c:	080049bc 	.word	0x080049bc
 80039a0:	0800497c 	.word	0x0800497c

080039a4 <puts>:
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <puts+0xc>)
 80039a6:	4601      	mov	r1, r0
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f7ff bf8d 	b.w	80038c8 <_puts_r>
 80039ae:	bf00      	nop
 80039b0:	20000014 	.word	0x20000014

080039b4 <__swbuf_r>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	460e      	mov	r6, r1
 80039b8:	4614      	mov	r4, r2
 80039ba:	4605      	mov	r5, r0
 80039bc:	b118      	cbz	r0, 80039c6 <__swbuf_r+0x12>
 80039be:	6983      	ldr	r3, [r0, #24]
 80039c0:	b90b      	cbnz	r3, 80039c6 <__swbuf_r+0x12>
 80039c2:	f000 f9d1 	bl	8003d68 <__sinit>
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <__swbuf_r+0x98>)
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d12b      	bne.n	8003a24 <__swbuf_r+0x70>
 80039cc:	686c      	ldr	r4, [r5, #4]
 80039ce:	69a3      	ldr	r3, [r4, #24]
 80039d0:	60a3      	str	r3, [r4, #8]
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	071a      	lsls	r2, r3, #28
 80039d6:	d52f      	bpl.n	8003a38 <__swbuf_r+0x84>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	b36b      	cbz	r3, 8003a38 <__swbuf_r+0x84>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	6820      	ldr	r0, [r4, #0]
 80039e0:	1ac0      	subs	r0, r0, r3
 80039e2:	6963      	ldr	r3, [r4, #20]
 80039e4:	b2f6      	uxtb	r6, r6
 80039e6:	4283      	cmp	r3, r0
 80039e8:	4637      	mov	r7, r6
 80039ea:	dc04      	bgt.n	80039f6 <__swbuf_r+0x42>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f926 	bl	8003c40 <_fflush_r>
 80039f4:	bb30      	cbnz	r0, 8003a44 <__swbuf_r+0x90>
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	6022      	str	r2, [r4, #0]
 8003a02:	701e      	strb	r6, [r3, #0]
 8003a04:	6963      	ldr	r3, [r4, #20]
 8003a06:	3001      	adds	r0, #1
 8003a08:	4283      	cmp	r3, r0
 8003a0a:	d004      	beq.n	8003a16 <__swbuf_r+0x62>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	07db      	lsls	r3, r3, #31
 8003a10:	d506      	bpl.n	8003a20 <__swbuf_r+0x6c>
 8003a12:	2e0a      	cmp	r6, #10
 8003a14:	d104      	bne.n	8003a20 <__swbuf_r+0x6c>
 8003a16:	4621      	mov	r1, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f000 f911 	bl	8003c40 <_fflush_r>
 8003a1e:	b988      	cbnz	r0, 8003a44 <__swbuf_r+0x90>
 8003a20:	4638      	mov	r0, r7
 8003a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <__swbuf_r+0x9c>)
 8003a26:	429c      	cmp	r4, r3
 8003a28:	d101      	bne.n	8003a2e <__swbuf_r+0x7a>
 8003a2a:	68ac      	ldr	r4, [r5, #8]
 8003a2c:	e7cf      	b.n	80039ce <__swbuf_r+0x1a>
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <__swbuf_r+0xa0>)
 8003a30:	429c      	cmp	r4, r3
 8003a32:	bf08      	it	eq
 8003a34:	68ec      	ldreq	r4, [r5, #12]
 8003a36:	e7ca      	b.n	80039ce <__swbuf_r+0x1a>
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 f80c 	bl	8003a58 <__swsetup_r>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d0cb      	beq.n	80039dc <__swbuf_r+0x28>
 8003a44:	f04f 37ff 	mov.w	r7, #4294967295
 8003a48:	e7ea      	b.n	8003a20 <__swbuf_r+0x6c>
 8003a4a:	bf00      	nop
 8003a4c:	0800499c 	.word	0x0800499c
 8003a50:	080049bc 	.word	0x080049bc
 8003a54:	0800497c 	.word	0x0800497c

08003a58 <__swsetup_r>:
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <__swsetup_r+0xcc>)
 8003a5a:	b570      	push	{r4, r5, r6, lr}
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	4606      	mov	r6, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	b125      	cbz	r5, 8003a6e <__swsetup_r+0x16>
 8003a64:	69ab      	ldr	r3, [r5, #24]
 8003a66:	b913      	cbnz	r3, 8003a6e <__swsetup_r+0x16>
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f97d 	bl	8003d68 <__sinit>
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <__swsetup_r+0xd0>)
 8003a70:	429c      	cmp	r4, r3
 8003a72:	d10f      	bne.n	8003a94 <__swsetup_r+0x3c>
 8003a74:	686c      	ldr	r4, [r5, #4]
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a7c:	0719      	lsls	r1, r3, #28
 8003a7e:	d42c      	bmi.n	8003ada <__swsetup_r+0x82>
 8003a80:	06dd      	lsls	r5, r3, #27
 8003a82:	d411      	bmi.n	8003aa8 <__swsetup_r+0x50>
 8003a84:	2309      	movs	r3, #9
 8003a86:	6033      	str	r3, [r6, #0]
 8003a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a92:	e03e      	b.n	8003b12 <__swsetup_r+0xba>
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <__swsetup_r+0xd4>)
 8003a96:	429c      	cmp	r4, r3
 8003a98:	d101      	bne.n	8003a9e <__swsetup_r+0x46>
 8003a9a:	68ac      	ldr	r4, [r5, #8]
 8003a9c:	e7eb      	b.n	8003a76 <__swsetup_r+0x1e>
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <__swsetup_r+0xd8>)
 8003aa0:	429c      	cmp	r4, r3
 8003aa2:	bf08      	it	eq
 8003aa4:	68ec      	ldreq	r4, [r5, #12]
 8003aa6:	e7e6      	b.n	8003a76 <__swsetup_r+0x1e>
 8003aa8:	0758      	lsls	r0, r3, #29
 8003aaa:	d512      	bpl.n	8003ad2 <__swsetup_r+0x7a>
 8003aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aae:	b141      	cbz	r1, 8003ac2 <__swsetup_r+0x6a>
 8003ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ab4:	4299      	cmp	r1, r3
 8003ab6:	d002      	beq.n	8003abe <__swsetup_r+0x66>
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f000 fa5b 	bl	8003f74 <_free_r>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	2300      	movs	r3, #0
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	b94b      	cbnz	r3, 8003af2 <__swsetup_r+0x9a>
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d003      	beq.n	8003af2 <__swsetup_r+0x9a>
 8003aea:	4621      	mov	r1, r4
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 fa01 	bl	8003ef4 <__smakebuf_r>
 8003af2:	89a0      	ldrh	r0, [r4, #12]
 8003af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003af8:	f010 0301 	ands.w	r3, r0, #1
 8003afc:	d00a      	beq.n	8003b14 <__swsetup_r+0xbc>
 8003afe:	2300      	movs	r3, #0
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	6963      	ldr	r3, [r4, #20]
 8003b04:	425b      	negs	r3, r3
 8003b06:	61a3      	str	r3, [r4, #24]
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	b943      	cbnz	r3, 8003b1e <__swsetup_r+0xc6>
 8003b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b10:	d1ba      	bne.n	8003a88 <__swsetup_r+0x30>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	0781      	lsls	r1, r0, #30
 8003b16:	bf58      	it	pl
 8003b18:	6963      	ldrpl	r3, [r4, #20]
 8003b1a:	60a3      	str	r3, [r4, #8]
 8003b1c:	e7f4      	b.n	8003b08 <__swsetup_r+0xb0>
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e7f7      	b.n	8003b12 <__swsetup_r+0xba>
 8003b22:	bf00      	nop
 8003b24:	20000014 	.word	0x20000014
 8003b28:	0800499c 	.word	0x0800499c
 8003b2c:	080049bc 	.word	0x080049bc
 8003b30:	0800497c 	.word	0x0800497c

08003b34 <__sflush_r>:
 8003b34:	898a      	ldrh	r2, [r1, #12]
 8003b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	0710      	lsls	r0, r2, #28
 8003b3e:	460c      	mov	r4, r1
 8003b40:	d458      	bmi.n	8003bf4 <__sflush_r+0xc0>
 8003b42:	684b      	ldr	r3, [r1, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dc05      	bgt.n	8003b54 <__sflush_r+0x20>
 8003b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	dc02      	bgt.n	8003b54 <__sflush_r+0x20>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	d0f9      	beq.n	8003b4e <__sflush_r+0x1a>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b60:	682f      	ldr	r7, [r5, #0]
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	d032      	beq.n	8003bcc <__sflush_r+0x98>
 8003b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	075a      	lsls	r2, r3, #29
 8003b6c:	d505      	bpl.n	8003b7a <__sflush_r+0x46>
 8003b6e:	6863      	ldr	r3, [r4, #4]
 8003b70:	1ac0      	subs	r0, r0, r3
 8003b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b74:	b10b      	cbz	r3, 8003b7a <__sflush_r+0x46>
 8003b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b78:	1ac0      	subs	r0, r0, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b80:	6a21      	ldr	r1, [r4, #32]
 8003b82:	4628      	mov	r0, r5
 8003b84:	47b0      	blx	r6
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	d106      	bne.n	8003b9a <__sflush_r+0x66>
 8003b8c:	6829      	ldr	r1, [r5, #0]
 8003b8e:	291d      	cmp	r1, #29
 8003b90:	d82c      	bhi.n	8003bec <__sflush_r+0xb8>
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <__sflush_r+0x108>)
 8003b94:	40ca      	lsrs	r2, r1
 8003b96:	07d6      	lsls	r6, r2, #31
 8003b98:	d528      	bpl.n	8003bec <__sflush_r+0xb8>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	6062      	str	r2, [r4, #4]
 8003b9e:	04d9      	lsls	r1, r3, #19
 8003ba0:	6922      	ldr	r2, [r4, #16]
 8003ba2:	6022      	str	r2, [r4, #0]
 8003ba4:	d504      	bpl.n	8003bb0 <__sflush_r+0x7c>
 8003ba6:	1c42      	adds	r2, r0, #1
 8003ba8:	d101      	bne.n	8003bae <__sflush_r+0x7a>
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	b903      	cbnz	r3, 8003bb0 <__sflush_r+0x7c>
 8003bae:	6560      	str	r0, [r4, #84]	; 0x54
 8003bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bb2:	602f      	str	r7, [r5, #0]
 8003bb4:	2900      	cmp	r1, #0
 8003bb6:	d0ca      	beq.n	8003b4e <__sflush_r+0x1a>
 8003bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	d002      	beq.n	8003bc6 <__sflush_r+0x92>
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f000 f9d7 	bl	8003f74 <_free_r>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8003bca:	e7c1      	b.n	8003b50 <__sflush_r+0x1c>
 8003bcc:	6a21      	ldr	r1, [r4, #32]
 8003bce:	2301      	movs	r3, #1
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	47b0      	blx	r6
 8003bd4:	1c41      	adds	r1, r0, #1
 8003bd6:	d1c7      	bne.n	8003b68 <__sflush_r+0x34>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0c4      	beq.n	8003b68 <__sflush_r+0x34>
 8003bde:	2b1d      	cmp	r3, #29
 8003be0:	d001      	beq.n	8003be6 <__sflush_r+0xb2>
 8003be2:	2b16      	cmp	r3, #22
 8003be4:	d101      	bne.n	8003bea <__sflush_r+0xb6>
 8003be6:	602f      	str	r7, [r5, #0]
 8003be8:	e7b1      	b.n	8003b4e <__sflush_r+0x1a>
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	e7ad      	b.n	8003b50 <__sflush_r+0x1c>
 8003bf4:	690f      	ldr	r7, [r1, #16]
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d0a9      	beq.n	8003b4e <__sflush_r+0x1a>
 8003bfa:	0793      	lsls	r3, r2, #30
 8003bfc:	680e      	ldr	r6, [r1, #0]
 8003bfe:	bf08      	it	eq
 8003c00:	694b      	ldreq	r3, [r1, #20]
 8003c02:	600f      	str	r7, [r1, #0]
 8003c04:	bf18      	it	ne
 8003c06:	2300      	movne	r3, #0
 8003c08:	eba6 0807 	sub.w	r8, r6, r7
 8003c0c:	608b      	str	r3, [r1, #8]
 8003c0e:	f1b8 0f00 	cmp.w	r8, #0
 8003c12:	dd9c      	ble.n	8003b4e <__sflush_r+0x1a>
 8003c14:	6a21      	ldr	r1, [r4, #32]
 8003c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c18:	4643      	mov	r3, r8
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b0      	blx	r6
 8003c20:	2800      	cmp	r0, #0
 8003c22:	dc06      	bgt.n	8003c32 <__sflush_r+0xfe>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	e78e      	b.n	8003b50 <__sflush_r+0x1c>
 8003c32:	4407      	add	r7, r0
 8003c34:	eba8 0800 	sub.w	r8, r8, r0
 8003c38:	e7e9      	b.n	8003c0e <__sflush_r+0xda>
 8003c3a:	bf00      	nop
 8003c3c:	20400001 	.word	0x20400001

08003c40 <_fflush_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	690b      	ldr	r3, [r1, #16]
 8003c44:	4605      	mov	r5, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	b913      	cbnz	r3, 8003c50 <_fflush_r+0x10>
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	b118      	cbz	r0, 8003c5a <_fflush_r+0x1a>
 8003c52:	6983      	ldr	r3, [r0, #24]
 8003c54:	b90b      	cbnz	r3, 8003c5a <_fflush_r+0x1a>
 8003c56:	f000 f887 	bl	8003d68 <__sinit>
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <_fflush_r+0x6c>)
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d11b      	bne.n	8003c98 <_fflush_r+0x58>
 8003c60:	686c      	ldr	r4, [r5, #4]
 8003c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ef      	beq.n	8003c4a <_fflush_r+0xa>
 8003c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c6c:	07d0      	lsls	r0, r2, #31
 8003c6e:	d404      	bmi.n	8003c7a <_fflush_r+0x3a>
 8003c70:	0599      	lsls	r1, r3, #22
 8003c72:	d402      	bmi.n	8003c7a <_fflush_r+0x3a>
 8003c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c76:	f000 f915 	bl	8003ea4 <__retarget_lock_acquire_recursive>
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f7ff ff59 	bl	8003b34 <__sflush_r>
 8003c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c84:	07da      	lsls	r2, r3, #31
 8003c86:	4605      	mov	r5, r0
 8003c88:	d4e0      	bmi.n	8003c4c <_fflush_r+0xc>
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	059b      	lsls	r3, r3, #22
 8003c8e:	d4dd      	bmi.n	8003c4c <_fflush_r+0xc>
 8003c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c92:	f000 f908 	bl	8003ea6 <__retarget_lock_release_recursive>
 8003c96:	e7d9      	b.n	8003c4c <_fflush_r+0xc>
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <_fflush_r+0x70>)
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	d101      	bne.n	8003ca2 <_fflush_r+0x62>
 8003c9e:	68ac      	ldr	r4, [r5, #8]
 8003ca0:	e7df      	b.n	8003c62 <_fflush_r+0x22>
 8003ca2:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <_fflush_r+0x74>)
 8003ca4:	429c      	cmp	r4, r3
 8003ca6:	bf08      	it	eq
 8003ca8:	68ec      	ldreq	r4, [r5, #12]
 8003caa:	e7da      	b.n	8003c62 <_fflush_r+0x22>
 8003cac:	0800499c 	.word	0x0800499c
 8003cb0:	080049bc 	.word	0x080049bc
 8003cb4:	0800497c 	.word	0x0800497c

08003cb8 <std>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cc6:	6083      	str	r3, [r0, #8]
 8003cc8:	8181      	strh	r1, [r0, #12]
 8003cca:	6643      	str	r3, [r0, #100]	; 0x64
 8003ccc:	81c2      	strh	r2, [r0, #14]
 8003cce:	6183      	str	r3, [r0, #24]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	305c      	adds	r0, #92	; 0x5c
 8003cd6:	f7ff fdd7 	bl	8003888 <memset>
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <std+0x38>)
 8003cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <std+0x3c>)
 8003ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <std+0x40>)
 8003ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <std+0x44>)
 8003ce8:	6224      	str	r4, [r4, #32]
 8003cea:	6323      	str	r3, [r4, #48]	; 0x30
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	bf00      	nop
 8003cf0:	08004731 	.word	0x08004731
 8003cf4:	08004753 	.word	0x08004753
 8003cf8:	0800478b 	.word	0x0800478b
 8003cfc:	080047af 	.word	0x080047af

08003d00 <_cleanup_r>:
 8003d00:	4901      	ldr	r1, [pc, #4]	; (8003d08 <_cleanup_r+0x8>)
 8003d02:	f000 b8af 	b.w	8003e64 <_fwalk_reent>
 8003d06:	bf00      	nop
 8003d08:	08003c41 	.word	0x08003c41

08003d0c <__sfmoreglue>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	2268      	movs	r2, #104	; 0x68
 8003d10:	1e4d      	subs	r5, r1, #1
 8003d12:	4355      	muls	r5, r2
 8003d14:	460e      	mov	r6, r1
 8003d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d1a:	f000 f997 	bl	800404c <_malloc_r>
 8003d1e:	4604      	mov	r4, r0
 8003d20:	b140      	cbz	r0, 8003d34 <__sfmoreglue+0x28>
 8003d22:	2100      	movs	r1, #0
 8003d24:	e9c0 1600 	strd	r1, r6, [r0]
 8003d28:	300c      	adds	r0, #12
 8003d2a:	60a0      	str	r0, [r4, #8]
 8003d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d30:	f7ff fdaa 	bl	8003888 <memset>
 8003d34:	4620      	mov	r0, r4
 8003d36:	bd70      	pop	{r4, r5, r6, pc}

08003d38 <__sfp_lock_acquire>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__sfp_lock_acquire+0x8>)
 8003d3a:	f000 b8b3 	b.w	8003ea4 <__retarget_lock_acquire_recursive>
 8003d3e:	bf00      	nop
 8003d40:	20012e1d 	.word	0x20012e1d

08003d44 <__sfp_lock_release>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__sfp_lock_release+0x8>)
 8003d46:	f000 b8ae 	b.w	8003ea6 <__retarget_lock_release_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	20012e1d 	.word	0x20012e1d

08003d50 <__sinit_lock_acquire>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__sinit_lock_acquire+0x8>)
 8003d52:	f000 b8a7 	b.w	8003ea4 <__retarget_lock_acquire_recursive>
 8003d56:	bf00      	nop
 8003d58:	20012e1e 	.word	0x20012e1e

08003d5c <__sinit_lock_release>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__sinit_lock_release+0x8>)
 8003d5e:	f000 b8a2 	b.w	8003ea6 <__retarget_lock_release_recursive>
 8003d62:	bf00      	nop
 8003d64:	20012e1e 	.word	0x20012e1e

08003d68 <__sinit>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	f7ff fff0 	bl	8003d50 <__sinit_lock_acquire>
 8003d70:	69a3      	ldr	r3, [r4, #24]
 8003d72:	b11b      	cbz	r3, 8003d7c <__sinit+0x14>
 8003d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d78:	f7ff bff0 	b.w	8003d5c <__sinit_lock_release>
 8003d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d80:	6523      	str	r3, [r4, #80]	; 0x50
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <__sinit+0x68>)
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <__sinit+0x6c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	bf04      	itt	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	61a3      	streq	r3, [r4, #24]
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 f820 	bl	8003dd8 <__sfp>
 8003d98:	6060      	str	r0, [r4, #4]
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 f81c 	bl	8003dd8 <__sfp>
 8003da0:	60a0      	str	r0, [r4, #8]
 8003da2:	4620      	mov	r0, r4
 8003da4:	f000 f818 	bl	8003dd8 <__sfp>
 8003da8:	2200      	movs	r2, #0
 8003daa:	60e0      	str	r0, [r4, #12]
 8003dac:	2104      	movs	r1, #4
 8003dae:	6860      	ldr	r0, [r4, #4]
 8003db0:	f7ff ff82 	bl	8003cb8 <std>
 8003db4:	68a0      	ldr	r0, [r4, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	2109      	movs	r1, #9
 8003dba:	f7ff ff7d 	bl	8003cb8 <std>
 8003dbe:	68e0      	ldr	r0, [r4, #12]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	2112      	movs	r1, #18
 8003dc4:	f7ff ff78 	bl	8003cb8 <std>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	61a3      	str	r3, [r4, #24]
 8003dcc:	e7d2      	b.n	8003d74 <__sinit+0xc>
 8003dce:	bf00      	nop
 8003dd0:	08004978 	.word	0x08004978
 8003dd4:	08003d01 	.word	0x08003d01

08003dd8 <__sfp>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	4607      	mov	r7, r0
 8003ddc:	f7ff ffac 	bl	8003d38 <__sfp_lock_acquire>
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <__sfp+0x84>)
 8003de2:	681e      	ldr	r6, [r3, #0]
 8003de4:	69b3      	ldr	r3, [r6, #24]
 8003de6:	b913      	cbnz	r3, 8003dee <__sfp+0x16>
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff ffbd 	bl	8003d68 <__sinit>
 8003dee:	3648      	adds	r6, #72	; 0x48
 8003df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	d503      	bpl.n	8003e00 <__sfp+0x28>
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	b30b      	cbz	r3, 8003e40 <__sfp+0x68>
 8003dfc:	6836      	ldr	r6, [r6, #0]
 8003dfe:	e7f7      	b.n	8003df0 <__sfp+0x18>
 8003e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e04:	b9d5      	cbnz	r5, 8003e3c <__sfp+0x64>
 8003e06:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <__sfp+0x88>)
 8003e08:	60e3      	str	r3, [r4, #12]
 8003e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e10:	f000 f847 	bl	8003ea2 <__retarget_lock_init_recursive>
 8003e14:	f7ff ff96 	bl	8003d44 <__sfp_lock_release>
 8003e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e20:	6025      	str	r5, [r4, #0]
 8003e22:	61a5      	str	r5, [r4, #24]
 8003e24:	2208      	movs	r2, #8
 8003e26:	4629      	mov	r1, r5
 8003e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e2c:	f7ff fd2c 	bl	8003888 <memset>
 8003e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e38:	4620      	mov	r0, r4
 8003e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3c:	3468      	adds	r4, #104	; 0x68
 8003e3e:	e7d9      	b.n	8003df4 <__sfp+0x1c>
 8003e40:	2104      	movs	r1, #4
 8003e42:	4638      	mov	r0, r7
 8003e44:	f7ff ff62 	bl	8003d0c <__sfmoreglue>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	6030      	str	r0, [r6, #0]
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d1d5      	bne.n	8003dfc <__sfp+0x24>
 8003e50:	f7ff ff78 	bl	8003d44 <__sfp_lock_release>
 8003e54:	230c      	movs	r3, #12
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	e7ee      	b.n	8003e38 <__sfp+0x60>
 8003e5a:	bf00      	nop
 8003e5c:	08004978 	.word	0x08004978
 8003e60:	ffff0001 	.word	0xffff0001

08003e64 <_fwalk_reent>:
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	4606      	mov	r6, r0
 8003e6a:	4688      	mov	r8, r1
 8003e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e70:	2700      	movs	r7, #0
 8003e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e76:	f1b9 0901 	subs.w	r9, r9, #1
 8003e7a:	d505      	bpl.n	8003e88 <_fwalk_reent+0x24>
 8003e7c:	6824      	ldr	r4, [r4, #0]
 8003e7e:	2c00      	cmp	r4, #0
 8003e80:	d1f7      	bne.n	8003e72 <_fwalk_reent+0xe>
 8003e82:	4638      	mov	r0, r7
 8003e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e88:	89ab      	ldrh	r3, [r5, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d907      	bls.n	8003e9e <_fwalk_reent+0x3a>
 8003e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e92:	3301      	adds	r3, #1
 8003e94:	d003      	beq.n	8003e9e <_fwalk_reent+0x3a>
 8003e96:	4629      	mov	r1, r5
 8003e98:	4630      	mov	r0, r6
 8003e9a:	47c0      	blx	r8
 8003e9c:	4307      	orrs	r7, r0
 8003e9e:	3568      	adds	r5, #104	; 0x68
 8003ea0:	e7e9      	b.n	8003e76 <_fwalk_reent+0x12>

08003ea2 <__retarget_lock_init_recursive>:
 8003ea2:	4770      	bx	lr

08003ea4 <__retarget_lock_acquire_recursive>:
 8003ea4:	4770      	bx	lr

08003ea6 <__retarget_lock_release_recursive>:
 8003ea6:	4770      	bx	lr

08003ea8 <__swhatbuf_r>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	460e      	mov	r6, r1
 8003eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	b096      	sub	sp, #88	; 0x58
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	da08      	bge.n	8003ecc <__swhatbuf_r+0x24>
 8003eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	061a      	lsls	r2, r3, #24
 8003ec4:	d410      	bmi.n	8003ee8 <__swhatbuf_r+0x40>
 8003ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eca:	e00e      	b.n	8003eea <__swhatbuf_r+0x42>
 8003ecc:	466a      	mov	r2, sp
 8003ece:	f000 fc95 	bl	80047fc <_fstat_r>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	dbf1      	blt.n	8003eba <__swhatbuf_r+0x12>
 8003ed6:	9a01      	ldr	r2, [sp, #4]
 8003ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ee0:	425a      	negs	r2, r3
 8003ee2:	415a      	adcs	r2, r3
 8003ee4:	602a      	str	r2, [r5, #0]
 8003ee6:	e7ee      	b.n	8003ec6 <__swhatbuf_r+0x1e>
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	2000      	movs	r0, #0
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	b016      	add	sp, #88	; 0x58
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ef4 <__smakebuf_r>:
 8003ef4:	898b      	ldrh	r3, [r1, #12]
 8003ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ef8:	079d      	lsls	r5, r3, #30
 8003efa:	4606      	mov	r6, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	d507      	bpl.n	8003f10 <__smakebuf_r+0x1c>
 8003f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	6163      	str	r3, [r4, #20]
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	ab01      	add	r3, sp, #4
 8003f12:	466a      	mov	r2, sp
 8003f14:	f7ff ffc8 	bl	8003ea8 <__swhatbuf_r>
 8003f18:	9900      	ldr	r1, [sp, #0]
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f895 	bl	800404c <_malloc_r>
 8003f22:	b948      	cbnz	r0, 8003f38 <__smakebuf_r+0x44>
 8003f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f28:	059a      	lsls	r2, r3, #22
 8003f2a:	d4ef      	bmi.n	8003f0c <__smakebuf_r+0x18>
 8003f2c:	f023 0303 	bic.w	r3, r3, #3
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	e7e3      	b.n	8003f00 <__smakebuf_r+0xc>
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <__smakebuf_r+0x7c>)
 8003f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	6020      	str	r0, [r4, #0]
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	9b00      	ldr	r3, [sp, #0]
 8003f48:	6163      	str	r3, [r4, #20]
 8003f4a:	9b01      	ldr	r3, [sp, #4]
 8003f4c:	6120      	str	r0, [r4, #16]
 8003f4e:	b15b      	cbz	r3, 8003f68 <__smakebuf_r+0x74>
 8003f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 fc63 	bl	8004820 <_isatty_r>
 8003f5a:	b128      	cbz	r0, 8003f68 <__smakebuf_r+0x74>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	89a0      	ldrh	r0, [r4, #12]
 8003f6a:	4305      	orrs	r5, r0
 8003f6c:	81a5      	strh	r5, [r4, #12]
 8003f6e:	e7cd      	b.n	8003f0c <__smakebuf_r+0x18>
 8003f70:	08003d01 	.word	0x08003d01

08003f74 <_free_r>:
 8003f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f76:	2900      	cmp	r1, #0
 8003f78:	d044      	beq.n	8004004 <_free_r+0x90>
 8003f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7e:	9001      	str	r0, [sp, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f1a1 0404 	sub.w	r4, r1, #4
 8003f86:	bfb8      	it	lt
 8003f88:	18e4      	addlt	r4, r4, r3
 8003f8a:	f000 fc6b 	bl	8004864 <__malloc_lock>
 8003f8e:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <_free_r+0x94>)
 8003f90:	9801      	ldr	r0, [sp, #4]
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	b933      	cbnz	r3, 8003fa4 <_free_r+0x30>
 8003f96:	6063      	str	r3, [r4, #4]
 8003f98:	6014      	str	r4, [r2, #0]
 8003f9a:	b003      	add	sp, #12
 8003f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fa0:	f000 bc66 	b.w	8004870 <__malloc_unlock>
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d908      	bls.n	8003fba <_free_r+0x46>
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	1961      	adds	r1, r4, r5
 8003fac:	428b      	cmp	r3, r1
 8003fae:	bf01      	itttt	eq
 8003fb0:	6819      	ldreq	r1, [r3, #0]
 8003fb2:	685b      	ldreq	r3, [r3, #4]
 8003fb4:	1949      	addeq	r1, r1, r5
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	e7ed      	b.n	8003f96 <_free_r+0x22>
 8003fba:	461a      	mov	r2, r3
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b10b      	cbz	r3, 8003fc4 <_free_r+0x50>
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	d9fa      	bls.n	8003fba <_free_r+0x46>
 8003fc4:	6811      	ldr	r1, [r2, #0]
 8003fc6:	1855      	adds	r5, r2, r1
 8003fc8:	42a5      	cmp	r5, r4
 8003fca:	d10b      	bne.n	8003fe4 <_free_r+0x70>
 8003fcc:	6824      	ldr	r4, [r4, #0]
 8003fce:	4421      	add	r1, r4
 8003fd0:	1854      	adds	r4, r2, r1
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	6011      	str	r1, [r2, #0]
 8003fd6:	d1e0      	bne.n	8003f9a <_free_r+0x26>
 8003fd8:	681c      	ldr	r4, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	6053      	str	r3, [r2, #4]
 8003fde:	4421      	add	r1, r4
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	e7da      	b.n	8003f9a <_free_r+0x26>
 8003fe4:	d902      	bls.n	8003fec <_free_r+0x78>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	6003      	str	r3, [r0, #0]
 8003fea:	e7d6      	b.n	8003f9a <_free_r+0x26>
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	bf04      	itt	eq
 8003ff4:	6819      	ldreq	r1, [r3, #0]
 8003ff6:	685b      	ldreq	r3, [r3, #4]
 8003ff8:	6063      	str	r3, [r4, #4]
 8003ffa:	bf04      	itt	eq
 8003ffc:	1949      	addeq	r1, r1, r5
 8003ffe:	6021      	streq	r1, [r4, #0]
 8004000:	6054      	str	r4, [r2, #4]
 8004002:	e7ca      	b.n	8003f9a <_free_r+0x26>
 8004004:	b003      	add	sp, #12
 8004006:	bd30      	pop	{r4, r5, pc}
 8004008:	20012e20 	.word	0x20012e20

0800400c <sbrk_aligned>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4e0e      	ldr	r6, [pc, #56]	; (8004048 <sbrk_aligned+0x3c>)
 8004010:	460c      	mov	r4, r1
 8004012:	6831      	ldr	r1, [r6, #0]
 8004014:	4605      	mov	r5, r0
 8004016:	b911      	cbnz	r1, 800401e <sbrk_aligned+0x12>
 8004018:	f000 fb7a 	bl	8004710 <_sbrk_r>
 800401c:	6030      	str	r0, [r6, #0]
 800401e:	4621      	mov	r1, r4
 8004020:	4628      	mov	r0, r5
 8004022:	f000 fb75 	bl	8004710 <_sbrk_r>
 8004026:	1c43      	adds	r3, r0, #1
 8004028:	d00a      	beq.n	8004040 <sbrk_aligned+0x34>
 800402a:	1cc4      	adds	r4, r0, #3
 800402c:	f024 0403 	bic.w	r4, r4, #3
 8004030:	42a0      	cmp	r0, r4
 8004032:	d007      	beq.n	8004044 <sbrk_aligned+0x38>
 8004034:	1a21      	subs	r1, r4, r0
 8004036:	4628      	mov	r0, r5
 8004038:	f000 fb6a 	bl	8004710 <_sbrk_r>
 800403c:	3001      	adds	r0, #1
 800403e:	d101      	bne.n	8004044 <sbrk_aligned+0x38>
 8004040:	f04f 34ff 	mov.w	r4, #4294967295
 8004044:	4620      	mov	r0, r4
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	20012e24 	.word	0x20012e24

0800404c <_malloc_r>:
 800404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	1ccd      	adds	r5, r1, #3
 8004052:	f025 0503 	bic.w	r5, r5, #3
 8004056:	3508      	adds	r5, #8
 8004058:	2d0c      	cmp	r5, #12
 800405a:	bf38      	it	cc
 800405c:	250c      	movcc	r5, #12
 800405e:	2d00      	cmp	r5, #0
 8004060:	4607      	mov	r7, r0
 8004062:	db01      	blt.n	8004068 <_malloc_r+0x1c>
 8004064:	42a9      	cmp	r1, r5
 8004066:	d905      	bls.n	8004074 <_malloc_r+0x28>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	2600      	movs	r6, #0
 800406e:	4630      	mov	r0, r6
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	4e2e      	ldr	r6, [pc, #184]	; (8004130 <_malloc_r+0xe4>)
 8004076:	f000 fbf5 	bl	8004864 <__malloc_lock>
 800407a:	6833      	ldr	r3, [r6, #0]
 800407c:	461c      	mov	r4, r3
 800407e:	bb34      	cbnz	r4, 80040ce <_malloc_r+0x82>
 8004080:	4629      	mov	r1, r5
 8004082:	4638      	mov	r0, r7
 8004084:	f7ff ffc2 	bl	800400c <sbrk_aligned>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	4604      	mov	r4, r0
 800408c:	d14d      	bne.n	800412a <_malloc_r+0xde>
 800408e:	6834      	ldr	r4, [r6, #0]
 8004090:	4626      	mov	r6, r4
 8004092:	2e00      	cmp	r6, #0
 8004094:	d140      	bne.n	8004118 <_malloc_r+0xcc>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	4631      	mov	r1, r6
 800409a:	4638      	mov	r0, r7
 800409c:	eb04 0803 	add.w	r8, r4, r3
 80040a0:	f000 fb36 	bl	8004710 <_sbrk_r>
 80040a4:	4580      	cmp	r8, r0
 80040a6:	d13a      	bne.n	800411e <_malloc_r+0xd2>
 80040a8:	6821      	ldr	r1, [r4, #0]
 80040aa:	3503      	adds	r5, #3
 80040ac:	1a6d      	subs	r5, r5, r1
 80040ae:	f025 0503 	bic.w	r5, r5, #3
 80040b2:	3508      	adds	r5, #8
 80040b4:	2d0c      	cmp	r5, #12
 80040b6:	bf38      	it	cc
 80040b8:	250c      	movcc	r5, #12
 80040ba:	4629      	mov	r1, r5
 80040bc:	4638      	mov	r0, r7
 80040be:	f7ff ffa5 	bl	800400c <sbrk_aligned>
 80040c2:	3001      	adds	r0, #1
 80040c4:	d02b      	beq.n	800411e <_malloc_r+0xd2>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	442b      	add	r3, r5
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	e00e      	b.n	80040ec <_malloc_r+0xa0>
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	1b52      	subs	r2, r2, r5
 80040d2:	d41e      	bmi.n	8004112 <_malloc_r+0xc6>
 80040d4:	2a0b      	cmp	r2, #11
 80040d6:	d916      	bls.n	8004106 <_malloc_r+0xba>
 80040d8:	1961      	adds	r1, r4, r5
 80040da:	42a3      	cmp	r3, r4
 80040dc:	6025      	str	r5, [r4, #0]
 80040de:	bf18      	it	ne
 80040e0:	6059      	strne	r1, [r3, #4]
 80040e2:	6863      	ldr	r3, [r4, #4]
 80040e4:	bf08      	it	eq
 80040e6:	6031      	streq	r1, [r6, #0]
 80040e8:	5162      	str	r2, [r4, r5]
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	4638      	mov	r0, r7
 80040ee:	f104 060b 	add.w	r6, r4, #11
 80040f2:	f000 fbbd 	bl	8004870 <__malloc_unlock>
 80040f6:	f026 0607 	bic.w	r6, r6, #7
 80040fa:	1d23      	adds	r3, r4, #4
 80040fc:	1af2      	subs	r2, r6, r3
 80040fe:	d0b6      	beq.n	800406e <_malloc_r+0x22>
 8004100:	1b9b      	subs	r3, r3, r6
 8004102:	50a3      	str	r3, [r4, r2]
 8004104:	e7b3      	b.n	800406e <_malloc_r+0x22>
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	42a3      	cmp	r3, r4
 800410a:	bf0c      	ite	eq
 800410c:	6032      	streq	r2, [r6, #0]
 800410e:	605a      	strne	r2, [r3, #4]
 8004110:	e7ec      	b.n	80040ec <_malloc_r+0xa0>
 8004112:	4623      	mov	r3, r4
 8004114:	6864      	ldr	r4, [r4, #4]
 8004116:	e7b2      	b.n	800407e <_malloc_r+0x32>
 8004118:	4634      	mov	r4, r6
 800411a:	6876      	ldr	r6, [r6, #4]
 800411c:	e7b9      	b.n	8004092 <_malloc_r+0x46>
 800411e:	230c      	movs	r3, #12
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4638      	mov	r0, r7
 8004124:	f000 fba4 	bl	8004870 <__malloc_unlock>
 8004128:	e7a1      	b.n	800406e <_malloc_r+0x22>
 800412a:	6025      	str	r5, [r4, #0]
 800412c:	e7de      	b.n	80040ec <_malloc_r+0xa0>
 800412e:	bf00      	nop
 8004130:	20012e20 	.word	0x20012e20

08004134 <__sfputc_r>:
 8004134:	6893      	ldr	r3, [r2, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	b410      	push	{r4}
 800413c:	6093      	str	r3, [r2, #8]
 800413e:	da08      	bge.n	8004152 <__sfputc_r+0x1e>
 8004140:	6994      	ldr	r4, [r2, #24]
 8004142:	42a3      	cmp	r3, r4
 8004144:	db01      	blt.n	800414a <__sfputc_r+0x16>
 8004146:	290a      	cmp	r1, #10
 8004148:	d103      	bne.n	8004152 <__sfputc_r+0x1e>
 800414a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414e:	f7ff bc31 	b.w	80039b4 <__swbuf_r>
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	1c58      	adds	r0, r3, #1
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	7019      	strb	r1, [r3, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004160:	4770      	bx	lr

08004162 <__sfputs_r>:
 8004162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004164:	4606      	mov	r6, r0
 8004166:	460f      	mov	r7, r1
 8004168:	4614      	mov	r4, r2
 800416a:	18d5      	adds	r5, r2, r3
 800416c:	42ac      	cmp	r4, r5
 800416e:	d101      	bne.n	8004174 <__sfputs_r+0x12>
 8004170:	2000      	movs	r0, #0
 8004172:	e007      	b.n	8004184 <__sfputs_r+0x22>
 8004174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004178:	463a      	mov	r2, r7
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff ffda 	bl	8004134 <__sfputc_r>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d1f3      	bne.n	800416c <__sfputs_r+0xa>
 8004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004188 <_vfiprintf_r>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	460d      	mov	r5, r1
 800418e:	b09d      	sub	sp, #116	; 0x74
 8004190:	4614      	mov	r4, r2
 8004192:	4698      	mov	r8, r3
 8004194:	4606      	mov	r6, r0
 8004196:	b118      	cbz	r0, 80041a0 <_vfiprintf_r+0x18>
 8004198:	6983      	ldr	r3, [r0, #24]
 800419a:	b90b      	cbnz	r3, 80041a0 <_vfiprintf_r+0x18>
 800419c:	f7ff fde4 	bl	8003d68 <__sinit>
 80041a0:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <_vfiprintf_r+0x240>)
 80041a2:	429d      	cmp	r5, r3
 80041a4:	d11b      	bne.n	80041de <_vfiprintf_r+0x56>
 80041a6:	6875      	ldr	r5, [r6, #4]
 80041a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041aa:	07d9      	lsls	r1, r3, #31
 80041ac:	d405      	bmi.n	80041ba <_vfiprintf_r+0x32>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	059a      	lsls	r2, r3, #22
 80041b2:	d402      	bmi.n	80041ba <_vfiprintf_r+0x32>
 80041b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b6:	f7ff fe75 	bl	8003ea4 <__retarget_lock_acquire_recursive>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	d501      	bpl.n	80041c4 <_vfiprintf_r+0x3c>
 80041c0:	692b      	ldr	r3, [r5, #16]
 80041c2:	b9eb      	cbnz	r3, 8004200 <_vfiprintf_r+0x78>
 80041c4:	4629      	mov	r1, r5
 80041c6:	4630      	mov	r0, r6
 80041c8:	f7ff fc46 	bl	8003a58 <__swsetup_r>
 80041cc:	b1c0      	cbz	r0, 8004200 <_vfiprintf_r+0x78>
 80041ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041d0:	07dc      	lsls	r4, r3, #31
 80041d2:	d50e      	bpl.n	80041f2 <_vfiprintf_r+0x6a>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b01d      	add	sp, #116	; 0x74
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <_vfiprintf_r+0x244>)
 80041e0:	429d      	cmp	r5, r3
 80041e2:	d101      	bne.n	80041e8 <_vfiprintf_r+0x60>
 80041e4:	68b5      	ldr	r5, [r6, #8]
 80041e6:	e7df      	b.n	80041a8 <_vfiprintf_r+0x20>
 80041e8:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <_vfiprintf_r+0x248>)
 80041ea:	429d      	cmp	r5, r3
 80041ec:	bf08      	it	eq
 80041ee:	68f5      	ldreq	r5, [r6, #12]
 80041f0:	e7da      	b.n	80041a8 <_vfiprintf_r+0x20>
 80041f2:	89ab      	ldrh	r3, [r5, #12]
 80041f4:	0598      	lsls	r0, r3, #22
 80041f6:	d4ed      	bmi.n	80041d4 <_vfiprintf_r+0x4c>
 80041f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041fa:	f7ff fe54 	bl	8003ea6 <__retarget_lock_release_recursive>
 80041fe:	e7e9      	b.n	80041d4 <_vfiprintf_r+0x4c>
 8004200:	2300      	movs	r3, #0
 8004202:	9309      	str	r3, [sp, #36]	; 0x24
 8004204:	2320      	movs	r3, #32
 8004206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800420a:	f8cd 800c 	str.w	r8, [sp, #12]
 800420e:	2330      	movs	r3, #48	; 0x30
 8004210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043d4 <_vfiprintf_r+0x24c>
 8004214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004218:	f04f 0901 	mov.w	r9, #1
 800421c:	4623      	mov	r3, r4
 800421e:	469a      	mov	sl, r3
 8004220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004224:	b10a      	cbz	r2, 800422a <_vfiprintf_r+0xa2>
 8004226:	2a25      	cmp	r2, #37	; 0x25
 8004228:	d1f9      	bne.n	800421e <_vfiprintf_r+0x96>
 800422a:	ebba 0b04 	subs.w	fp, sl, r4
 800422e:	d00b      	beq.n	8004248 <_vfiprintf_r+0xc0>
 8004230:	465b      	mov	r3, fp
 8004232:	4622      	mov	r2, r4
 8004234:	4629      	mov	r1, r5
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff ff93 	bl	8004162 <__sfputs_r>
 800423c:	3001      	adds	r0, #1
 800423e:	f000 80aa 	beq.w	8004396 <_vfiprintf_r+0x20e>
 8004242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004244:	445a      	add	r2, fp
 8004246:	9209      	str	r2, [sp, #36]	; 0x24
 8004248:	f89a 3000 	ldrb.w	r3, [sl]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80a2 	beq.w	8004396 <_vfiprintf_r+0x20e>
 8004252:	2300      	movs	r3, #0
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800425c:	f10a 0a01 	add.w	sl, sl, #1
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	9307      	str	r3, [sp, #28]
 8004264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004268:	931a      	str	r3, [sp, #104]	; 0x68
 800426a:	4654      	mov	r4, sl
 800426c:	2205      	movs	r2, #5
 800426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004272:	4858      	ldr	r0, [pc, #352]	; (80043d4 <_vfiprintf_r+0x24c>)
 8004274:	f7fb ffac 	bl	80001d0 <memchr>
 8004278:	9a04      	ldr	r2, [sp, #16]
 800427a:	b9d8      	cbnz	r0, 80042b4 <_vfiprintf_r+0x12c>
 800427c:	06d1      	lsls	r1, r2, #27
 800427e:	bf44      	itt	mi
 8004280:	2320      	movmi	r3, #32
 8004282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004286:	0713      	lsls	r3, r2, #28
 8004288:	bf44      	itt	mi
 800428a:	232b      	movmi	r3, #43	; 0x2b
 800428c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004290:	f89a 3000 	ldrb.w	r3, [sl]
 8004294:	2b2a      	cmp	r3, #42	; 0x2a
 8004296:	d015      	beq.n	80042c4 <_vfiprintf_r+0x13c>
 8004298:	9a07      	ldr	r2, [sp, #28]
 800429a:	4654      	mov	r4, sl
 800429c:	2000      	movs	r0, #0
 800429e:	f04f 0c0a 	mov.w	ip, #10
 80042a2:	4621      	mov	r1, r4
 80042a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a8:	3b30      	subs	r3, #48	; 0x30
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	d94e      	bls.n	800434c <_vfiprintf_r+0x1c4>
 80042ae:	b1b0      	cbz	r0, 80042de <_vfiprintf_r+0x156>
 80042b0:	9207      	str	r2, [sp, #28]
 80042b2:	e014      	b.n	80042de <_vfiprintf_r+0x156>
 80042b4:	eba0 0308 	sub.w	r3, r0, r8
 80042b8:	fa09 f303 	lsl.w	r3, r9, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	46a2      	mov	sl, r4
 80042c2:	e7d2      	b.n	800426a <_vfiprintf_r+0xe2>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	1d19      	adds	r1, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	9103      	str	r1, [sp, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bfbb      	ittet	lt
 80042d0:	425b      	neglt	r3, r3
 80042d2:	f042 0202 	orrlt.w	r2, r2, #2
 80042d6:	9307      	strge	r3, [sp, #28]
 80042d8:	9307      	strlt	r3, [sp, #28]
 80042da:	bfb8      	it	lt
 80042dc:	9204      	strlt	r2, [sp, #16]
 80042de:	7823      	ldrb	r3, [r4, #0]
 80042e0:	2b2e      	cmp	r3, #46	; 0x2e
 80042e2:	d10c      	bne.n	80042fe <_vfiprintf_r+0x176>
 80042e4:	7863      	ldrb	r3, [r4, #1]
 80042e6:	2b2a      	cmp	r3, #42	; 0x2a
 80042e8:	d135      	bne.n	8004356 <_vfiprintf_r+0x1ce>
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	9203      	str	r2, [sp, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfb8      	it	lt
 80042f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042fa:	3402      	adds	r4, #2
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043e4 <_vfiprintf_r+0x25c>
 8004302:	7821      	ldrb	r1, [r4, #0]
 8004304:	2203      	movs	r2, #3
 8004306:	4650      	mov	r0, sl
 8004308:	f7fb ff62 	bl	80001d0 <memchr>
 800430c:	b140      	cbz	r0, 8004320 <_vfiprintf_r+0x198>
 800430e:	2340      	movs	r3, #64	; 0x40
 8004310:	eba0 000a 	sub.w	r0, r0, sl
 8004314:	fa03 f000 	lsl.w	r0, r3, r0
 8004318:	9b04      	ldr	r3, [sp, #16]
 800431a:	4303      	orrs	r3, r0
 800431c:	3401      	adds	r4, #1
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004324:	482c      	ldr	r0, [pc, #176]	; (80043d8 <_vfiprintf_r+0x250>)
 8004326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800432a:	2206      	movs	r2, #6
 800432c:	f7fb ff50 	bl	80001d0 <memchr>
 8004330:	2800      	cmp	r0, #0
 8004332:	d03f      	beq.n	80043b4 <_vfiprintf_r+0x22c>
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <_vfiprintf_r+0x254>)
 8004336:	bb1b      	cbnz	r3, 8004380 <_vfiprintf_r+0x1f8>
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	3307      	adds	r3, #7
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	3308      	adds	r3, #8
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	443b      	add	r3, r7
 8004348:	9309      	str	r3, [sp, #36]	; 0x24
 800434a:	e767      	b.n	800421c <_vfiprintf_r+0x94>
 800434c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004350:	460c      	mov	r4, r1
 8004352:	2001      	movs	r0, #1
 8004354:	e7a5      	b.n	80042a2 <_vfiprintf_r+0x11a>
 8004356:	2300      	movs	r3, #0
 8004358:	3401      	adds	r4, #1
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	4619      	mov	r1, r3
 800435e:	f04f 0c0a 	mov.w	ip, #10
 8004362:	4620      	mov	r0, r4
 8004364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004368:	3a30      	subs	r2, #48	; 0x30
 800436a:	2a09      	cmp	r2, #9
 800436c:	d903      	bls.n	8004376 <_vfiprintf_r+0x1ee>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0c5      	beq.n	80042fe <_vfiprintf_r+0x176>
 8004372:	9105      	str	r1, [sp, #20]
 8004374:	e7c3      	b.n	80042fe <_vfiprintf_r+0x176>
 8004376:	fb0c 2101 	mla	r1, ip, r1, r2
 800437a:	4604      	mov	r4, r0
 800437c:	2301      	movs	r3, #1
 800437e:	e7f0      	b.n	8004362 <_vfiprintf_r+0x1da>
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	462a      	mov	r2, r5
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <_vfiprintf_r+0x258>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	4630      	mov	r0, r6
 800438c:	f3af 8000 	nop.w
 8004390:	4607      	mov	r7, r0
 8004392:	1c78      	adds	r0, r7, #1
 8004394:	d1d6      	bne.n	8004344 <_vfiprintf_r+0x1bc>
 8004396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004398:	07d9      	lsls	r1, r3, #31
 800439a:	d405      	bmi.n	80043a8 <_vfiprintf_r+0x220>
 800439c:	89ab      	ldrh	r3, [r5, #12]
 800439e:	059a      	lsls	r2, r3, #22
 80043a0:	d402      	bmi.n	80043a8 <_vfiprintf_r+0x220>
 80043a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043a4:	f7ff fd7f 	bl	8003ea6 <__retarget_lock_release_recursive>
 80043a8:	89ab      	ldrh	r3, [r5, #12]
 80043aa:	065b      	lsls	r3, r3, #25
 80043ac:	f53f af12 	bmi.w	80041d4 <_vfiprintf_r+0x4c>
 80043b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043b2:	e711      	b.n	80041d8 <_vfiprintf_r+0x50>
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <_vfiprintf_r+0x258>)
 80043bc:	a904      	add	r1, sp, #16
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 f880 	bl	80044c4 <_printf_i>
 80043c4:	e7e4      	b.n	8004390 <_vfiprintf_r+0x208>
 80043c6:	bf00      	nop
 80043c8:	0800499c 	.word	0x0800499c
 80043cc:	080049bc 	.word	0x080049bc
 80043d0:	0800497c 	.word	0x0800497c
 80043d4:	080049dc 	.word	0x080049dc
 80043d8:	080049e6 	.word	0x080049e6
 80043dc:	00000000 	.word	0x00000000
 80043e0:	08004163 	.word	0x08004163
 80043e4:	080049e2 	.word	0x080049e2

080043e8 <_printf_common>:
 80043e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	4616      	mov	r6, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	688a      	ldr	r2, [r1, #8]
 80043f2:	690b      	ldr	r3, [r1, #16]
 80043f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfb8      	it	lt
 80043fc:	4613      	movlt	r3, r2
 80043fe:	6033      	str	r3, [r6, #0]
 8004400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004404:	4607      	mov	r7, r0
 8004406:	460c      	mov	r4, r1
 8004408:	b10a      	cbz	r2, 800440e <_printf_common+0x26>
 800440a:	3301      	adds	r3, #1
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	0699      	lsls	r1, r3, #26
 8004412:	bf42      	ittt	mi
 8004414:	6833      	ldrmi	r3, [r6, #0]
 8004416:	3302      	addmi	r3, #2
 8004418:	6033      	strmi	r3, [r6, #0]
 800441a:	6825      	ldr	r5, [r4, #0]
 800441c:	f015 0506 	ands.w	r5, r5, #6
 8004420:	d106      	bne.n	8004430 <_printf_common+0x48>
 8004422:	f104 0a19 	add.w	sl, r4, #25
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	6832      	ldr	r2, [r6, #0]
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	42ab      	cmp	r3, r5
 800442e:	dc26      	bgt.n	800447e <_printf_common+0x96>
 8004430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004434:	1e13      	subs	r3, r2, #0
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	2301      	movne	r3, #1
 800443c:	0692      	lsls	r2, r2, #26
 800443e:	d42b      	bmi.n	8004498 <_printf_common+0xb0>
 8004440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004444:	4649      	mov	r1, r9
 8004446:	4638      	mov	r0, r7
 8004448:	47c0      	blx	r8
 800444a:	3001      	adds	r0, #1
 800444c:	d01e      	beq.n	800448c <_printf_common+0xa4>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	68e5      	ldr	r5, [r4, #12]
 8004452:	6832      	ldr	r2, [r6, #0]
 8004454:	f003 0306 	and.w	r3, r3, #6
 8004458:	2b04      	cmp	r3, #4
 800445a:	bf08      	it	eq
 800445c:	1aad      	subeq	r5, r5, r2
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	6922      	ldr	r2, [r4, #16]
 8004462:	bf0c      	ite	eq
 8004464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004468:	2500      	movne	r5, #0
 800446a:	4293      	cmp	r3, r2
 800446c:	bfc4      	itt	gt
 800446e:	1a9b      	subgt	r3, r3, r2
 8004470:	18ed      	addgt	r5, r5, r3
 8004472:	2600      	movs	r6, #0
 8004474:	341a      	adds	r4, #26
 8004476:	42b5      	cmp	r5, r6
 8004478:	d11a      	bne.n	80044b0 <_printf_common+0xc8>
 800447a:	2000      	movs	r0, #0
 800447c:	e008      	b.n	8004490 <_printf_common+0xa8>
 800447e:	2301      	movs	r3, #1
 8004480:	4652      	mov	r2, sl
 8004482:	4649      	mov	r1, r9
 8004484:	4638      	mov	r0, r7
 8004486:	47c0      	blx	r8
 8004488:	3001      	adds	r0, #1
 800448a:	d103      	bne.n	8004494 <_printf_common+0xac>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004494:	3501      	adds	r5, #1
 8004496:	e7c6      	b.n	8004426 <_printf_common+0x3e>
 8004498:	18e1      	adds	r1, r4, r3
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	2030      	movs	r0, #48	; 0x30
 800449e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a2:	4422      	add	r2, r4
 80044a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ac:	3302      	adds	r3, #2
 80044ae:	e7c7      	b.n	8004440 <_printf_common+0x58>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4622      	mov	r2, r4
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d0e6      	beq.n	800448c <_printf_common+0xa4>
 80044be:	3601      	adds	r6, #1
 80044c0:	e7d9      	b.n	8004476 <_printf_common+0x8e>
	...

080044c4 <_printf_i>:
 80044c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	7e0f      	ldrb	r7, [r1, #24]
 80044ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044cc:	2f78      	cmp	r7, #120	; 0x78
 80044ce:	4691      	mov	r9, r2
 80044d0:	4680      	mov	r8, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	469a      	mov	sl, r3
 80044d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044da:	d807      	bhi.n	80044ec <_printf_i+0x28>
 80044dc:	2f62      	cmp	r7, #98	; 0x62
 80044de:	d80a      	bhi.n	80044f6 <_printf_i+0x32>
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f000 80d8 	beq.w	8004696 <_printf_i+0x1d2>
 80044e6:	2f58      	cmp	r7, #88	; 0x58
 80044e8:	f000 80a3 	beq.w	8004632 <_printf_i+0x16e>
 80044ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044f4:	e03a      	b.n	800456c <_printf_i+0xa8>
 80044f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044fa:	2b15      	cmp	r3, #21
 80044fc:	d8f6      	bhi.n	80044ec <_printf_i+0x28>
 80044fe:	a101      	add	r1, pc, #4	; (adr r1, 8004504 <_printf_i+0x40>)
 8004500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004504:	0800455d 	.word	0x0800455d
 8004508:	08004571 	.word	0x08004571
 800450c:	080044ed 	.word	0x080044ed
 8004510:	080044ed 	.word	0x080044ed
 8004514:	080044ed 	.word	0x080044ed
 8004518:	080044ed 	.word	0x080044ed
 800451c:	08004571 	.word	0x08004571
 8004520:	080044ed 	.word	0x080044ed
 8004524:	080044ed 	.word	0x080044ed
 8004528:	080044ed 	.word	0x080044ed
 800452c:	080044ed 	.word	0x080044ed
 8004530:	0800467d 	.word	0x0800467d
 8004534:	080045a1 	.word	0x080045a1
 8004538:	0800465f 	.word	0x0800465f
 800453c:	080044ed 	.word	0x080044ed
 8004540:	080044ed 	.word	0x080044ed
 8004544:	0800469f 	.word	0x0800469f
 8004548:	080044ed 	.word	0x080044ed
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080044ed 	.word	0x080044ed
 8004554:	080044ed 	.word	0x080044ed
 8004558:	08004667 	.word	0x08004667
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800456c:	2301      	movs	r3, #1
 800456e:	e0a3      	b.n	80046b8 <_printf_i+0x1f4>
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	6829      	ldr	r1, [r5, #0]
 8004574:	0606      	lsls	r6, r0, #24
 8004576:	f101 0304 	add.w	r3, r1, #4
 800457a:	d50a      	bpl.n	8004592 <_printf_i+0xce>
 800457c:	680e      	ldr	r6, [r1, #0]
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	2e00      	cmp	r6, #0
 8004582:	da03      	bge.n	800458c <_printf_i+0xc8>
 8004584:	232d      	movs	r3, #45	; 0x2d
 8004586:	4276      	negs	r6, r6
 8004588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458c:	485e      	ldr	r0, [pc, #376]	; (8004708 <_printf_i+0x244>)
 800458e:	230a      	movs	r3, #10
 8004590:	e019      	b.n	80045c6 <_printf_i+0x102>
 8004592:	680e      	ldr	r6, [r1, #0]
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800459a:	bf18      	it	ne
 800459c:	b236      	sxthne	r6, r6
 800459e:	e7ef      	b.n	8004580 <_printf_i+0xbc>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	1d19      	adds	r1, r3, #4
 80045a6:	6029      	str	r1, [r5, #0]
 80045a8:	0601      	lsls	r1, r0, #24
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0xec>
 80045ac:	681e      	ldr	r6, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0xf2>
 80045b0:	0646      	lsls	r6, r0, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0xe8>
 80045b4:	881e      	ldrh	r6, [r3, #0]
 80045b6:	4854      	ldr	r0, [pc, #336]	; (8004708 <_printf_i+0x244>)
 80045b8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ba:	bf0c      	ite	eq
 80045bc:	2308      	moveq	r3, #8
 80045be:	230a      	movne	r3, #10
 80045c0:	2100      	movs	r1, #0
 80045c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045c6:	6865      	ldr	r5, [r4, #4]
 80045c8:	60a5      	str	r5, [r4, #8]
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	bfa2      	ittt	ge
 80045ce:	6821      	ldrge	r1, [r4, #0]
 80045d0:	f021 0104 	bicge.w	r1, r1, #4
 80045d4:	6021      	strge	r1, [r4, #0]
 80045d6:	b90e      	cbnz	r6, 80045dc <_printf_i+0x118>
 80045d8:	2d00      	cmp	r5, #0
 80045da:	d04d      	beq.n	8004678 <_printf_i+0x1b4>
 80045dc:	4615      	mov	r5, r2
 80045de:	fbb6 f1f3 	udiv	r1, r6, r3
 80045e2:	fb03 6711 	mls	r7, r3, r1, r6
 80045e6:	5dc7      	ldrb	r7, [r0, r7]
 80045e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ec:	4637      	mov	r7, r6
 80045ee:	42bb      	cmp	r3, r7
 80045f0:	460e      	mov	r6, r1
 80045f2:	d9f4      	bls.n	80045de <_printf_i+0x11a>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d10b      	bne.n	8004610 <_printf_i+0x14c>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	07de      	lsls	r6, r3, #31
 80045fc:	d508      	bpl.n	8004610 <_printf_i+0x14c>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	6861      	ldr	r1, [r4, #4]
 8004602:	4299      	cmp	r1, r3
 8004604:	bfde      	ittt	le
 8004606:	2330      	movle	r3, #48	; 0x30
 8004608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800460c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004610:	1b52      	subs	r2, r2, r5
 8004612:	6122      	str	r2, [r4, #16]
 8004614:	f8cd a000 	str.w	sl, [sp]
 8004618:	464b      	mov	r3, r9
 800461a:	aa03      	add	r2, sp, #12
 800461c:	4621      	mov	r1, r4
 800461e:	4640      	mov	r0, r8
 8004620:	f7ff fee2 	bl	80043e8 <_printf_common>
 8004624:	3001      	adds	r0, #1
 8004626:	d14c      	bne.n	80046c2 <_printf_i+0x1fe>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	b004      	add	sp, #16
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	4835      	ldr	r0, [pc, #212]	; (8004708 <_printf_i+0x244>)
 8004634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004638:	6829      	ldr	r1, [r5, #0]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004640:	6029      	str	r1, [r5, #0]
 8004642:	061d      	lsls	r5, r3, #24
 8004644:	d514      	bpl.n	8004670 <_printf_i+0x1ac>
 8004646:	07df      	lsls	r7, r3, #31
 8004648:	bf44      	itt	mi
 800464a:	f043 0320 	orrmi.w	r3, r3, #32
 800464e:	6023      	strmi	r3, [r4, #0]
 8004650:	b91e      	cbnz	r6, 800465a <_printf_i+0x196>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f023 0320 	bic.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	2310      	movs	r3, #16
 800465c:	e7b0      	b.n	80045c0 <_printf_i+0xfc>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	2378      	movs	r3, #120	; 0x78
 8004668:	4828      	ldr	r0, [pc, #160]	; (800470c <_printf_i+0x248>)
 800466a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800466e:	e7e3      	b.n	8004638 <_printf_i+0x174>
 8004670:	0659      	lsls	r1, r3, #25
 8004672:	bf48      	it	mi
 8004674:	b2b6      	uxthmi	r6, r6
 8004676:	e7e6      	b.n	8004646 <_printf_i+0x182>
 8004678:	4615      	mov	r5, r2
 800467a:	e7bb      	b.n	80045f4 <_printf_i+0x130>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	6826      	ldr	r6, [r4, #0]
 8004680:	6961      	ldr	r1, [r4, #20]
 8004682:	1d18      	adds	r0, r3, #4
 8004684:	6028      	str	r0, [r5, #0]
 8004686:	0635      	lsls	r5, r6, #24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	d501      	bpl.n	8004690 <_printf_i+0x1cc>
 800468c:	6019      	str	r1, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0x1d2>
 8004690:	0670      	lsls	r0, r6, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0x1c8>
 8004694:	8019      	strh	r1, [r3, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	4615      	mov	r5, r2
 800469c:	e7ba      	b.n	8004614 <_printf_i+0x150>
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	602a      	str	r2, [r5, #0]
 80046a4:	681d      	ldr	r5, [r3, #0]
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4628      	mov	r0, r5
 80046ac:	f7fb fd90 	bl	80001d0 <memchr>
 80046b0:	b108      	cbz	r0, 80046b6 <_printf_i+0x1f2>
 80046b2:	1b40      	subs	r0, r0, r5
 80046b4:	6060      	str	r0, [r4, #4]
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	2300      	movs	r3, #0
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c0:	e7a8      	b.n	8004614 <_printf_i+0x150>
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	462a      	mov	r2, r5
 80046c6:	4649      	mov	r1, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	47d0      	blx	sl
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0ab      	beq.n	8004628 <_printf_i+0x164>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	d413      	bmi.n	80046fe <_printf_i+0x23a>
 80046d6:	68e0      	ldr	r0, [r4, #12]
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	4298      	cmp	r0, r3
 80046dc:	bfb8      	it	lt
 80046de:	4618      	movlt	r0, r3
 80046e0:	e7a4      	b.n	800462c <_printf_i+0x168>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4632      	mov	r2, r6
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d09b      	beq.n	8004628 <_printf_i+0x164>
 80046f0:	3501      	adds	r5, #1
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	9903      	ldr	r1, [sp, #12]
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	dcf2      	bgt.n	80046e2 <_printf_i+0x21e>
 80046fc:	e7eb      	b.n	80046d6 <_printf_i+0x212>
 80046fe:	2500      	movs	r5, #0
 8004700:	f104 0619 	add.w	r6, r4, #25
 8004704:	e7f5      	b.n	80046f2 <_printf_i+0x22e>
 8004706:	bf00      	nop
 8004708:	080049ed 	.word	0x080049ed
 800470c:	080049fe 	.word	0x080049fe

08004710 <_sbrk_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d06      	ldr	r5, [pc, #24]	; (800472c <_sbrk_r+0x1c>)
 8004714:	2300      	movs	r3, #0
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc fa26 	bl	8000b6c <_sbrk>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_sbrk_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_sbrk_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20012e28 	.word	0x20012e28

08004730 <__sread>:
 8004730:	b510      	push	{r4, lr}
 8004732:	460c      	mov	r4, r1
 8004734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004738:	f000 f8a0 	bl	800487c <_read_r>
 800473c:	2800      	cmp	r0, #0
 800473e:	bfab      	itete	ge
 8004740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004742:	89a3      	ldrhlt	r3, [r4, #12]
 8004744:	181b      	addge	r3, r3, r0
 8004746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800474a:	bfac      	ite	ge
 800474c:	6563      	strge	r3, [r4, #84]	; 0x54
 800474e:	81a3      	strhlt	r3, [r4, #12]
 8004750:	bd10      	pop	{r4, pc}

08004752 <__swrite>:
 8004752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004756:	461f      	mov	r7, r3
 8004758:	898b      	ldrh	r3, [r1, #12]
 800475a:	05db      	lsls	r3, r3, #23
 800475c:	4605      	mov	r5, r0
 800475e:	460c      	mov	r4, r1
 8004760:	4616      	mov	r6, r2
 8004762:	d505      	bpl.n	8004770 <__swrite+0x1e>
 8004764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004768:	2302      	movs	r3, #2
 800476a:	2200      	movs	r2, #0
 800476c:	f000 f868 	bl	8004840 <_lseek_r>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800477a:	81a3      	strh	r3, [r4, #12]
 800477c:	4632      	mov	r2, r6
 800477e:	463b      	mov	r3, r7
 8004780:	4628      	mov	r0, r5
 8004782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	f000 b817 	b.w	80047b8 <_write_r>

0800478a <__sseek>:
 800478a:	b510      	push	{r4, lr}
 800478c:	460c      	mov	r4, r1
 800478e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004792:	f000 f855 	bl	8004840 <_lseek_r>
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	bf15      	itete	ne
 800479c:	6560      	strne	r0, [r4, #84]	; 0x54
 800479e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047a6:	81a3      	strheq	r3, [r4, #12]
 80047a8:	bf18      	it	ne
 80047aa:	81a3      	strhne	r3, [r4, #12]
 80047ac:	bd10      	pop	{r4, pc}

080047ae <__sclose>:
 80047ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b2:	f000 b813 	b.w	80047dc <_close_r>
	...

080047b8 <_write_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d07      	ldr	r5, [pc, #28]	; (80047d8 <_write_r+0x20>)
 80047bc:	4604      	mov	r4, r0
 80047be:	4608      	mov	r0, r1
 80047c0:	4611      	mov	r1, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	602a      	str	r2, [r5, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f7fc f97f 	bl	8000aca <_write>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_write_r+0x1e>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_write_r+0x1e>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	20012e28 	.word	0x20012e28

080047dc <_close_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d06      	ldr	r5, [pc, #24]	; (80047f8 <_close_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fc f98b 	bl	8000b02 <_close>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_close_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_close_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20012e28 	.word	0x20012e28

080047fc <_fstat_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d07      	ldr	r5, [pc, #28]	; (800481c <_fstat_r+0x20>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	f7fc f986 	bl	8000b1a <_fstat>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d102      	bne.n	8004818 <_fstat_r+0x1c>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	b103      	cbz	r3, 8004818 <_fstat_r+0x1c>
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	20012e28 	.word	0x20012e28

08004820 <_isatty_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	; (800483c <_isatty_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc f985 	bl	8000b3a <_isatty>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_isatty_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_isatty_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20012e28 	.word	0x20012e28

08004840 <_lseek_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4d07      	ldr	r5, [pc, #28]	; (8004860 <_lseek_r+0x20>)
 8004844:	4604      	mov	r4, r0
 8004846:	4608      	mov	r0, r1
 8004848:	4611      	mov	r1, r2
 800484a:	2200      	movs	r2, #0
 800484c:	602a      	str	r2, [r5, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f7fc f97e 	bl	8000b50 <_lseek>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_lseek_r+0x1e>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_lseek_r+0x1e>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20012e28 	.word	0x20012e28

08004864 <__malloc_lock>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__malloc_lock+0x8>)
 8004866:	f7ff bb1d 	b.w	8003ea4 <__retarget_lock_acquire_recursive>
 800486a:	bf00      	nop
 800486c:	20012e1c 	.word	0x20012e1c

08004870 <__malloc_unlock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_unlock+0x8>)
 8004872:	f7ff bb18 	b.w	8003ea6 <__retarget_lock_release_recursive>
 8004876:	bf00      	nop
 8004878:	20012e1c 	.word	0x20012e1c

0800487c <_read_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d07      	ldr	r5, [pc, #28]	; (800489c <_read_r+0x20>)
 8004880:	4604      	mov	r4, r0
 8004882:	4608      	mov	r0, r1
 8004884:	4611      	mov	r1, r2
 8004886:	2200      	movs	r2, #0
 8004888:	602a      	str	r2, [r5, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f7fc f900 	bl	8000a90 <_read>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_read_r+0x1e>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_read_r+0x1e>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20012e28 	.word	0x20012e28

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
